
Final_Project_MCU2.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00002dfe  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000020  00800060  00002dfe  00002e92  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000013  00800080  00800080  00002eb2  2**0
                  ALLOC
  3 .stab         000030e4  00000000  00000000  00002eb4  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      00001555  00000000  00000000  00005f98  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 00000140  00000000  00000000  000074ed  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_pubnames 00000170  00000000  00000000  0000762d  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   00001c49  00000000  00000000  0000779d  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00000eeb  00000000  00000000  000093e6  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   00000dad  00000000  00000000  0000a2d1  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  00000160  00000000  00000000  0000b080  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    0000028d  00000000  00000000  0000b1e0  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    000007ce  00000000  00000000  0000b46d  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000050  00000000  00000000  0000bc3b  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
       4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       c:	0c 94 b4 12 	jmp	0x2568	; 0x2568 <__vector_3>
      10:	0c 94 81 12 	jmp	0x2502	; 0x2502 <__vector_4>
      14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      18:	0c 94 4e 12 	jmp	0x249c	; 0x249c <__vector_6>
      1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      20:	0c 94 1b 12 	jmp	0x2436	; 0x2436 <__vector_8>
      24:	0c 94 b5 11 	jmp	0x236a	; 0x236a <__vector_9>
      28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      4c:	0c 94 e8 11 	jmp	0x23d0	; 0x23d0 <__vector_19>
      50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d4 e0       	ldi	r29, 0x04	; 4
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
      60:	10 e0       	ldi	r17, 0x00	; 0
      62:	a0 e6       	ldi	r26, 0x60	; 96
      64:	b0 e0       	ldi	r27, 0x00	; 0
      66:	ee ef       	ldi	r30, 0xFE	; 254
      68:	fd e2       	ldi	r31, 0x2D	; 45
      6a:	02 c0       	rjmp	.+4      	; 0x70 <.do_copy_data_start>

0000006c <.do_copy_data_loop>:
      6c:	05 90       	lpm	r0, Z+
      6e:	0d 92       	st	X+, r0

00000070 <.do_copy_data_start>:
      70:	a0 38       	cpi	r26, 0x80	; 128
      72:	b1 07       	cpc	r27, r17
      74:	d9 f7       	brne	.-10     	; 0x6c <.do_copy_data_loop>

00000076 <__do_clear_bss>:
      76:	10 e0       	ldi	r17, 0x00	; 0
      78:	a0 e8       	ldi	r26, 0x80	; 128
      7a:	b0 e0       	ldi	r27, 0x00	; 0
      7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
      7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
      80:	a3 39       	cpi	r26, 0x93	; 147
      82:	b1 07       	cpc	r27, r17
      84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
      86:	0e 94 bf 0e 	call	0x1d7e	; 0x1d7e <main>
      8a:	0c 94 fd 16 	jmp	0x2dfa	; 0x2dfa <_exit>

0000008e <__bad_interrupt>:
      8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <__fixunssfsi>:
      92:	ef 92       	push	r14
      94:	ff 92       	push	r15
      96:	0f 93       	push	r16
      98:	1f 93       	push	r17
      9a:	7b 01       	movw	r14, r22
      9c:	8c 01       	movw	r16, r24
      9e:	20 e0       	ldi	r18, 0x00	; 0
      a0:	30 e0       	ldi	r19, 0x00	; 0
      a2:	40 e0       	ldi	r20, 0x00	; 0
      a4:	5f e4       	ldi	r21, 0x4F	; 79
      a6:	0e 94 49 03 	call	0x692	; 0x692 <__gesf2>
      aa:	88 23       	and	r24, r24
      ac:	8c f0       	brlt	.+34     	; 0xd0 <__fixunssfsi+0x3e>
      ae:	c8 01       	movw	r24, r16
      b0:	b7 01       	movw	r22, r14
      b2:	20 e0       	ldi	r18, 0x00	; 0
      b4:	30 e0       	ldi	r19, 0x00	; 0
      b6:	40 e0       	ldi	r20, 0x00	; 0
      b8:	5f e4       	ldi	r21, 0x4F	; 79
      ba:	0e 94 c1 01 	call	0x382	; 0x382 <__subsf3>
      be:	0e 94 a9 03 	call	0x752	; 0x752 <__fixsfsi>
      c2:	9b 01       	movw	r18, r22
      c4:	ac 01       	movw	r20, r24
      c6:	20 50       	subi	r18, 0x00	; 0
      c8:	30 40       	sbci	r19, 0x00	; 0
      ca:	40 40       	sbci	r20, 0x00	; 0
      cc:	50 48       	sbci	r21, 0x80	; 128
      ce:	06 c0       	rjmp	.+12     	; 0xdc <__fixunssfsi+0x4a>
      d0:	c8 01       	movw	r24, r16
      d2:	b7 01       	movw	r22, r14
      d4:	0e 94 a9 03 	call	0x752	; 0x752 <__fixsfsi>
      d8:	9b 01       	movw	r18, r22
      da:	ac 01       	movw	r20, r24
      dc:	b9 01       	movw	r22, r18
      de:	ca 01       	movw	r24, r20
      e0:	1f 91       	pop	r17
      e2:	0f 91       	pop	r16
      e4:	ff 90       	pop	r15
      e6:	ef 90       	pop	r14
      e8:	08 95       	ret

000000ea <_fpadd_parts>:
      ea:	a0 e0       	ldi	r26, 0x00	; 0
      ec:	b0 e0       	ldi	r27, 0x00	; 0
      ee:	eb e7       	ldi	r30, 0x7B	; 123
      f0:	f0 e0       	ldi	r31, 0x00	; 0
      f2:	0c 94 81 16 	jmp	0x2d02	; 0x2d02 <__prologue_saves__>
      f6:	dc 01       	movw	r26, r24
      f8:	2b 01       	movw	r4, r22
      fa:	fa 01       	movw	r30, r20
      fc:	9c 91       	ld	r25, X
      fe:	92 30       	cpi	r25, 0x02	; 2
     100:	08 f4       	brcc	.+2      	; 0x104 <_fpadd_parts+0x1a>
     102:	39 c1       	rjmp	.+626    	; 0x376 <_fpadd_parts+0x28c>
     104:	eb 01       	movw	r28, r22
     106:	88 81       	ld	r24, Y
     108:	82 30       	cpi	r24, 0x02	; 2
     10a:	08 f4       	brcc	.+2      	; 0x10e <_fpadd_parts+0x24>
     10c:	33 c1       	rjmp	.+614    	; 0x374 <_fpadd_parts+0x28a>
     10e:	94 30       	cpi	r25, 0x04	; 4
     110:	69 f4       	brne	.+26     	; 0x12c <_fpadd_parts+0x42>
     112:	84 30       	cpi	r24, 0x04	; 4
     114:	09 f0       	breq	.+2      	; 0x118 <_fpadd_parts+0x2e>
     116:	2f c1       	rjmp	.+606    	; 0x376 <_fpadd_parts+0x28c>
     118:	11 96       	adiw	r26, 0x01	; 1
     11a:	9c 91       	ld	r25, X
     11c:	11 97       	sbiw	r26, 0x01	; 1
     11e:	89 81       	ldd	r24, Y+1	; 0x01
     120:	98 17       	cp	r25, r24
     122:	09 f4       	brne	.+2      	; 0x126 <_fpadd_parts+0x3c>
     124:	28 c1       	rjmp	.+592    	; 0x376 <_fpadd_parts+0x28c>
     126:	ae e6       	ldi	r26, 0x6E	; 110
     128:	b0 e0       	ldi	r27, 0x00	; 0
     12a:	25 c1       	rjmp	.+586    	; 0x376 <_fpadd_parts+0x28c>
     12c:	84 30       	cpi	r24, 0x04	; 4
     12e:	09 f4       	brne	.+2      	; 0x132 <_fpadd_parts+0x48>
     130:	21 c1       	rjmp	.+578    	; 0x374 <_fpadd_parts+0x28a>
     132:	82 30       	cpi	r24, 0x02	; 2
     134:	a9 f4       	brne	.+42     	; 0x160 <_fpadd_parts+0x76>
     136:	92 30       	cpi	r25, 0x02	; 2
     138:	09 f0       	breq	.+2      	; 0x13c <_fpadd_parts+0x52>
     13a:	1d c1       	rjmp	.+570    	; 0x376 <_fpadd_parts+0x28c>
     13c:	9a 01       	movw	r18, r20
     13e:	ad 01       	movw	r20, r26
     140:	88 e0       	ldi	r24, 0x08	; 8
     142:	ea 01       	movw	r28, r20
     144:	09 90       	ld	r0, Y+
     146:	ae 01       	movw	r20, r28
     148:	e9 01       	movw	r28, r18
     14a:	09 92       	st	Y+, r0
     14c:	9e 01       	movw	r18, r28
     14e:	81 50       	subi	r24, 0x01	; 1
     150:	c1 f7       	brne	.-16     	; 0x142 <_fpadd_parts+0x58>
     152:	e2 01       	movw	r28, r4
     154:	89 81       	ldd	r24, Y+1	; 0x01
     156:	11 96       	adiw	r26, 0x01	; 1
     158:	9c 91       	ld	r25, X
     15a:	89 23       	and	r24, r25
     15c:	81 83       	std	Z+1, r24	; 0x01
     15e:	08 c1       	rjmp	.+528    	; 0x370 <_fpadd_parts+0x286>
     160:	92 30       	cpi	r25, 0x02	; 2
     162:	09 f4       	brne	.+2      	; 0x166 <_fpadd_parts+0x7c>
     164:	07 c1       	rjmp	.+526    	; 0x374 <_fpadd_parts+0x28a>
     166:	12 96       	adiw	r26, 0x02	; 2
     168:	2d 90       	ld	r2, X+
     16a:	3c 90       	ld	r3, X
     16c:	13 97       	sbiw	r26, 0x03	; 3
     16e:	eb 01       	movw	r28, r22
     170:	8a 81       	ldd	r24, Y+2	; 0x02
     172:	9b 81       	ldd	r25, Y+3	; 0x03
     174:	14 96       	adiw	r26, 0x04	; 4
     176:	ad 90       	ld	r10, X+
     178:	bd 90       	ld	r11, X+
     17a:	cd 90       	ld	r12, X+
     17c:	dc 90       	ld	r13, X
     17e:	17 97       	sbiw	r26, 0x07	; 7
     180:	ec 80       	ldd	r14, Y+4	; 0x04
     182:	fd 80       	ldd	r15, Y+5	; 0x05
     184:	0e 81       	ldd	r16, Y+6	; 0x06
     186:	1f 81       	ldd	r17, Y+7	; 0x07
     188:	91 01       	movw	r18, r2
     18a:	28 1b       	sub	r18, r24
     18c:	39 0b       	sbc	r19, r25
     18e:	b9 01       	movw	r22, r18
     190:	37 ff       	sbrs	r19, 7
     192:	04 c0       	rjmp	.+8      	; 0x19c <_fpadd_parts+0xb2>
     194:	66 27       	eor	r22, r22
     196:	77 27       	eor	r23, r23
     198:	62 1b       	sub	r22, r18
     19a:	73 0b       	sbc	r23, r19
     19c:	60 32       	cpi	r22, 0x20	; 32
     19e:	71 05       	cpc	r23, r1
     1a0:	0c f0       	brlt	.+2      	; 0x1a4 <_fpadd_parts+0xba>
     1a2:	61 c0       	rjmp	.+194    	; 0x266 <_fpadd_parts+0x17c>
     1a4:	12 16       	cp	r1, r18
     1a6:	13 06       	cpc	r1, r19
     1a8:	6c f5       	brge	.+90     	; 0x204 <_fpadd_parts+0x11a>
     1aa:	37 01       	movw	r6, r14
     1ac:	48 01       	movw	r8, r16
     1ae:	06 2e       	mov	r0, r22
     1b0:	04 c0       	rjmp	.+8      	; 0x1ba <_fpadd_parts+0xd0>
     1b2:	96 94       	lsr	r9
     1b4:	87 94       	ror	r8
     1b6:	77 94       	ror	r7
     1b8:	67 94       	ror	r6
     1ba:	0a 94       	dec	r0
     1bc:	d2 f7       	brpl	.-12     	; 0x1b2 <_fpadd_parts+0xc8>
     1be:	21 e0       	ldi	r18, 0x01	; 1
     1c0:	30 e0       	ldi	r19, 0x00	; 0
     1c2:	40 e0       	ldi	r20, 0x00	; 0
     1c4:	50 e0       	ldi	r21, 0x00	; 0
     1c6:	04 c0       	rjmp	.+8      	; 0x1d0 <_fpadd_parts+0xe6>
     1c8:	22 0f       	add	r18, r18
     1ca:	33 1f       	adc	r19, r19
     1cc:	44 1f       	adc	r20, r20
     1ce:	55 1f       	adc	r21, r21
     1d0:	6a 95       	dec	r22
     1d2:	d2 f7       	brpl	.-12     	; 0x1c8 <_fpadd_parts+0xde>
     1d4:	21 50       	subi	r18, 0x01	; 1
     1d6:	30 40       	sbci	r19, 0x00	; 0
     1d8:	40 40       	sbci	r20, 0x00	; 0
     1da:	50 40       	sbci	r21, 0x00	; 0
     1dc:	2e 21       	and	r18, r14
     1de:	3f 21       	and	r19, r15
     1e0:	40 23       	and	r20, r16
     1e2:	51 23       	and	r21, r17
     1e4:	21 15       	cp	r18, r1
     1e6:	31 05       	cpc	r19, r1
     1e8:	41 05       	cpc	r20, r1
     1ea:	51 05       	cpc	r21, r1
     1ec:	21 f0       	breq	.+8      	; 0x1f6 <_fpadd_parts+0x10c>
     1ee:	21 e0       	ldi	r18, 0x01	; 1
     1f0:	30 e0       	ldi	r19, 0x00	; 0
     1f2:	40 e0       	ldi	r20, 0x00	; 0
     1f4:	50 e0       	ldi	r21, 0x00	; 0
     1f6:	79 01       	movw	r14, r18
     1f8:	8a 01       	movw	r16, r20
     1fa:	e6 28       	or	r14, r6
     1fc:	f7 28       	or	r15, r7
     1fe:	08 29       	or	r16, r8
     200:	19 29       	or	r17, r9
     202:	3c c0       	rjmp	.+120    	; 0x27c <_fpadd_parts+0x192>
     204:	23 2b       	or	r18, r19
     206:	d1 f1       	breq	.+116    	; 0x27c <_fpadd_parts+0x192>
     208:	26 0e       	add	r2, r22
     20a:	37 1e       	adc	r3, r23
     20c:	35 01       	movw	r6, r10
     20e:	46 01       	movw	r8, r12
     210:	06 2e       	mov	r0, r22
     212:	04 c0       	rjmp	.+8      	; 0x21c <_fpadd_parts+0x132>
     214:	96 94       	lsr	r9
     216:	87 94       	ror	r8
     218:	77 94       	ror	r7
     21a:	67 94       	ror	r6
     21c:	0a 94       	dec	r0
     21e:	d2 f7       	brpl	.-12     	; 0x214 <_fpadd_parts+0x12a>
     220:	21 e0       	ldi	r18, 0x01	; 1
     222:	30 e0       	ldi	r19, 0x00	; 0
     224:	40 e0       	ldi	r20, 0x00	; 0
     226:	50 e0       	ldi	r21, 0x00	; 0
     228:	04 c0       	rjmp	.+8      	; 0x232 <_fpadd_parts+0x148>
     22a:	22 0f       	add	r18, r18
     22c:	33 1f       	adc	r19, r19
     22e:	44 1f       	adc	r20, r20
     230:	55 1f       	adc	r21, r21
     232:	6a 95       	dec	r22
     234:	d2 f7       	brpl	.-12     	; 0x22a <_fpadd_parts+0x140>
     236:	21 50       	subi	r18, 0x01	; 1
     238:	30 40       	sbci	r19, 0x00	; 0
     23a:	40 40       	sbci	r20, 0x00	; 0
     23c:	50 40       	sbci	r21, 0x00	; 0
     23e:	2a 21       	and	r18, r10
     240:	3b 21       	and	r19, r11
     242:	4c 21       	and	r20, r12
     244:	5d 21       	and	r21, r13
     246:	21 15       	cp	r18, r1
     248:	31 05       	cpc	r19, r1
     24a:	41 05       	cpc	r20, r1
     24c:	51 05       	cpc	r21, r1
     24e:	21 f0       	breq	.+8      	; 0x258 <_fpadd_parts+0x16e>
     250:	21 e0       	ldi	r18, 0x01	; 1
     252:	30 e0       	ldi	r19, 0x00	; 0
     254:	40 e0       	ldi	r20, 0x00	; 0
     256:	50 e0       	ldi	r21, 0x00	; 0
     258:	59 01       	movw	r10, r18
     25a:	6a 01       	movw	r12, r20
     25c:	a6 28       	or	r10, r6
     25e:	b7 28       	or	r11, r7
     260:	c8 28       	or	r12, r8
     262:	d9 28       	or	r13, r9
     264:	0b c0       	rjmp	.+22     	; 0x27c <_fpadd_parts+0x192>
     266:	82 15       	cp	r24, r2
     268:	93 05       	cpc	r25, r3
     26a:	2c f0       	brlt	.+10     	; 0x276 <_fpadd_parts+0x18c>
     26c:	1c 01       	movw	r2, r24
     26e:	aa 24       	eor	r10, r10
     270:	bb 24       	eor	r11, r11
     272:	65 01       	movw	r12, r10
     274:	03 c0       	rjmp	.+6      	; 0x27c <_fpadd_parts+0x192>
     276:	ee 24       	eor	r14, r14
     278:	ff 24       	eor	r15, r15
     27a:	87 01       	movw	r16, r14
     27c:	11 96       	adiw	r26, 0x01	; 1
     27e:	9c 91       	ld	r25, X
     280:	d2 01       	movw	r26, r4
     282:	11 96       	adiw	r26, 0x01	; 1
     284:	8c 91       	ld	r24, X
     286:	98 17       	cp	r25, r24
     288:	09 f4       	brne	.+2      	; 0x28c <_fpadd_parts+0x1a2>
     28a:	45 c0       	rjmp	.+138    	; 0x316 <_fpadd_parts+0x22c>
     28c:	99 23       	and	r25, r25
     28e:	39 f0       	breq	.+14     	; 0x29e <_fpadd_parts+0x1b4>
     290:	a8 01       	movw	r20, r16
     292:	97 01       	movw	r18, r14
     294:	2a 19       	sub	r18, r10
     296:	3b 09       	sbc	r19, r11
     298:	4c 09       	sbc	r20, r12
     29a:	5d 09       	sbc	r21, r13
     29c:	06 c0       	rjmp	.+12     	; 0x2aa <_fpadd_parts+0x1c0>
     29e:	a6 01       	movw	r20, r12
     2a0:	95 01       	movw	r18, r10
     2a2:	2e 19       	sub	r18, r14
     2a4:	3f 09       	sbc	r19, r15
     2a6:	40 0b       	sbc	r20, r16
     2a8:	51 0b       	sbc	r21, r17
     2aa:	57 fd       	sbrc	r21, 7
     2ac:	08 c0       	rjmp	.+16     	; 0x2be <_fpadd_parts+0x1d4>
     2ae:	11 82       	std	Z+1, r1	; 0x01
     2b0:	33 82       	std	Z+3, r3	; 0x03
     2b2:	22 82       	std	Z+2, r2	; 0x02
     2b4:	24 83       	std	Z+4, r18	; 0x04
     2b6:	35 83       	std	Z+5, r19	; 0x05
     2b8:	46 83       	std	Z+6, r20	; 0x06
     2ba:	57 83       	std	Z+7, r21	; 0x07
     2bc:	1d c0       	rjmp	.+58     	; 0x2f8 <_fpadd_parts+0x20e>
     2be:	81 e0       	ldi	r24, 0x01	; 1
     2c0:	81 83       	std	Z+1, r24	; 0x01
     2c2:	33 82       	std	Z+3, r3	; 0x03
     2c4:	22 82       	std	Z+2, r2	; 0x02
     2c6:	88 27       	eor	r24, r24
     2c8:	99 27       	eor	r25, r25
     2ca:	dc 01       	movw	r26, r24
     2cc:	82 1b       	sub	r24, r18
     2ce:	93 0b       	sbc	r25, r19
     2d0:	a4 0b       	sbc	r26, r20
     2d2:	b5 0b       	sbc	r27, r21
     2d4:	84 83       	std	Z+4, r24	; 0x04
     2d6:	95 83       	std	Z+5, r25	; 0x05
     2d8:	a6 83       	std	Z+6, r26	; 0x06
     2da:	b7 83       	std	Z+7, r27	; 0x07
     2dc:	0d c0       	rjmp	.+26     	; 0x2f8 <_fpadd_parts+0x20e>
     2de:	22 0f       	add	r18, r18
     2e0:	33 1f       	adc	r19, r19
     2e2:	44 1f       	adc	r20, r20
     2e4:	55 1f       	adc	r21, r21
     2e6:	24 83       	std	Z+4, r18	; 0x04
     2e8:	35 83       	std	Z+5, r19	; 0x05
     2ea:	46 83       	std	Z+6, r20	; 0x06
     2ec:	57 83       	std	Z+7, r21	; 0x07
     2ee:	82 81       	ldd	r24, Z+2	; 0x02
     2f0:	93 81       	ldd	r25, Z+3	; 0x03
     2f2:	01 97       	sbiw	r24, 0x01	; 1
     2f4:	93 83       	std	Z+3, r25	; 0x03
     2f6:	82 83       	std	Z+2, r24	; 0x02
     2f8:	24 81       	ldd	r18, Z+4	; 0x04
     2fa:	35 81       	ldd	r19, Z+5	; 0x05
     2fc:	46 81       	ldd	r20, Z+6	; 0x06
     2fe:	57 81       	ldd	r21, Z+7	; 0x07
     300:	da 01       	movw	r26, r20
     302:	c9 01       	movw	r24, r18
     304:	01 97       	sbiw	r24, 0x01	; 1
     306:	a1 09       	sbc	r26, r1
     308:	b1 09       	sbc	r27, r1
     30a:	8f 5f       	subi	r24, 0xFF	; 255
     30c:	9f 4f       	sbci	r25, 0xFF	; 255
     30e:	af 4f       	sbci	r26, 0xFF	; 255
     310:	bf 43       	sbci	r27, 0x3F	; 63
     312:	28 f3       	brcs	.-54     	; 0x2de <_fpadd_parts+0x1f4>
     314:	0b c0       	rjmp	.+22     	; 0x32c <_fpadd_parts+0x242>
     316:	91 83       	std	Z+1, r25	; 0x01
     318:	33 82       	std	Z+3, r3	; 0x03
     31a:	22 82       	std	Z+2, r2	; 0x02
     31c:	ea 0c       	add	r14, r10
     31e:	fb 1c       	adc	r15, r11
     320:	0c 1d       	adc	r16, r12
     322:	1d 1d       	adc	r17, r13
     324:	e4 82       	std	Z+4, r14	; 0x04
     326:	f5 82       	std	Z+5, r15	; 0x05
     328:	06 83       	std	Z+6, r16	; 0x06
     32a:	17 83       	std	Z+7, r17	; 0x07
     32c:	83 e0       	ldi	r24, 0x03	; 3
     32e:	80 83       	st	Z, r24
     330:	24 81       	ldd	r18, Z+4	; 0x04
     332:	35 81       	ldd	r19, Z+5	; 0x05
     334:	46 81       	ldd	r20, Z+6	; 0x06
     336:	57 81       	ldd	r21, Z+7	; 0x07
     338:	57 ff       	sbrs	r21, 7
     33a:	1a c0       	rjmp	.+52     	; 0x370 <_fpadd_parts+0x286>
     33c:	c9 01       	movw	r24, r18
     33e:	aa 27       	eor	r26, r26
     340:	97 fd       	sbrc	r25, 7
     342:	a0 95       	com	r26
     344:	ba 2f       	mov	r27, r26
     346:	81 70       	andi	r24, 0x01	; 1
     348:	90 70       	andi	r25, 0x00	; 0
     34a:	a0 70       	andi	r26, 0x00	; 0
     34c:	b0 70       	andi	r27, 0x00	; 0
     34e:	56 95       	lsr	r21
     350:	47 95       	ror	r20
     352:	37 95       	ror	r19
     354:	27 95       	ror	r18
     356:	82 2b       	or	r24, r18
     358:	93 2b       	or	r25, r19
     35a:	a4 2b       	or	r26, r20
     35c:	b5 2b       	or	r27, r21
     35e:	84 83       	std	Z+4, r24	; 0x04
     360:	95 83       	std	Z+5, r25	; 0x05
     362:	a6 83       	std	Z+6, r26	; 0x06
     364:	b7 83       	std	Z+7, r27	; 0x07
     366:	82 81       	ldd	r24, Z+2	; 0x02
     368:	93 81       	ldd	r25, Z+3	; 0x03
     36a:	01 96       	adiw	r24, 0x01	; 1
     36c:	93 83       	std	Z+3, r25	; 0x03
     36e:	82 83       	std	Z+2, r24	; 0x02
     370:	df 01       	movw	r26, r30
     372:	01 c0       	rjmp	.+2      	; 0x376 <_fpadd_parts+0x28c>
     374:	d2 01       	movw	r26, r4
     376:	cd 01       	movw	r24, r26
     378:	cd b7       	in	r28, 0x3d	; 61
     37a:	de b7       	in	r29, 0x3e	; 62
     37c:	e2 e1       	ldi	r30, 0x12	; 18
     37e:	0c 94 9d 16 	jmp	0x2d3a	; 0x2d3a <__epilogue_restores__>

00000382 <__subsf3>:
     382:	a0 e2       	ldi	r26, 0x20	; 32
     384:	b0 e0       	ldi	r27, 0x00	; 0
     386:	e7 ec       	ldi	r30, 0xC7	; 199
     388:	f1 e0       	ldi	r31, 0x01	; 1
     38a:	0c 94 8d 16 	jmp	0x2d1a	; 0x2d1a <__prologue_saves__+0x18>
     38e:	69 83       	std	Y+1, r22	; 0x01
     390:	7a 83       	std	Y+2, r23	; 0x02
     392:	8b 83       	std	Y+3, r24	; 0x03
     394:	9c 83       	std	Y+4, r25	; 0x04
     396:	2d 83       	std	Y+5, r18	; 0x05
     398:	3e 83       	std	Y+6, r19	; 0x06
     39a:	4f 83       	std	Y+7, r20	; 0x07
     39c:	58 87       	std	Y+8, r21	; 0x08
     39e:	e9 e0       	ldi	r30, 0x09	; 9
     3a0:	ee 2e       	mov	r14, r30
     3a2:	f1 2c       	mov	r15, r1
     3a4:	ec 0e       	add	r14, r28
     3a6:	fd 1e       	adc	r15, r29
     3a8:	ce 01       	movw	r24, r28
     3aa:	01 96       	adiw	r24, 0x01	; 1
     3ac:	b7 01       	movw	r22, r14
     3ae:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     3b2:	8e 01       	movw	r16, r28
     3b4:	0f 5e       	subi	r16, 0xEF	; 239
     3b6:	1f 4f       	sbci	r17, 0xFF	; 255
     3b8:	ce 01       	movw	r24, r28
     3ba:	05 96       	adiw	r24, 0x05	; 5
     3bc:	b8 01       	movw	r22, r16
     3be:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     3c2:	8a 89       	ldd	r24, Y+18	; 0x12
     3c4:	91 e0       	ldi	r25, 0x01	; 1
     3c6:	89 27       	eor	r24, r25
     3c8:	8a 8b       	std	Y+18, r24	; 0x12
     3ca:	c7 01       	movw	r24, r14
     3cc:	b8 01       	movw	r22, r16
     3ce:	ae 01       	movw	r20, r28
     3d0:	47 5e       	subi	r20, 0xE7	; 231
     3d2:	5f 4f       	sbci	r21, 0xFF	; 255
     3d4:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     3d8:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__pack_f>
     3dc:	a0 96       	adiw	r28, 0x20	; 32
     3de:	e6 e0       	ldi	r30, 0x06	; 6
     3e0:	0c 94 a9 16 	jmp	0x2d52	; 0x2d52 <__epilogue_restores__+0x18>

000003e4 <__addsf3>:
     3e4:	a0 e2       	ldi	r26, 0x20	; 32
     3e6:	b0 e0       	ldi	r27, 0x00	; 0
     3e8:	e8 ef       	ldi	r30, 0xF8	; 248
     3ea:	f1 e0       	ldi	r31, 0x01	; 1
     3ec:	0c 94 8d 16 	jmp	0x2d1a	; 0x2d1a <__prologue_saves__+0x18>
     3f0:	69 83       	std	Y+1, r22	; 0x01
     3f2:	7a 83       	std	Y+2, r23	; 0x02
     3f4:	8b 83       	std	Y+3, r24	; 0x03
     3f6:	9c 83       	std	Y+4, r25	; 0x04
     3f8:	2d 83       	std	Y+5, r18	; 0x05
     3fa:	3e 83       	std	Y+6, r19	; 0x06
     3fc:	4f 83       	std	Y+7, r20	; 0x07
     3fe:	58 87       	std	Y+8, r21	; 0x08
     400:	f9 e0       	ldi	r31, 0x09	; 9
     402:	ef 2e       	mov	r14, r31
     404:	f1 2c       	mov	r15, r1
     406:	ec 0e       	add	r14, r28
     408:	fd 1e       	adc	r15, r29
     40a:	ce 01       	movw	r24, r28
     40c:	01 96       	adiw	r24, 0x01	; 1
     40e:	b7 01       	movw	r22, r14
     410:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     414:	8e 01       	movw	r16, r28
     416:	0f 5e       	subi	r16, 0xEF	; 239
     418:	1f 4f       	sbci	r17, 0xFF	; 255
     41a:	ce 01       	movw	r24, r28
     41c:	05 96       	adiw	r24, 0x05	; 5
     41e:	b8 01       	movw	r22, r16
     420:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     424:	c7 01       	movw	r24, r14
     426:	b8 01       	movw	r22, r16
     428:	ae 01       	movw	r20, r28
     42a:	47 5e       	subi	r20, 0xE7	; 231
     42c:	5f 4f       	sbci	r21, 0xFF	; 255
     42e:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     432:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__pack_f>
     436:	a0 96       	adiw	r28, 0x20	; 32
     438:	e6 e0       	ldi	r30, 0x06	; 6
     43a:	0c 94 a9 16 	jmp	0x2d52	; 0x2d52 <__epilogue_restores__+0x18>

0000043e <__mulsf3>:
     43e:	a0 e2       	ldi	r26, 0x20	; 32
     440:	b0 e0       	ldi	r27, 0x00	; 0
     442:	e5 e2       	ldi	r30, 0x25	; 37
     444:	f2 e0       	ldi	r31, 0x02	; 2
     446:	0c 94 81 16 	jmp	0x2d02	; 0x2d02 <__prologue_saves__>
     44a:	69 83       	std	Y+1, r22	; 0x01
     44c:	7a 83       	std	Y+2, r23	; 0x02
     44e:	8b 83       	std	Y+3, r24	; 0x03
     450:	9c 83       	std	Y+4, r25	; 0x04
     452:	2d 83       	std	Y+5, r18	; 0x05
     454:	3e 83       	std	Y+6, r19	; 0x06
     456:	4f 83       	std	Y+7, r20	; 0x07
     458:	58 87       	std	Y+8, r21	; 0x08
     45a:	ce 01       	movw	r24, r28
     45c:	01 96       	adiw	r24, 0x01	; 1
     45e:	be 01       	movw	r22, r28
     460:	67 5f       	subi	r22, 0xF7	; 247
     462:	7f 4f       	sbci	r23, 0xFF	; 255
     464:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     468:	ce 01       	movw	r24, r28
     46a:	05 96       	adiw	r24, 0x05	; 5
     46c:	be 01       	movw	r22, r28
     46e:	6f 5e       	subi	r22, 0xEF	; 239
     470:	7f 4f       	sbci	r23, 0xFF	; 255
     472:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     476:	99 85       	ldd	r25, Y+9	; 0x09
     478:	92 30       	cpi	r25, 0x02	; 2
     47a:	88 f0       	brcs	.+34     	; 0x49e <__stack+0x3f>
     47c:	89 89       	ldd	r24, Y+17	; 0x11
     47e:	82 30       	cpi	r24, 0x02	; 2
     480:	c8 f0       	brcs	.+50     	; 0x4b4 <__stack+0x55>
     482:	94 30       	cpi	r25, 0x04	; 4
     484:	19 f4       	brne	.+6      	; 0x48c <__stack+0x2d>
     486:	82 30       	cpi	r24, 0x02	; 2
     488:	51 f4       	brne	.+20     	; 0x49e <__stack+0x3f>
     48a:	04 c0       	rjmp	.+8      	; 0x494 <__stack+0x35>
     48c:	84 30       	cpi	r24, 0x04	; 4
     48e:	29 f4       	brne	.+10     	; 0x49a <__stack+0x3b>
     490:	92 30       	cpi	r25, 0x02	; 2
     492:	81 f4       	brne	.+32     	; 0x4b4 <__stack+0x55>
     494:	8e e6       	ldi	r24, 0x6E	; 110
     496:	90 e0       	ldi	r25, 0x00	; 0
     498:	c6 c0       	rjmp	.+396    	; 0x626 <__stack+0x1c7>
     49a:	92 30       	cpi	r25, 0x02	; 2
     49c:	49 f4       	brne	.+18     	; 0x4b0 <__stack+0x51>
     49e:	20 e0       	ldi	r18, 0x00	; 0
     4a0:	9a 85       	ldd	r25, Y+10	; 0x0a
     4a2:	8a 89       	ldd	r24, Y+18	; 0x12
     4a4:	98 13       	cpse	r25, r24
     4a6:	21 e0       	ldi	r18, 0x01	; 1
     4a8:	2a 87       	std	Y+10, r18	; 0x0a
     4aa:	ce 01       	movw	r24, r28
     4ac:	09 96       	adiw	r24, 0x09	; 9
     4ae:	bb c0       	rjmp	.+374    	; 0x626 <__stack+0x1c7>
     4b0:	82 30       	cpi	r24, 0x02	; 2
     4b2:	49 f4       	brne	.+18     	; 0x4c6 <__stack+0x67>
     4b4:	20 e0       	ldi	r18, 0x00	; 0
     4b6:	9a 85       	ldd	r25, Y+10	; 0x0a
     4b8:	8a 89       	ldd	r24, Y+18	; 0x12
     4ba:	98 13       	cpse	r25, r24
     4bc:	21 e0       	ldi	r18, 0x01	; 1
     4be:	2a 8b       	std	Y+18, r18	; 0x12
     4c0:	ce 01       	movw	r24, r28
     4c2:	41 96       	adiw	r24, 0x11	; 17
     4c4:	b0 c0       	rjmp	.+352    	; 0x626 <__stack+0x1c7>
     4c6:	2d 84       	ldd	r2, Y+13	; 0x0d
     4c8:	3e 84       	ldd	r3, Y+14	; 0x0e
     4ca:	4f 84       	ldd	r4, Y+15	; 0x0f
     4cc:	58 88       	ldd	r5, Y+16	; 0x10
     4ce:	6d 88       	ldd	r6, Y+21	; 0x15
     4d0:	7e 88       	ldd	r7, Y+22	; 0x16
     4d2:	8f 88       	ldd	r8, Y+23	; 0x17
     4d4:	98 8c       	ldd	r9, Y+24	; 0x18
     4d6:	ee 24       	eor	r14, r14
     4d8:	ff 24       	eor	r15, r15
     4da:	87 01       	movw	r16, r14
     4dc:	aa 24       	eor	r10, r10
     4de:	bb 24       	eor	r11, r11
     4e0:	65 01       	movw	r12, r10
     4e2:	40 e0       	ldi	r20, 0x00	; 0
     4e4:	50 e0       	ldi	r21, 0x00	; 0
     4e6:	60 e0       	ldi	r22, 0x00	; 0
     4e8:	70 e0       	ldi	r23, 0x00	; 0
     4ea:	e0 e0       	ldi	r30, 0x00	; 0
     4ec:	f0 e0       	ldi	r31, 0x00	; 0
     4ee:	c1 01       	movw	r24, r2
     4f0:	81 70       	andi	r24, 0x01	; 1
     4f2:	90 70       	andi	r25, 0x00	; 0
     4f4:	89 2b       	or	r24, r25
     4f6:	e9 f0       	breq	.+58     	; 0x532 <__stack+0xd3>
     4f8:	e6 0c       	add	r14, r6
     4fa:	f7 1c       	adc	r15, r7
     4fc:	08 1d       	adc	r16, r8
     4fe:	19 1d       	adc	r17, r9
     500:	9a 01       	movw	r18, r20
     502:	ab 01       	movw	r20, r22
     504:	2a 0d       	add	r18, r10
     506:	3b 1d       	adc	r19, r11
     508:	4c 1d       	adc	r20, r12
     50a:	5d 1d       	adc	r21, r13
     50c:	80 e0       	ldi	r24, 0x00	; 0
     50e:	90 e0       	ldi	r25, 0x00	; 0
     510:	a0 e0       	ldi	r26, 0x00	; 0
     512:	b0 e0       	ldi	r27, 0x00	; 0
     514:	e6 14       	cp	r14, r6
     516:	f7 04       	cpc	r15, r7
     518:	08 05       	cpc	r16, r8
     51a:	19 05       	cpc	r17, r9
     51c:	20 f4       	brcc	.+8      	; 0x526 <__stack+0xc7>
     51e:	81 e0       	ldi	r24, 0x01	; 1
     520:	90 e0       	ldi	r25, 0x00	; 0
     522:	a0 e0       	ldi	r26, 0x00	; 0
     524:	b0 e0       	ldi	r27, 0x00	; 0
     526:	ba 01       	movw	r22, r20
     528:	a9 01       	movw	r20, r18
     52a:	48 0f       	add	r20, r24
     52c:	59 1f       	adc	r21, r25
     52e:	6a 1f       	adc	r22, r26
     530:	7b 1f       	adc	r23, r27
     532:	aa 0c       	add	r10, r10
     534:	bb 1c       	adc	r11, r11
     536:	cc 1c       	adc	r12, r12
     538:	dd 1c       	adc	r13, r13
     53a:	97 fe       	sbrs	r9, 7
     53c:	08 c0       	rjmp	.+16     	; 0x54e <__stack+0xef>
     53e:	81 e0       	ldi	r24, 0x01	; 1
     540:	90 e0       	ldi	r25, 0x00	; 0
     542:	a0 e0       	ldi	r26, 0x00	; 0
     544:	b0 e0       	ldi	r27, 0x00	; 0
     546:	a8 2a       	or	r10, r24
     548:	b9 2a       	or	r11, r25
     54a:	ca 2a       	or	r12, r26
     54c:	db 2a       	or	r13, r27
     54e:	31 96       	adiw	r30, 0x01	; 1
     550:	e0 32       	cpi	r30, 0x20	; 32
     552:	f1 05       	cpc	r31, r1
     554:	49 f0       	breq	.+18     	; 0x568 <__stack+0x109>
     556:	66 0c       	add	r6, r6
     558:	77 1c       	adc	r7, r7
     55a:	88 1c       	adc	r8, r8
     55c:	99 1c       	adc	r9, r9
     55e:	56 94       	lsr	r5
     560:	47 94       	ror	r4
     562:	37 94       	ror	r3
     564:	27 94       	ror	r2
     566:	c3 cf       	rjmp	.-122    	; 0x4ee <__stack+0x8f>
     568:	fa 85       	ldd	r31, Y+10	; 0x0a
     56a:	ea 89       	ldd	r30, Y+18	; 0x12
     56c:	2b 89       	ldd	r18, Y+19	; 0x13
     56e:	3c 89       	ldd	r19, Y+20	; 0x14
     570:	8b 85       	ldd	r24, Y+11	; 0x0b
     572:	9c 85       	ldd	r25, Y+12	; 0x0c
     574:	28 0f       	add	r18, r24
     576:	39 1f       	adc	r19, r25
     578:	2e 5f       	subi	r18, 0xFE	; 254
     57a:	3f 4f       	sbci	r19, 0xFF	; 255
     57c:	17 c0       	rjmp	.+46     	; 0x5ac <__stack+0x14d>
     57e:	ca 01       	movw	r24, r20
     580:	81 70       	andi	r24, 0x01	; 1
     582:	90 70       	andi	r25, 0x00	; 0
     584:	89 2b       	or	r24, r25
     586:	61 f0       	breq	.+24     	; 0x5a0 <__stack+0x141>
     588:	16 95       	lsr	r17
     58a:	07 95       	ror	r16
     58c:	f7 94       	ror	r15
     58e:	e7 94       	ror	r14
     590:	80 e0       	ldi	r24, 0x00	; 0
     592:	90 e0       	ldi	r25, 0x00	; 0
     594:	a0 e0       	ldi	r26, 0x00	; 0
     596:	b0 e8       	ldi	r27, 0x80	; 128
     598:	e8 2a       	or	r14, r24
     59a:	f9 2a       	or	r15, r25
     59c:	0a 2b       	or	r16, r26
     59e:	1b 2b       	or	r17, r27
     5a0:	76 95       	lsr	r23
     5a2:	67 95       	ror	r22
     5a4:	57 95       	ror	r21
     5a6:	47 95       	ror	r20
     5a8:	2f 5f       	subi	r18, 0xFF	; 255
     5aa:	3f 4f       	sbci	r19, 0xFF	; 255
     5ac:	77 fd       	sbrc	r23, 7
     5ae:	e7 cf       	rjmp	.-50     	; 0x57e <__stack+0x11f>
     5b0:	0c c0       	rjmp	.+24     	; 0x5ca <__stack+0x16b>
     5b2:	44 0f       	add	r20, r20
     5b4:	55 1f       	adc	r21, r21
     5b6:	66 1f       	adc	r22, r22
     5b8:	77 1f       	adc	r23, r23
     5ba:	17 fd       	sbrc	r17, 7
     5bc:	41 60       	ori	r20, 0x01	; 1
     5be:	ee 0c       	add	r14, r14
     5c0:	ff 1c       	adc	r15, r15
     5c2:	00 1f       	adc	r16, r16
     5c4:	11 1f       	adc	r17, r17
     5c6:	21 50       	subi	r18, 0x01	; 1
     5c8:	30 40       	sbci	r19, 0x00	; 0
     5ca:	40 30       	cpi	r20, 0x00	; 0
     5cc:	90 e0       	ldi	r25, 0x00	; 0
     5ce:	59 07       	cpc	r21, r25
     5d0:	90 e0       	ldi	r25, 0x00	; 0
     5d2:	69 07       	cpc	r22, r25
     5d4:	90 e4       	ldi	r25, 0x40	; 64
     5d6:	79 07       	cpc	r23, r25
     5d8:	60 f3       	brcs	.-40     	; 0x5b2 <__stack+0x153>
     5da:	2b 8f       	std	Y+27, r18	; 0x1b
     5dc:	3c 8f       	std	Y+28, r19	; 0x1c
     5de:	db 01       	movw	r26, r22
     5e0:	ca 01       	movw	r24, r20
     5e2:	8f 77       	andi	r24, 0x7F	; 127
     5e4:	90 70       	andi	r25, 0x00	; 0
     5e6:	a0 70       	andi	r26, 0x00	; 0
     5e8:	b0 70       	andi	r27, 0x00	; 0
     5ea:	80 34       	cpi	r24, 0x40	; 64
     5ec:	91 05       	cpc	r25, r1
     5ee:	a1 05       	cpc	r26, r1
     5f0:	b1 05       	cpc	r27, r1
     5f2:	61 f4       	brne	.+24     	; 0x60c <__stack+0x1ad>
     5f4:	47 fd       	sbrc	r20, 7
     5f6:	0a c0       	rjmp	.+20     	; 0x60c <__stack+0x1ad>
     5f8:	e1 14       	cp	r14, r1
     5fa:	f1 04       	cpc	r15, r1
     5fc:	01 05       	cpc	r16, r1
     5fe:	11 05       	cpc	r17, r1
     600:	29 f0       	breq	.+10     	; 0x60c <__stack+0x1ad>
     602:	40 5c       	subi	r20, 0xC0	; 192
     604:	5f 4f       	sbci	r21, 0xFF	; 255
     606:	6f 4f       	sbci	r22, 0xFF	; 255
     608:	7f 4f       	sbci	r23, 0xFF	; 255
     60a:	40 78       	andi	r20, 0x80	; 128
     60c:	1a 8e       	std	Y+26, r1	; 0x1a
     60e:	fe 17       	cp	r31, r30
     610:	11 f0       	breq	.+4      	; 0x616 <__stack+0x1b7>
     612:	81 e0       	ldi	r24, 0x01	; 1
     614:	8a 8f       	std	Y+26, r24	; 0x1a
     616:	4d 8f       	std	Y+29, r20	; 0x1d
     618:	5e 8f       	std	Y+30, r21	; 0x1e
     61a:	6f 8f       	std	Y+31, r22	; 0x1f
     61c:	78 a3       	std	Y+32, r23	; 0x20
     61e:	83 e0       	ldi	r24, 0x03	; 3
     620:	89 8f       	std	Y+25, r24	; 0x19
     622:	ce 01       	movw	r24, r28
     624:	49 96       	adiw	r24, 0x19	; 25
     626:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__pack_f>
     62a:	a0 96       	adiw	r28, 0x20	; 32
     62c:	e2 e1       	ldi	r30, 0x12	; 18
     62e:	0c 94 9d 16 	jmp	0x2d3a	; 0x2d3a <__epilogue_restores__>

00000632 <__gtsf2>:
     632:	a8 e1       	ldi	r26, 0x18	; 24
     634:	b0 e0       	ldi	r27, 0x00	; 0
     636:	ef e1       	ldi	r30, 0x1F	; 31
     638:	f3 e0       	ldi	r31, 0x03	; 3
     63a:	0c 94 8d 16 	jmp	0x2d1a	; 0x2d1a <__prologue_saves__+0x18>
     63e:	69 83       	std	Y+1, r22	; 0x01
     640:	7a 83       	std	Y+2, r23	; 0x02
     642:	8b 83       	std	Y+3, r24	; 0x03
     644:	9c 83       	std	Y+4, r25	; 0x04
     646:	2d 83       	std	Y+5, r18	; 0x05
     648:	3e 83       	std	Y+6, r19	; 0x06
     64a:	4f 83       	std	Y+7, r20	; 0x07
     64c:	58 87       	std	Y+8, r21	; 0x08
     64e:	89 e0       	ldi	r24, 0x09	; 9
     650:	e8 2e       	mov	r14, r24
     652:	f1 2c       	mov	r15, r1
     654:	ec 0e       	add	r14, r28
     656:	fd 1e       	adc	r15, r29
     658:	ce 01       	movw	r24, r28
     65a:	01 96       	adiw	r24, 0x01	; 1
     65c:	b7 01       	movw	r22, r14
     65e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     662:	8e 01       	movw	r16, r28
     664:	0f 5e       	subi	r16, 0xEF	; 239
     666:	1f 4f       	sbci	r17, 0xFF	; 255
     668:	ce 01       	movw	r24, r28
     66a:	05 96       	adiw	r24, 0x05	; 5
     66c:	b8 01       	movw	r22, r16
     66e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     672:	89 85       	ldd	r24, Y+9	; 0x09
     674:	82 30       	cpi	r24, 0x02	; 2
     676:	40 f0       	brcs	.+16     	; 0x688 <__gtsf2+0x56>
     678:	89 89       	ldd	r24, Y+17	; 0x11
     67a:	82 30       	cpi	r24, 0x02	; 2
     67c:	28 f0       	brcs	.+10     	; 0x688 <__gtsf2+0x56>
     67e:	c7 01       	movw	r24, r14
     680:	b8 01       	movw	r22, r16
     682:	0e 94 4a 05 	call	0xa94	; 0xa94 <__fpcmp_parts_f>
     686:	01 c0       	rjmp	.+2      	; 0x68a <__gtsf2+0x58>
     688:	8f ef       	ldi	r24, 0xFF	; 255
     68a:	68 96       	adiw	r28, 0x18	; 24
     68c:	e6 e0       	ldi	r30, 0x06	; 6
     68e:	0c 94 a9 16 	jmp	0x2d52	; 0x2d52 <__epilogue_restores__+0x18>

00000692 <__gesf2>:
     692:	a8 e1       	ldi	r26, 0x18	; 24
     694:	b0 e0       	ldi	r27, 0x00	; 0
     696:	ef e4       	ldi	r30, 0x4F	; 79
     698:	f3 e0       	ldi	r31, 0x03	; 3
     69a:	0c 94 8d 16 	jmp	0x2d1a	; 0x2d1a <__prologue_saves__+0x18>
     69e:	69 83       	std	Y+1, r22	; 0x01
     6a0:	7a 83       	std	Y+2, r23	; 0x02
     6a2:	8b 83       	std	Y+3, r24	; 0x03
     6a4:	9c 83       	std	Y+4, r25	; 0x04
     6a6:	2d 83       	std	Y+5, r18	; 0x05
     6a8:	3e 83       	std	Y+6, r19	; 0x06
     6aa:	4f 83       	std	Y+7, r20	; 0x07
     6ac:	58 87       	std	Y+8, r21	; 0x08
     6ae:	89 e0       	ldi	r24, 0x09	; 9
     6b0:	e8 2e       	mov	r14, r24
     6b2:	f1 2c       	mov	r15, r1
     6b4:	ec 0e       	add	r14, r28
     6b6:	fd 1e       	adc	r15, r29
     6b8:	ce 01       	movw	r24, r28
     6ba:	01 96       	adiw	r24, 0x01	; 1
     6bc:	b7 01       	movw	r22, r14
     6be:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     6c2:	8e 01       	movw	r16, r28
     6c4:	0f 5e       	subi	r16, 0xEF	; 239
     6c6:	1f 4f       	sbci	r17, 0xFF	; 255
     6c8:	ce 01       	movw	r24, r28
     6ca:	05 96       	adiw	r24, 0x05	; 5
     6cc:	b8 01       	movw	r22, r16
     6ce:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     6d2:	89 85       	ldd	r24, Y+9	; 0x09
     6d4:	82 30       	cpi	r24, 0x02	; 2
     6d6:	40 f0       	brcs	.+16     	; 0x6e8 <__gesf2+0x56>
     6d8:	89 89       	ldd	r24, Y+17	; 0x11
     6da:	82 30       	cpi	r24, 0x02	; 2
     6dc:	28 f0       	brcs	.+10     	; 0x6e8 <__gesf2+0x56>
     6de:	c7 01       	movw	r24, r14
     6e0:	b8 01       	movw	r22, r16
     6e2:	0e 94 4a 05 	call	0xa94	; 0xa94 <__fpcmp_parts_f>
     6e6:	01 c0       	rjmp	.+2      	; 0x6ea <__gesf2+0x58>
     6e8:	8f ef       	ldi	r24, 0xFF	; 255
     6ea:	68 96       	adiw	r28, 0x18	; 24
     6ec:	e6 e0       	ldi	r30, 0x06	; 6
     6ee:	0c 94 a9 16 	jmp	0x2d52	; 0x2d52 <__epilogue_restores__+0x18>

000006f2 <__ltsf2>:
     6f2:	a8 e1       	ldi	r26, 0x18	; 24
     6f4:	b0 e0       	ldi	r27, 0x00	; 0
     6f6:	ef e7       	ldi	r30, 0x7F	; 127
     6f8:	f3 e0       	ldi	r31, 0x03	; 3
     6fa:	0c 94 8d 16 	jmp	0x2d1a	; 0x2d1a <__prologue_saves__+0x18>
     6fe:	69 83       	std	Y+1, r22	; 0x01
     700:	7a 83       	std	Y+2, r23	; 0x02
     702:	8b 83       	std	Y+3, r24	; 0x03
     704:	9c 83       	std	Y+4, r25	; 0x04
     706:	2d 83       	std	Y+5, r18	; 0x05
     708:	3e 83       	std	Y+6, r19	; 0x06
     70a:	4f 83       	std	Y+7, r20	; 0x07
     70c:	58 87       	std	Y+8, r21	; 0x08
     70e:	89 e0       	ldi	r24, 0x09	; 9
     710:	e8 2e       	mov	r14, r24
     712:	f1 2c       	mov	r15, r1
     714:	ec 0e       	add	r14, r28
     716:	fd 1e       	adc	r15, r29
     718:	ce 01       	movw	r24, r28
     71a:	01 96       	adiw	r24, 0x01	; 1
     71c:	b7 01       	movw	r22, r14
     71e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     722:	8e 01       	movw	r16, r28
     724:	0f 5e       	subi	r16, 0xEF	; 239
     726:	1f 4f       	sbci	r17, 0xFF	; 255
     728:	ce 01       	movw	r24, r28
     72a:	05 96       	adiw	r24, 0x05	; 5
     72c:	b8 01       	movw	r22, r16
     72e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     732:	89 85       	ldd	r24, Y+9	; 0x09
     734:	82 30       	cpi	r24, 0x02	; 2
     736:	40 f0       	brcs	.+16     	; 0x748 <__ltsf2+0x56>
     738:	89 89       	ldd	r24, Y+17	; 0x11
     73a:	82 30       	cpi	r24, 0x02	; 2
     73c:	28 f0       	brcs	.+10     	; 0x748 <__ltsf2+0x56>
     73e:	c7 01       	movw	r24, r14
     740:	b8 01       	movw	r22, r16
     742:	0e 94 4a 05 	call	0xa94	; 0xa94 <__fpcmp_parts_f>
     746:	01 c0       	rjmp	.+2      	; 0x74a <__ltsf2+0x58>
     748:	81 e0       	ldi	r24, 0x01	; 1
     74a:	68 96       	adiw	r28, 0x18	; 24
     74c:	e6 e0       	ldi	r30, 0x06	; 6
     74e:	0c 94 a9 16 	jmp	0x2d52	; 0x2d52 <__epilogue_restores__+0x18>

00000752 <__fixsfsi>:
     752:	ac e0       	ldi	r26, 0x0C	; 12
     754:	b0 e0       	ldi	r27, 0x00	; 0
     756:	ef ea       	ldi	r30, 0xAF	; 175
     758:	f3 e0       	ldi	r31, 0x03	; 3
     75a:	0c 94 91 16 	jmp	0x2d22	; 0x2d22 <__prologue_saves__+0x20>
     75e:	69 83       	std	Y+1, r22	; 0x01
     760:	7a 83       	std	Y+2, r23	; 0x02
     762:	8b 83       	std	Y+3, r24	; 0x03
     764:	9c 83       	std	Y+4, r25	; 0x04
     766:	ce 01       	movw	r24, r28
     768:	01 96       	adiw	r24, 0x01	; 1
     76a:	be 01       	movw	r22, r28
     76c:	6b 5f       	subi	r22, 0xFB	; 251
     76e:	7f 4f       	sbci	r23, 0xFF	; 255
     770:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     774:	8d 81       	ldd	r24, Y+5	; 0x05
     776:	82 30       	cpi	r24, 0x02	; 2
     778:	61 f1       	breq	.+88     	; 0x7d2 <__fixsfsi+0x80>
     77a:	82 30       	cpi	r24, 0x02	; 2
     77c:	50 f1       	brcs	.+84     	; 0x7d2 <__fixsfsi+0x80>
     77e:	84 30       	cpi	r24, 0x04	; 4
     780:	21 f4       	brne	.+8      	; 0x78a <__fixsfsi+0x38>
     782:	8e 81       	ldd	r24, Y+6	; 0x06
     784:	88 23       	and	r24, r24
     786:	51 f1       	breq	.+84     	; 0x7dc <__fixsfsi+0x8a>
     788:	2e c0       	rjmp	.+92     	; 0x7e6 <__fixsfsi+0x94>
     78a:	2f 81       	ldd	r18, Y+7	; 0x07
     78c:	38 85       	ldd	r19, Y+8	; 0x08
     78e:	37 fd       	sbrc	r19, 7
     790:	20 c0       	rjmp	.+64     	; 0x7d2 <__fixsfsi+0x80>
     792:	6e 81       	ldd	r22, Y+6	; 0x06
     794:	2f 31       	cpi	r18, 0x1F	; 31
     796:	31 05       	cpc	r19, r1
     798:	1c f0       	brlt	.+6      	; 0x7a0 <__fixsfsi+0x4e>
     79a:	66 23       	and	r22, r22
     79c:	f9 f0       	breq	.+62     	; 0x7dc <__fixsfsi+0x8a>
     79e:	23 c0       	rjmp	.+70     	; 0x7e6 <__fixsfsi+0x94>
     7a0:	8e e1       	ldi	r24, 0x1E	; 30
     7a2:	90 e0       	ldi	r25, 0x00	; 0
     7a4:	82 1b       	sub	r24, r18
     7a6:	93 0b       	sbc	r25, r19
     7a8:	29 85       	ldd	r18, Y+9	; 0x09
     7aa:	3a 85       	ldd	r19, Y+10	; 0x0a
     7ac:	4b 85       	ldd	r20, Y+11	; 0x0b
     7ae:	5c 85       	ldd	r21, Y+12	; 0x0c
     7b0:	04 c0       	rjmp	.+8      	; 0x7ba <__fixsfsi+0x68>
     7b2:	56 95       	lsr	r21
     7b4:	47 95       	ror	r20
     7b6:	37 95       	ror	r19
     7b8:	27 95       	ror	r18
     7ba:	8a 95       	dec	r24
     7bc:	d2 f7       	brpl	.-12     	; 0x7b2 <__fixsfsi+0x60>
     7be:	66 23       	and	r22, r22
     7c0:	b1 f0       	breq	.+44     	; 0x7ee <__fixsfsi+0x9c>
     7c2:	50 95       	com	r21
     7c4:	40 95       	com	r20
     7c6:	30 95       	com	r19
     7c8:	21 95       	neg	r18
     7ca:	3f 4f       	sbci	r19, 0xFF	; 255
     7cc:	4f 4f       	sbci	r20, 0xFF	; 255
     7ce:	5f 4f       	sbci	r21, 0xFF	; 255
     7d0:	0e c0       	rjmp	.+28     	; 0x7ee <__fixsfsi+0x9c>
     7d2:	20 e0       	ldi	r18, 0x00	; 0
     7d4:	30 e0       	ldi	r19, 0x00	; 0
     7d6:	40 e0       	ldi	r20, 0x00	; 0
     7d8:	50 e0       	ldi	r21, 0x00	; 0
     7da:	09 c0       	rjmp	.+18     	; 0x7ee <__fixsfsi+0x9c>
     7dc:	2f ef       	ldi	r18, 0xFF	; 255
     7de:	3f ef       	ldi	r19, 0xFF	; 255
     7e0:	4f ef       	ldi	r20, 0xFF	; 255
     7e2:	5f e7       	ldi	r21, 0x7F	; 127
     7e4:	04 c0       	rjmp	.+8      	; 0x7ee <__fixsfsi+0x9c>
     7e6:	20 e0       	ldi	r18, 0x00	; 0
     7e8:	30 e0       	ldi	r19, 0x00	; 0
     7ea:	40 e0       	ldi	r20, 0x00	; 0
     7ec:	50 e8       	ldi	r21, 0x80	; 128
     7ee:	b9 01       	movw	r22, r18
     7f0:	ca 01       	movw	r24, r20
     7f2:	2c 96       	adiw	r28, 0x0c	; 12
     7f4:	e2 e0       	ldi	r30, 0x02	; 2
     7f6:	0c 94 ad 16 	jmp	0x2d5a	; 0x2d5a <__epilogue_restores__+0x20>

000007fa <__pack_f>:
     7fa:	df 92       	push	r13
     7fc:	ef 92       	push	r14
     7fe:	ff 92       	push	r15
     800:	0f 93       	push	r16
     802:	1f 93       	push	r17
     804:	fc 01       	movw	r30, r24
     806:	e4 80       	ldd	r14, Z+4	; 0x04
     808:	f5 80       	ldd	r15, Z+5	; 0x05
     80a:	06 81       	ldd	r16, Z+6	; 0x06
     80c:	17 81       	ldd	r17, Z+7	; 0x07
     80e:	d1 80       	ldd	r13, Z+1	; 0x01
     810:	80 81       	ld	r24, Z
     812:	82 30       	cpi	r24, 0x02	; 2
     814:	48 f4       	brcc	.+18     	; 0x828 <__pack_f+0x2e>
     816:	80 e0       	ldi	r24, 0x00	; 0
     818:	90 e0       	ldi	r25, 0x00	; 0
     81a:	a0 e1       	ldi	r26, 0x10	; 16
     81c:	b0 e0       	ldi	r27, 0x00	; 0
     81e:	e8 2a       	or	r14, r24
     820:	f9 2a       	or	r15, r25
     822:	0a 2b       	or	r16, r26
     824:	1b 2b       	or	r17, r27
     826:	a5 c0       	rjmp	.+330    	; 0x972 <__pack_f+0x178>
     828:	84 30       	cpi	r24, 0x04	; 4
     82a:	09 f4       	brne	.+2      	; 0x82e <__pack_f+0x34>
     82c:	9f c0       	rjmp	.+318    	; 0x96c <__pack_f+0x172>
     82e:	82 30       	cpi	r24, 0x02	; 2
     830:	21 f4       	brne	.+8      	; 0x83a <__pack_f+0x40>
     832:	ee 24       	eor	r14, r14
     834:	ff 24       	eor	r15, r15
     836:	87 01       	movw	r16, r14
     838:	05 c0       	rjmp	.+10     	; 0x844 <__pack_f+0x4a>
     83a:	e1 14       	cp	r14, r1
     83c:	f1 04       	cpc	r15, r1
     83e:	01 05       	cpc	r16, r1
     840:	11 05       	cpc	r17, r1
     842:	19 f4       	brne	.+6      	; 0x84a <__pack_f+0x50>
     844:	e0 e0       	ldi	r30, 0x00	; 0
     846:	f0 e0       	ldi	r31, 0x00	; 0
     848:	96 c0       	rjmp	.+300    	; 0x976 <__pack_f+0x17c>
     84a:	62 81       	ldd	r22, Z+2	; 0x02
     84c:	73 81       	ldd	r23, Z+3	; 0x03
     84e:	9f ef       	ldi	r25, 0xFF	; 255
     850:	62 38       	cpi	r22, 0x82	; 130
     852:	79 07       	cpc	r23, r25
     854:	0c f0       	brlt	.+2      	; 0x858 <__pack_f+0x5e>
     856:	5b c0       	rjmp	.+182    	; 0x90e <__pack_f+0x114>
     858:	22 e8       	ldi	r18, 0x82	; 130
     85a:	3f ef       	ldi	r19, 0xFF	; 255
     85c:	26 1b       	sub	r18, r22
     85e:	37 0b       	sbc	r19, r23
     860:	2a 31       	cpi	r18, 0x1A	; 26
     862:	31 05       	cpc	r19, r1
     864:	2c f0       	brlt	.+10     	; 0x870 <__pack_f+0x76>
     866:	20 e0       	ldi	r18, 0x00	; 0
     868:	30 e0       	ldi	r19, 0x00	; 0
     86a:	40 e0       	ldi	r20, 0x00	; 0
     86c:	50 e0       	ldi	r21, 0x00	; 0
     86e:	2a c0       	rjmp	.+84     	; 0x8c4 <__pack_f+0xca>
     870:	b8 01       	movw	r22, r16
     872:	a7 01       	movw	r20, r14
     874:	02 2e       	mov	r0, r18
     876:	04 c0       	rjmp	.+8      	; 0x880 <__pack_f+0x86>
     878:	76 95       	lsr	r23
     87a:	67 95       	ror	r22
     87c:	57 95       	ror	r21
     87e:	47 95       	ror	r20
     880:	0a 94       	dec	r0
     882:	d2 f7       	brpl	.-12     	; 0x878 <__pack_f+0x7e>
     884:	81 e0       	ldi	r24, 0x01	; 1
     886:	90 e0       	ldi	r25, 0x00	; 0
     888:	a0 e0       	ldi	r26, 0x00	; 0
     88a:	b0 e0       	ldi	r27, 0x00	; 0
     88c:	04 c0       	rjmp	.+8      	; 0x896 <__pack_f+0x9c>
     88e:	88 0f       	add	r24, r24
     890:	99 1f       	adc	r25, r25
     892:	aa 1f       	adc	r26, r26
     894:	bb 1f       	adc	r27, r27
     896:	2a 95       	dec	r18
     898:	d2 f7       	brpl	.-12     	; 0x88e <__pack_f+0x94>
     89a:	01 97       	sbiw	r24, 0x01	; 1
     89c:	a1 09       	sbc	r26, r1
     89e:	b1 09       	sbc	r27, r1
     8a0:	8e 21       	and	r24, r14
     8a2:	9f 21       	and	r25, r15
     8a4:	a0 23       	and	r26, r16
     8a6:	b1 23       	and	r27, r17
     8a8:	00 97       	sbiw	r24, 0x00	; 0
     8aa:	a1 05       	cpc	r26, r1
     8ac:	b1 05       	cpc	r27, r1
     8ae:	21 f0       	breq	.+8      	; 0x8b8 <__pack_f+0xbe>
     8b0:	81 e0       	ldi	r24, 0x01	; 1
     8b2:	90 e0       	ldi	r25, 0x00	; 0
     8b4:	a0 e0       	ldi	r26, 0x00	; 0
     8b6:	b0 e0       	ldi	r27, 0x00	; 0
     8b8:	9a 01       	movw	r18, r20
     8ba:	ab 01       	movw	r20, r22
     8bc:	28 2b       	or	r18, r24
     8be:	39 2b       	or	r19, r25
     8c0:	4a 2b       	or	r20, r26
     8c2:	5b 2b       	or	r21, r27
     8c4:	da 01       	movw	r26, r20
     8c6:	c9 01       	movw	r24, r18
     8c8:	8f 77       	andi	r24, 0x7F	; 127
     8ca:	90 70       	andi	r25, 0x00	; 0
     8cc:	a0 70       	andi	r26, 0x00	; 0
     8ce:	b0 70       	andi	r27, 0x00	; 0
     8d0:	80 34       	cpi	r24, 0x40	; 64
     8d2:	91 05       	cpc	r25, r1
     8d4:	a1 05       	cpc	r26, r1
     8d6:	b1 05       	cpc	r27, r1
     8d8:	39 f4       	brne	.+14     	; 0x8e8 <__pack_f+0xee>
     8da:	27 ff       	sbrs	r18, 7
     8dc:	09 c0       	rjmp	.+18     	; 0x8f0 <__pack_f+0xf6>
     8de:	20 5c       	subi	r18, 0xC0	; 192
     8e0:	3f 4f       	sbci	r19, 0xFF	; 255
     8e2:	4f 4f       	sbci	r20, 0xFF	; 255
     8e4:	5f 4f       	sbci	r21, 0xFF	; 255
     8e6:	04 c0       	rjmp	.+8      	; 0x8f0 <__pack_f+0xf6>
     8e8:	21 5c       	subi	r18, 0xC1	; 193
     8ea:	3f 4f       	sbci	r19, 0xFF	; 255
     8ec:	4f 4f       	sbci	r20, 0xFF	; 255
     8ee:	5f 4f       	sbci	r21, 0xFF	; 255
     8f0:	e0 e0       	ldi	r30, 0x00	; 0
     8f2:	f0 e0       	ldi	r31, 0x00	; 0
     8f4:	20 30       	cpi	r18, 0x00	; 0
     8f6:	a0 e0       	ldi	r26, 0x00	; 0
     8f8:	3a 07       	cpc	r19, r26
     8fa:	a0 e0       	ldi	r26, 0x00	; 0
     8fc:	4a 07       	cpc	r20, r26
     8fe:	a0 e4       	ldi	r26, 0x40	; 64
     900:	5a 07       	cpc	r21, r26
     902:	10 f0       	brcs	.+4      	; 0x908 <__pack_f+0x10e>
     904:	e1 e0       	ldi	r30, 0x01	; 1
     906:	f0 e0       	ldi	r31, 0x00	; 0
     908:	79 01       	movw	r14, r18
     90a:	8a 01       	movw	r16, r20
     90c:	27 c0       	rjmp	.+78     	; 0x95c <__pack_f+0x162>
     90e:	60 38       	cpi	r22, 0x80	; 128
     910:	71 05       	cpc	r23, r1
     912:	64 f5       	brge	.+88     	; 0x96c <__pack_f+0x172>
     914:	fb 01       	movw	r30, r22
     916:	e1 58       	subi	r30, 0x81	; 129
     918:	ff 4f       	sbci	r31, 0xFF	; 255
     91a:	d8 01       	movw	r26, r16
     91c:	c7 01       	movw	r24, r14
     91e:	8f 77       	andi	r24, 0x7F	; 127
     920:	90 70       	andi	r25, 0x00	; 0
     922:	a0 70       	andi	r26, 0x00	; 0
     924:	b0 70       	andi	r27, 0x00	; 0
     926:	80 34       	cpi	r24, 0x40	; 64
     928:	91 05       	cpc	r25, r1
     92a:	a1 05       	cpc	r26, r1
     92c:	b1 05       	cpc	r27, r1
     92e:	39 f4       	brne	.+14     	; 0x93e <__pack_f+0x144>
     930:	e7 fe       	sbrs	r14, 7
     932:	0d c0       	rjmp	.+26     	; 0x94e <__pack_f+0x154>
     934:	80 e4       	ldi	r24, 0x40	; 64
     936:	90 e0       	ldi	r25, 0x00	; 0
     938:	a0 e0       	ldi	r26, 0x00	; 0
     93a:	b0 e0       	ldi	r27, 0x00	; 0
     93c:	04 c0       	rjmp	.+8      	; 0x946 <__pack_f+0x14c>
     93e:	8f e3       	ldi	r24, 0x3F	; 63
     940:	90 e0       	ldi	r25, 0x00	; 0
     942:	a0 e0       	ldi	r26, 0x00	; 0
     944:	b0 e0       	ldi	r27, 0x00	; 0
     946:	e8 0e       	add	r14, r24
     948:	f9 1e       	adc	r15, r25
     94a:	0a 1f       	adc	r16, r26
     94c:	1b 1f       	adc	r17, r27
     94e:	17 ff       	sbrs	r17, 7
     950:	05 c0       	rjmp	.+10     	; 0x95c <__pack_f+0x162>
     952:	16 95       	lsr	r17
     954:	07 95       	ror	r16
     956:	f7 94       	ror	r15
     958:	e7 94       	ror	r14
     95a:	31 96       	adiw	r30, 0x01	; 1
     95c:	87 e0       	ldi	r24, 0x07	; 7
     95e:	16 95       	lsr	r17
     960:	07 95       	ror	r16
     962:	f7 94       	ror	r15
     964:	e7 94       	ror	r14
     966:	8a 95       	dec	r24
     968:	d1 f7       	brne	.-12     	; 0x95e <__pack_f+0x164>
     96a:	05 c0       	rjmp	.+10     	; 0x976 <__pack_f+0x17c>
     96c:	ee 24       	eor	r14, r14
     96e:	ff 24       	eor	r15, r15
     970:	87 01       	movw	r16, r14
     972:	ef ef       	ldi	r30, 0xFF	; 255
     974:	f0 e0       	ldi	r31, 0x00	; 0
     976:	6e 2f       	mov	r22, r30
     978:	67 95       	ror	r22
     97a:	66 27       	eor	r22, r22
     97c:	67 95       	ror	r22
     97e:	90 2f       	mov	r25, r16
     980:	9f 77       	andi	r25, 0x7F	; 127
     982:	d7 94       	ror	r13
     984:	dd 24       	eor	r13, r13
     986:	d7 94       	ror	r13
     988:	8e 2f       	mov	r24, r30
     98a:	86 95       	lsr	r24
     98c:	49 2f       	mov	r20, r25
     98e:	46 2b       	or	r20, r22
     990:	58 2f       	mov	r21, r24
     992:	5d 29       	or	r21, r13
     994:	b7 01       	movw	r22, r14
     996:	ca 01       	movw	r24, r20
     998:	1f 91       	pop	r17
     99a:	0f 91       	pop	r16
     99c:	ff 90       	pop	r15
     99e:	ef 90       	pop	r14
     9a0:	df 90       	pop	r13
     9a2:	08 95       	ret

000009a4 <__unpack_f>:
     9a4:	fc 01       	movw	r30, r24
     9a6:	db 01       	movw	r26, r22
     9a8:	40 81       	ld	r20, Z
     9aa:	51 81       	ldd	r21, Z+1	; 0x01
     9ac:	22 81       	ldd	r18, Z+2	; 0x02
     9ae:	62 2f       	mov	r22, r18
     9b0:	6f 77       	andi	r22, 0x7F	; 127
     9b2:	70 e0       	ldi	r23, 0x00	; 0
     9b4:	22 1f       	adc	r18, r18
     9b6:	22 27       	eor	r18, r18
     9b8:	22 1f       	adc	r18, r18
     9ba:	93 81       	ldd	r25, Z+3	; 0x03
     9bc:	89 2f       	mov	r24, r25
     9be:	88 0f       	add	r24, r24
     9c0:	82 2b       	or	r24, r18
     9c2:	28 2f       	mov	r18, r24
     9c4:	30 e0       	ldi	r19, 0x00	; 0
     9c6:	99 1f       	adc	r25, r25
     9c8:	99 27       	eor	r25, r25
     9ca:	99 1f       	adc	r25, r25
     9cc:	11 96       	adiw	r26, 0x01	; 1
     9ce:	9c 93       	st	X, r25
     9d0:	11 97       	sbiw	r26, 0x01	; 1
     9d2:	21 15       	cp	r18, r1
     9d4:	31 05       	cpc	r19, r1
     9d6:	a9 f5       	brne	.+106    	; 0xa42 <__unpack_f+0x9e>
     9d8:	41 15       	cp	r20, r1
     9da:	51 05       	cpc	r21, r1
     9dc:	61 05       	cpc	r22, r1
     9de:	71 05       	cpc	r23, r1
     9e0:	11 f4       	brne	.+4      	; 0x9e6 <__unpack_f+0x42>
     9e2:	82 e0       	ldi	r24, 0x02	; 2
     9e4:	37 c0       	rjmp	.+110    	; 0xa54 <__unpack_f+0xb0>
     9e6:	82 e8       	ldi	r24, 0x82	; 130
     9e8:	9f ef       	ldi	r25, 0xFF	; 255
     9ea:	13 96       	adiw	r26, 0x03	; 3
     9ec:	9c 93       	st	X, r25
     9ee:	8e 93       	st	-X, r24
     9f0:	12 97       	sbiw	r26, 0x02	; 2
     9f2:	9a 01       	movw	r18, r20
     9f4:	ab 01       	movw	r20, r22
     9f6:	67 e0       	ldi	r22, 0x07	; 7
     9f8:	22 0f       	add	r18, r18
     9fa:	33 1f       	adc	r19, r19
     9fc:	44 1f       	adc	r20, r20
     9fe:	55 1f       	adc	r21, r21
     a00:	6a 95       	dec	r22
     a02:	d1 f7       	brne	.-12     	; 0x9f8 <__unpack_f+0x54>
     a04:	83 e0       	ldi	r24, 0x03	; 3
     a06:	8c 93       	st	X, r24
     a08:	0d c0       	rjmp	.+26     	; 0xa24 <__unpack_f+0x80>
     a0a:	22 0f       	add	r18, r18
     a0c:	33 1f       	adc	r19, r19
     a0e:	44 1f       	adc	r20, r20
     a10:	55 1f       	adc	r21, r21
     a12:	12 96       	adiw	r26, 0x02	; 2
     a14:	8d 91       	ld	r24, X+
     a16:	9c 91       	ld	r25, X
     a18:	13 97       	sbiw	r26, 0x03	; 3
     a1a:	01 97       	sbiw	r24, 0x01	; 1
     a1c:	13 96       	adiw	r26, 0x03	; 3
     a1e:	9c 93       	st	X, r25
     a20:	8e 93       	st	-X, r24
     a22:	12 97       	sbiw	r26, 0x02	; 2
     a24:	20 30       	cpi	r18, 0x00	; 0
     a26:	80 e0       	ldi	r24, 0x00	; 0
     a28:	38 07       	cpc	r19, r24
     a2a:	80 e0       	ldi	r24, 0x00	; 0
     a2c:	48 07       	cpc	r20, r24
     a2e:	80 e4       	ldi	r24, 0x40	; 64
     a30:	58 07       	cpc	r21, r24
     a32:	58 f3       	brcs	.-42     	; 0xa0a <__unpack_f+0x66>
     a34:	14 96       	adiw	r26, 0x04	; 4
     a36:	2d 93       	st	X+, r18
     a38:	3d 93       	st	X+, r19
     a3a:	4d 93       	st	X+, r20
     a3c:	5c 93       	st	X, r21
     a3e:	17 97       	sbiw	r26, 0x07	; 7
     a40:	08 95       	ret
     a42:	2f 3f       	cpi	r18, 0xFF	; 255
     a44:	31 05       	cpc	r19, r1
     a46:	79 f4       	brne	.+30     	; 0xa66 <__unpack_f+0xc2>
     a48:	41 15       	cp	r20, r1
     a4a:	51 05       	cpc	r21, r1
     a4c:	61 05       	cpc	r22, r1
     a4e:	71 05       	cpc	r23, r1
     a50:	19 f4       	brne	.+6      	; 0xa58 <__unpack_f+0xb4>
     a52:	84 e0       	ldi	r24, 0x04	; 4
     a54:	8c 93       	st	X, r24
     a56:	08 95       	ret
     a58:	64 ff       	sbrs	r22, 4
     a5a:	03 c0       	rjmp	.+6      	; 0xa62 <__unpack_f+0xbe>
     a5c:	81 e0       	ldi	r24, 0x01	; 1
     a5e:	8c 93       	st	X, r24
     a60:	12 c0       	rjmp	.+36     	; 0xa86 <__unpack_f+0xe2>
     a62:	1c 92       	st	X, r1
     a64:	10 c0       	rjmp	.+32     	; 0xa86 <__unpack_f+0xe2>
     a66:	2f 57       	subi	r18, 0x7F	; 127
     a68:	30 40       	sbci	r19, 0x00	; 0
     a6a:	13 96       	adiw	r26, 0x03	; 3
     a6c:	3c 93       	st	X, r19
     a6e:	2e 93       	st	-X, r18
     a70:	12 97       	sbiw	r26, 0x02	; 2
     a72:	83 e0       	ldi	r24, 0x03	; 3
     a74:	8c 93       	st	X, r24
     a76:	87 e0       	ldi	r24, 0x07	; 7
     a78:	44 0f       	add	r20, r20
     a7a:	55 1f       	adc	r21, r21
     a7c:	66 1f       	adc	r22, r22
     a7e:	77 1f       	adc	r23, r23
     a80:	8a 95       	dec	r24
     a82:	d1 f7       	brne	.-12     	; 0xa78 <__unpack_f+0xd4>
     a84:	70 64       	ori	r23, 0x40	; 64
     a86:	14 96       	adiw	r26, 0x04	; 4
     a88:	4d 93       	st	X+, r20
     a8a:	5d 93       	st	X+, r21
     a8c:	6d 93       	st	X+, r22
     a8e:	7c 93       	st	X, r23
     a90:	17 97       	sbiw	r26, 0x07	; 7
     a92:	08 95       	ret

00000a94 <__fpcmp_parts_f>:
     a94:	1f 93       	push	r17
     a96:	dc 01       	movw	r26, r24
     a98:	fb 01       	movw	r30, r22
     a9a:	9c 91       	ld	r25, X
     a9c:	92 30       	cpi	r25, 0x02	; 2
     a9e:	08 f4       	brcc	.+2      	; 0xaa2 <__fpcmp_parts_f+0xe>
     aa0:	47 c0       	rjmp	.+142    	; 0xb30 <__fpcmp_parts_f+0x9c>
     aa2:	80 81       	ld	r24, Z
     aa4:	82 30       	cpi	r24, 0x02	; 2
     aa6:	08 f4       	brcc	.+2      	; 0xaaa <__fpcmp_parts_f+0x16>
     aa8:	43 c0       	rjmp	.+134    	; 0xb30 <__fpcmp_parts_f+0x9c>
     aaa:	94 30       	cpi	r25, 0x04	; 4
     aac:	51 f4       	brne	.+20     	; 0xac2 <__fpcmp_parts_f+0x2e>
     aae:	11 96       	adiw	r26, 0x01	; 1
     ab0:	1c 91       	ld	r17, X
     ab2:	84 30       	cpi	r24, 0x04	; 4
     ab4:	99 f5       	brne	.+102    	; 0xb1c <__fpcmp_parts_f+0x88>
     ab6:	81 81       	ldd	r24, Z+1	; 0x01
     ab8:	68 2f       	mov	r22, r24
     aba:	70 e0       	ldi	r23, 0x00	; 0
     abc:	61 1b       	sub	r22, r17
     abe:	71 09       	sbc	r23, r1
     ac0:	3f c0       	rjmp	.+126    	; 0xb40 <__fpcmp_parts_f+0xac>
     ac2:	84 30       	cpi	r24, 0x04	; 4
     ac4:	21 f0       	breq	.+8      	; 0xace <__fpcmp_parts_f+0x3a>
     ac6:	92 30       	cpi	r25, 0x02	; 2
     ac8:	31 f4       	brne	.+12     	; 0xad6 <__fpcmp_parts_f+0x42>
     aca:	82 30       	cpi	r24, 0x02	; 2
     acc:	b9 f1       	breq	.+110    	; 0xb3c <__fpcmp_parts_f+0xa8>
     ace:	81 81       	ldd	r24, Z+1	; 0x01
     ad0:	88 23       	and	r24, r24
     ad2:	89 f1       	breq	.+98     	; 0xb36 <__fpcmp_parts_f+0xa2>
     ad4:	2d c0       	rjmp	.+90     	; 0xb30 <__fpcmp_parts_f+0x9c>
     ad6:	11 96       	adiw	r26, 0x01	; 1
     ad8:	1c 91       	ld	r17, X
     ada:	11 97       	sbiw	r26, 0x01	; 1
     adc:	82 30       	cpi	r24, 0x02	; 2
     ade:	f1 f0       	breq	.+60     	; 0xb1c <__fpcmp_parts_f+0x88>
     ae0:	81 81       	ldd	r24, Z+1	; 0x01
     ae2:	18 17       	cp	r17, r24
     ae4:	d9 f4       	brne	.+54     	; 0xb1c <__fpcmp_parts_f+0x88>
     ae6:	12 96       	adiw	r26, 0x02	; 2
     ae8:	2d 91       	ld	r18, X+
     aea:	3c 91       	ld	r19, X
     aec:	13 97       	sbiw	r26, 0x03	; 3
     aee:	82 81       	ldd	r24, Z+2	; 0x02
     af0:	93 81       	ldd	r25, Z+3	; 0x03
     af2:	82 17       	cp	r24, r18
     af4:	93 07       	cpc	r25, r19
     af6:	94 f0       	brlt	.+36     	; 0xb1c <__fpcmp_parts_f+0x88>
     af8:	28 17       	cp	r18, r24
     afa:	39 07       	cpc	r19, r25
     afc:	bc f0       	brlt	.+46     	; 0xb2c <__fpcmp_parts_f+0x98>
     afe:	14 96       	adiw	r26, 0x04	; 4
     b00:	8d 91       	ld	r24, X+
     b02:	9d 91       	ld	r25, X+
     b04:	0d 90       	ld	r0, X+
     b06:	bc 91       	ld	r27, X
     b08:	a0 2d       	mov	r26, r0
     b0a:	24 81       	ldd	r18, Z+4	; 0x04
     b0c:	35 81       	ldd	r19, Z+5	; 0x05
     b0e:	46 81       	ldd	r20, Z+6	; 0x06
     b10:	57 81       	ldd	r21, Z+7	; 0x07
     b12:	28 17       	cp	r18, r24
     b14:	39 07       	cpc	r19, r25
     b16:	4a 07       	cpc	r20, r26
     b18:	5b 07       	cpc	r21, r27
     b1a:	18 f4       	brcc	.+6      	; 0xb22 <__fpcmp_parts_f+0x8e>
     b1c:	11 23       	and	r17, r17
     b1e:	41 f0       	breq	.+16     	; 0xb30 <__fpcmp_parts_f+0x9c>
     b20:	0a c0       	rjmp	.+20     	; 0xb36 <__fpcmp_parts_f+0xa2>
     b22:	82 17       	cp	r24, r18
     b24:	93 07       	cpc	r25, r19
     b26:	a4 07       	cpc	r26, r20
     b28:	b5 07       	cpc	r27, r21
     b2a:	40 f4       	brcc	.+16     	; 0xb3c <__fpcmp_parts_f+0xa8>
     b2c:	11 23       	and	r17, r17
     b2e:	19 f0       	breq	.+6      	; 0xb36 <__fpcmp_parts_f+0xa2>
     b30:	61 e0       	ldi	r22, 0x01	; 1
     b32:	70 e0       	ldi	r23, 0x00	; 0
     b34:	05 c0       	rjmp	.+10     	; 0xb40 <__fpcmp_parts_f+0xac>
     b36:	6f ef       	ldi	r22, 0xFF	; 255
     b38:	7f ef       	ldi	r23, 0xFF	; 255
     b3a:	02 c0       	rjmp	.+4      	; 0xb40 <__fpcmp_parts_f+0xac>
     b3c:	60 e0       	ldi	r22, 0x00	; 0
     b3e:	70 e0       	ldi	r23, 0x00	; 0
     b40:	cb 01       	movw	r24, r22
     b42:	1f 91       	pop	r17
     b44:	08 95       	ret

00000b46 <BZR_init>:

#include "Buzzer.h"
#include "gpio.h"

void BZR_init(void)
{
     b46:	df 93       	push	r29
     b48:	cf 93       	push	r28
     b4a:	cd b7       	in	r28, 0x3d	; 61
     b4c:	de b7       	in	r29, 0x3e	; 62
	GPIO_setupPinDirection(BUZZER_PORT, BUZZER_PIN, PIN_OUTPUT);
     b4e:	82 e0       	ldi	r24, 0x02	; 2
     b50:	62 e0       	ldi	r22, 0x02	; 2
     b52:	41 e0       	ldi	r20, 0x01	; 1
     b54:	0e 94 c5 06 	call	0xd8a	; 0xd8a <GPIO_setupPinDirection>
	BZR_OFF();
     b58:	0e 94 bd 05 	call	0xb7a	; 0xb7a <BZR_OFF>
}
     b5c:	cf 91       	pop	r28
     b5e:	df 91       	pop	r29
     b60:	08 95       	ret

00000b62 <BZR_ON>:

void BZR_ON(void)
{
     b62:	df 93       	push	r29
     b64:	cf 93       	push	r28
     b66:	cd b7       	in	r28, 0x3d	; 61
     b68:	de b7       	in	r29, 0x3e	; 62
	GPIO_writePin(BUZZER_PORT, BUZZER_PIN, LOGIC_HIGH);
     b6a:	82 e0       	ldi	r24, 0x02	; 2
     b6c:	62 e0       	ldi	r22, 0x02	; 2
     b6e:	41 e0       	ldi	r20, 0x01	; 1
     b70:	0e 94 b0 07 	call	0xf60	; 0xf60 <GPIO_writePin>
}
     b74:	cf 91       	pop	r28
     b76:	df 91       	pop	r29
     b78:	08 95       	ret

00000b7a <BZR_OFF>:

void BZR_OFF(void)
{
     b7a:	df 93       	push	r29
     b7c:	cf 93       	push	r28
     b7e:	cd b7       	in	r28, 0x3d	; 61
     b80:	de b7       	in	r29, 0x3e	; 62
	GPIO_writePin(BUZZER_PORT, BUZZER_PIN, LOGIC_LOW);
     b82:	82 e0       	ldi	r24, 0x02	; 2
     b84:	62 e0       	ldi	r22, 0x02	; 2
     b86:	40 e0       	ldi	r20, 0x00	; 0
     b88:	0e 94 b0 07 	call	0xf60	; 0xf60 <GPIO_writePin>
}
     b8c:	cf 91       	pop	r28
     b8e:	df 91       	pop	r29
     b90:	08 95       	ret

00000b92 <DcMotor_Init>:
/*******************************************************************************
 *                         Function Definitions                                *
 *******************************************************************************/

void DcMotor_Init(void)
{
     b92:	df 93       	push	r29
     b94:	cf 93       	push	r28
     b96:	cd b7       	in	r28, 0x3d	; 61
     b98:	de b7       	in	r29, 0x3e	; 62
	GPIO_setupPinDirection(DC_MOTOR_PORT_ID ,DC_MOTOR_PIN_IN1,PIN_OUTPUT);
     b9a:	82 e0       	ldi	r24, 0x02	; 2
     b9c:	63 e0       	ldi	r22, 0x03	; 3
     b9e:	41 e0       	ldi	r20, 0x01	; 1
     ba0:	0e 94 c5 06 	call	0xd8a	; 0xd8a <GPIO_setupPinDirection>
	GPIO_setupPinDirection(DC_MOTOR_PORT_ID ,DC_MOTOR_PIN_IN2 ,PIN_OUTPUT);
     ba4:	82 e0       	ldi	r24, 0x02	; 2
     ba6:	64 e0       	ldi	r22, 0x04	; 4
     ba8:	41 e0       	ldi	r20, 0x01	; 1
     baa:	0e 94 c5 06 	call	0xd8a	; 0xd8a <GPIO_setupPinDirection>
	GPIO_writePin(DC_MOTOR_PORT_ID ,DC_MOTOR_PIN_IN1,LOGIC_LOW);
     bae:	82 e0       	ldi	r24, 0x02	; 2
     bb0:	63 e0       	ldi	r22, 0x03	; 3
     bb2:	40 e0       	ldi	r20, 0x00	; 0
     bb4:	0e 94 b0 07 	call	0xf60	; 0xf60 <GPIO_writePin>
	GPIO_writePin(DC_MOTOR_PORT_ID ,DC_MOTOR_PIN_IN2 ,LOGIC_LOW);
     bb8:	82 e0       	ldi	r24, 0x02	; 2
     bba:	64 e0       	ldi	r22, 0x04	; 4
     bbc:	40 e0       	ldi	r20, 0x00	; 0
     bbe:	0e 94 b0 07 	call	0xf60	; 0xf60 <GPIO_writePin>
}
     bc2:	cf 91       	pop	r28
     bc4:	df 91       	pop	r29
     bc6:	08 95       	ret

00000bc8 <DcMotor_Rotate>:
void DcMotor_Rotate(DcMotor_State state)
{
     bc8:	df 93       	push	r29
     bca:	cf 93       	push	r28
     bcc:	00 d0       	rcall	.+0      	; 0xbce <DcMotor_Rotate+0x6>
     bce:	0f 92       	push	r0
     bd0:	cd b7       	in	r28, 0x3d	; 61
     bd2:	de b7       	in	r29, 0x3e	; 62
     bd4:	89 83       	std	Y+1, r24	; 0x01
	switch(state)
     bd6:	89 81       	ldd	r24, Y+1	; 0x01
     bd8:	28 2f       	mov	r18, r24
     bda:	30 e0       	ldi	r19, 0x00	; 0
     bdc:	3b 83       	std	Y+3, r19	; 0x03
     bde:	2a 83       	std	Y+2, r18	; 0x02
     be0:	8a 81       	ldd	r24, Y+2	; 0x02
     be2:	9b 81       	ldd	r25, Y+3	; 0x03
     be4:	81 30       	cpi	r24, 0x01	; 1
     be6:	91 05       	cpc	r25, r1
     be8:	a1 f0       	breq	.+40     	; 0xc12 <DcMotor_Rotate+0x4a>
     bea:	2a 81       	ldd	r18, Y+2	; 0x02
     bec:	3b 81       	ldd	r19, Y+3	; 0x03
     bee:	22 30       	cpi	r18, 0x02	; 2
     bf0:	31 05       	cpc	r19, r1
     bf2:	d1 f0       	breq	.+52     	; 0xc28 <DcMotor_Rotate+0x60>
     bf4:	8a 81       	ldd	r24, Y+2	; 0x02
     bf6:	9b 81       	ldd	r25, Y+3	; 0x03
     bf8:	00 97       	sbiw	r24, 0x00	; 0
     bfa:	01 f5       	brne	.+64     	; 0xc3c <DcMotor_Rotate+0x74>
	{
	case Stop:
		// Stop the motor
		GPIO_writePin(DC_MOTOR_PORT_ID,DC_MOTOR_PIN_IN1,LOGIC_LOW);
     bfc:	82 e0       	ldi	r24, 0x02	; 2
     bfe:	63 e0       	ldi	r22, 0x03	; 3
     c00:	40 e0       	ldi	r20, 0x00	; 0
     c02:	0e 94 b0 07 	call	0xf60	; 0xf60 <GPIO_writePin>
		GPIO_writePin(DC_MOTOR_PORT_ID,DC_MOTOR_PIN_IN2,LOGIC_LOW);
     c06:	82 e0       	ldi	r24, 0x02	; 2
     c08:	64 e0       	ldi	r22, 0x04	; 4
     c0a:	40 e0       	ldi	r20, 0x00	; 0
     c0c:	0e 94 b0 07 	call	0xf60	; 0xf60 <GPIO_writePin>
     c10:	15 c0       	rjmp	.+42     	; 0xc3c <DcMotor_Rotate+0x74>
		break;
	case CW:
		// Rotate the motor --> clock wise
		GPIO_writePin(DC_MOTOR_PORT_ID,DC_MOTOR_PIN_IN1,LOGIC_LOW);
     c12:	82 e0       	ldi	r24, 0x02	; 2
     c14:	63 e0       	ldi	r22, 0x03	; 3
     c16:	40 e0       	ldi	r20, 0x00	; 0
     c18:	0e 94 b0 07 	call	0xf60	; 0xf60 <GPIO_writePin>
		GPIO_writePin(DC_MOTOR_PORT_ID,DC_MOTOR_PIN_IN2,LOGIC_HIGH);
     c1c:	82 e0       	ldi	r24, 0x02	; 2
     c1e:	64 e0       	ldi	r22, 0x04	; 4
     c20:	41 e0       	ldi	r20, 0x01	; 1
     c22:	0e 94 b0 07 	call	0xf60	; 0xf60 <GPIO_writePin>
     c26:	0a c0       	rjmp	.+20     	; 0xc3c <DcMotor_Rotate+0x74>
		break;
	case CCW:
		// Rotate the motor --> anti-clock wise
		GPIO_writePin(DC_MOTOR_PORT_ID,DC_MOTOR_PIN_IN1,LOGIC_HIGH);
     c28:	82 e0       	ldi	r24, 0x02	; 2
     c2a:	63 e0       	ldi	r22, 0x03	; 3
     c2c:	41 e0       	ldi	r20, 0x01	; 1
     c2e:	0e 94 b0 07 	call	0xf60	; 0xf60 <GPIO_writePin>
		GPIO_writePin(DC_MOTOR_PORT_ID,DC_MOTOR_PIN_IN2,LOGIC_LOW);
     c32:	82 e0       	ldi	r24, 0x02	; 2
     c34:	64 e0       	ldi	r22, 0x04	; 4
     c36:	40 e0       	ldi	r20, 0x00	; 0
     c38:	0e 94 b0 07 	call	0xf60	; 0xf60 <GPIO_writePin>



	}

}
     c3c:	0f 90       	pop	r0
     c3e:	0f 90       	pop	r0
     c40:	0f 90       	pop	r0
     c42:	cf 91       	pop	r28
     c44:	df 91       	pop	r29
     c46:	08 95       	ret

00000c48 <EEPROM_writeByte>:
 *******************************************************************************/
#include "external_eeprom.h"
#include "twi.h"

uint8 EEPROM_writeByte(uint16 u16addr, uint8 u8data)
{
     c48:	df 93       	push	r29
     c4a:	cf 93       	push	r28
     c4c:	00 d0       	rcall	.+0      	; 0xc4e <EEPROM_writeByte+0x6>
     c4e:	00 d0       	rcall	.+0      	; 0xc50 <EEPROM_writeByte+0x8>
     c50:	cd b7       	in	r28, 0x3d	; 61
     c52:	de b7       	in	r29, 0x3e	; 62
     c54:	9a 83       	std	Y+2, r25	; 0x02
     c56:	89 83       	std	Y+1, r24	; 0x01
     c58:	6b 83       	std	Y+3, r22	; 0x03
	/* Send the Start Bit */
    TWI_start();
     c5a:	0e 94 cb 14 	call	0x2996	; 0x2996 <TWI_start>
    if (TWI_getStatus() != TWI_START)
     c5e:	0e 94 23 15 	call	0x2a46	; 0x2a46 <TWI_getStatus>
     c62:	88 30       	cpi	r24, 0x08	; 8
     c64:	11 f0       	breq	.+4      	; 0xc6a <EEPROM_writeByte+0x22>
        return ERROR;
     c66:	1c 82       	std	Y+4, r1	; 0x04
     c68:	28 c0       	rjmp	.+80     	; 0xcba <EEPROM_writeByte+0x72>
		
    /* Send the device address, we need to get A8 A9 A10 address bits from the
     * memory location address and R/W=0 (write) */
    TWI_writeByte((uint8)(0xA0 | ((u16addr & 0x0700) >> 7)));
     c6a:	89 81       	ldd	r24, Y+1	; 0x01
     c6c:	9a 81       	ldd	r25, Y+2	; 0x02
     c6e:	80 70       	andi	r24, 0x00	; 0
     c70:	97 70       	andi	r25, 0x07	; 7
     c72:	88 0f       	add	r24, r24
     c74:	89 2f       	mov	r24, r25
     c76:	88 1f       	adc	r24, r24
     c78:	99 0b       	sbc	r25, r25
     c7a:	91 95       	neg	r25
     c7c:	80 6a       	ori	r24, 0xA0	; 160
     c7e:	0e 94 e6 14 	call	0x29cc	; 0x29cc <TWI_writeByte>
    if (TWI_getStatus() != TWI_MT_SLA_W_ACK)
     c82:	0e 94 23 15 	call	0x2a46	; 0x2a46 <TWI_getStatus>
     c86:	88 31       	cpi	r24, 0x18	; 24
     c88:	11 f0       	breq	.+4      	; 0xc8e <EEPROM_writeByte+0x46>
        return ERROR; 
     c8a:	1c 82       	std	Y+4, r1	; 0x04
     c8c:	16 c0       	rjmp	.+44     	; 0xcba <EEPROM_writeByte+0x72>
		 
    /* Send the required memory location address */
    TWI_writeByte((uint8)(u16addr));
     c8e:	89 81       	ldd	r24, Y+1	; 0x01
     c90:	0e 94 e6 14 	call	0x29cc	; 0x29cc <TWI_writeByte>
    if (TWI_getStatus() != TWI_MT_DATA_ACK)
     c94:	0e 94 23 15 	call	0x2a46	; 0x2a46 <TWI_getStatus>
     c98:	88 32       	cpi	r24, 0x28	; 40
     c9a:	11 f0       	breq	.+4      	; 0xca0 <EEPROM_writeByte+0x58>
        return ERROR;
     c9c:	1c 82       	std	Y+4, r1	; 0x04
     c9e:	0d c0       	rjmp	.+26     	; 0xcba <EEPROM_writeByte+0x72>
		
    /* write byte to eeprom */
    TWI_writeByte(u8data);
     ca0:	8b 81       	ldd	r24, Y+3	; 0x03
     ca2:	0e 94 e6 14 	call	0x29cc	; 0x29cc <TWI_writeByte>
    if (TWI_getStatus() != TWI_MT_DATA_ACK)
     ca6:	0e 94 23 15 	call	0x2a46	; 0x2a46 <TWI_getStatus>
     caa:	88 32       	cpi	r24, 0x28	; 40
     cac:	11 f0       	breq	.+4      	; 0xcb2 <EEPROM_writeByte+0x6a>
        return ERROR;
     cae:	1c 82       	std	Y+4, r1	; 0x04
     cb0:	04 c0       	rjmp	.+8      	; 0xcba <EEPROM_writeByte+0x72>

    /* Send the Stop Bit */
    TWI_stop();
     cb2:	0e 94 db 14 	call	0x29b6	; 0x29b6 <TWI_stop>
	
    return SUCCESS;
     cb6:	81 e0       	ldi	r24, 0x01	; 1
     cb8:	8c 83       	std	Y+4, r24	; 0x04
     cba:	8c 81       	ldd	r24, Y+4	; 0x04
}
     cbc:	0f 90       	pop	r0
     cbe:	0f 90       	pop	r0
     cc0:	0f 90       	pop	r0
     cc2:	0f 90       	pop	r0
     cc4:	cf 91       	pop	r28
     cc6:	df 91       	pop	r29
     cc8:	08 95       	ret

00000cca <EEPROM_readByte>:

uint8 EEPROM_readByte(uint16 u16addr, uint8 *u8data)
{
     cca:	df 93       	push	r29
     ccc:	cf 93       	push	r28
     cce:	00 d0       	rcall	.+0      	; 0xcd0 <EEPROM_readByte+0x6>
     cd0:	00 d0       	rcall	.+0      	; 0xcd2 <EEPROM_readByte+0x8>
     cd2:	0f 92       	push	r0
     cd4:	cd b7       	in	r28, 0x3d	; 61
     cd6:	de b7       	in	r29, 0x3e	; 62
     cd8:	9a 83       	std	Y+2, r25	; 0x02
     cda:	89 83       	std	Y+1, r24	; 0x01
     cdc:	7c 83       	std	Y+4, r23	; 0x04
     cde:	6b 83       	std	Y+3, r22	; 0x03
	/* Send the Start Bit */
    TWI_start();
     ce0:	0e 94 cb 14 	call	0x2996	; 0x2996 <TWI_start>
    if (TWI_getStatus() != TWI_START)
     ce4:	0e 94 23 15 	call	0x2a46	; 0x2a46 <TWI_getStatus>
     ce8:	88 30       	cpi	r24, 0x08	; 8
     cea:	11 f0       	breq	.+4      	; 0xcf0 <EEPROM_readByte+0x26>
        return ERROR;
     cec:	1d 82       	std	Y+5, r1	; 0x05
     cee:	44 c0       	rjmp	.+136    	; 0xd78 <EEPROM_readByte+0xae>
		
    /* Send the device address, we need to get A8 A9 A10 address bits from the
     * memory location address and R/W=0 (write) */
    TWI_writeByte((uint8)((0xA0) | ((u16addr & 0x0700) >> 7)));
     cf0:	89 81       	ldd	r24, Y+1	; 0x01
     cf2:	9a 81       	ldd	r25, Y+2	; 0x02
     cf4:	80 70       	andi	r24, 0x00	; 0
     cf6:	97 70       	andi	r25, 0x07	; 7
     cf8:	88 0f       	add	r24, r24
     cfa:	89 2f       	mov	r24, r25
     cfc:	88 1f       	adc	r24, r24
     cfe:	99 0b       	sbc	r25, r25
     d00:	91 95       	neg	r25
     d02:	80 6a       	ori	r24, 0xA0	; 160
     d04:	0e 94 e6 14 	call	0x29cc	; 0x29cc <TWI_writeByte>
    if (TWI_getStatus() != TWI_MT_SLA_W_ACK)
     d08:	0e 94 23 15 	call	0x2a46	; 0x2a46 <TWI_getStatus>
     d0c:	88 31       	cpi	r24, 0x18	; 24
     d0e:	11 f0       	breq	.+4      	; 0xd14 <EEPROM_readByte+0x4a>
        return ERROR;
     d10:	1d 82       	std	Y+5, r1	; 0x05
     d12:	32 c0       	rjmp	.+100    	; 0xd78 <EEPROM_readByte+0xae>
		
    /* Send the required memory location address */
    TWI_writeByte((uint8)(u16addr));
     d14:	89 81       	ldd	r24, Y+1	; 0x01
     d16:	0e 94 e6 14 	call	0x29cc	; 0x29cc <TWI_writeByte>
    if (TWI_getStatus() != TWI_MT_DATA_ACK)
     d1a:	0e 94 23 15 	call	0x2a46	; 0x2a46 <TWI_getStatus>
     d1e:	88 32       	cpi	r24, 0x28	; 40
     d20:	11 f0       	breq	.+4      	; 0xd26 <EEPROM_readByte+0x5c>
        return ERROR;
     d22:	1d 82       	std	Y+5, r1	; 0x05
     d24:	29 c0       	rjmp	.+82     	; 0xd78 <EEPROM_readByte+0xae>
		
    /* Send the Repeated Start Bit */
    TWI_start();
     d26:	0e 94 cb 14 	call	0x2996	; 0x2996 <TWI_start>
    if (TWI_getStatus() != TWI_REP_START)
     d2a:	0e 94 23 15 	call	0x2a46	; 0x2a46 <TWI_getStatus>
     d2e:	80 31       	cpi	r24, 0x10	; 16
     d30:	11 f0       	breq	.+4      	; 0xd36 <EEPROM_readByte+0x6c>
        return ERROR;
     d32:	1d 82       	std	Y+5, r1	; 0x05
     d34:	21 c0       	rjmp	.+66     	; 0xd78 <EEPROM_readByte+0xae>
		
    /* Send the device address, we need to get A8 A9 A10 address bits from the
     * memory location address and R/W=1 (Read) */
    TWI_writeByte((uint8)((0xA0) | ((u16addr & 0x0700) >> 7) | 1));
     d36:	89 81       	ldd	r24, Y+1	; 0x01
     d38:	9a 81       	ldd	r25, Y+2	; 0x02
     d3a:	80 70       	andi	r24, 0x00	; 0
     d3c:	97 70       	andi	r25, 0x07	; 7
     d3e:	88 0f       	add	r24, r24
     d40:	89 2f       	mov	r24, r25
     d42:	88 1f       	adc	r24, r24
     d44:	99 0b       	sbc	r25, r25
     d46:	91 95       	neg	r25
     d48:	81 6a       	ori	r24, 0xA1	; 161
     d4a:	0e 94 e6 14 	call	0x29cc	; 0x29cc <TWI_writeByte>
    if (TWI_getStatus() != TWI_MT_SLA_R_ACK)
     d4e:	0e 94 23 15 	call	0x2a46	; 0x2a46 <TWI_getStatus>
     d52:	80 34       	cpi	r24, 0x40	; 64
     d54:	11 f0       	breq	.+4      	; 0xd5a <EEPROM_readByte+0x90>
        return ERROR;
     d56:	1d 82       	std	Y+5, r1	; 0x05
     d58:	0f c0       	rjmp	.+30     	; 0xd78 <EEPROM_readByte+0xae>

    /* Read Byte from Memory without send ACK */
    *u8data = TWI_readByteWithNACK();
     d5a:	0e 94 10 15 	call	0x2a20	; 0x2a20 <TWI_readByteWithNACK>
     d5e:	eb 81       	ldd	r30, Y+3	; 0x03
     d60:	fc 81       	ldd	r31, Y+4	; 0x04
     d62:	80 83       	st	Z, r24
    if (TWI_getStatus() != TWI_MR_DATA_NACK)
     d64:	0e 94 23 15 	call	0x2a46	; 0x2a46 <TWI_getStatus>
     d68:	88 35       	cpi	r24, 0x58	; 88
     d6a:	11 f0       	breq	.+4      	; 0xd70 <EEPROM_readByte+0xa6>
        return ERROR;
     d6c:	1d 82       	std	Y+5, r1	; 0x05
     d6e:	04 c0       	rjmp	.+8      	; 0xd78 <EEPROM_readByte+0xae>

    /* Send the Stop Bit */
    TWI_stop();
     d70:	0e 94 db 14 	call	0x29b6	; 0x29b6 <TWI_stop>

    return SUCCESS;
     d74:	81 e0       	ldi	r24, 0x01	; 1
     d76:	8d 83       	std	Y+5, r24	; 0x05
     d78:	8d 81       	ldd	r24, Y+5	; 0x05
}
     d7a:	0f 90       	pop	r0
     d7c:	0f 90       	pop	r0
     d7e:	0f 90       	pop	r0
     d80:	0f 90       	pop	r0
     d82:	0f 90       	pop	r0
     d84:	cf 91       	pop	r28
     d86:	df 91       	pop	r29
     d88:	08 95       	ret

00000d8a <GPIO_setupPinDirection>:
 * Description :
 * Setup the direction of the required pin input/output.
 * If the input port number or pin number are not correct, The function will not handle the request.
 */
void GPIO_setupPinDirection(uint8 port_num, uint8 pin_num, GPIO_PinDirectionType direction)
{
     d8a:	df 93       	push	r29
     d8c:	cf 93       	push	r28
     d8e:	00 d0       	rcall	.+0      	; 0xd90 <GPIO_setupPinDirection+0x6>
     d90:	00 d0       	rcall	.+0      	; 0xd92 <GPIO_setupPinDirection+0x8>
     d92:	0f 92       	push	r0
     d94:	cd b7       	in	r28, 0x3d	; 61
     d96:	de b7       	in	r29, 0x3e	; 62
     d98:	89 83       	std	Y+1, r24	; 0x01
     d9a:	6a 83       	std	Y+2, r22	; 0x02
     d9c:	4b 83       	std	Y+3, r20	; 0x03
	/*
	 * Check if the input port number is greater than NUM_OF_PINS_PER_PORT value.
	 * Or if the input pin number is greater than NUM_OF_PINS_PER_PORT value.
	 * In this case the input is not valid port/pin number
	 */
	if((pin_num >= NUM_OF_PINS_PER_PORT) || (port_num >= NUM_OF_PORTS))
     d9e:	8a 81       	ldd	r24, Y+2	; 0x02
     da0:	88 30       	cpi	r24, 0x08	; 8
     da2:	08 f0       	brcs	.+2      	; 0xda6 <GPIO_setupPinDirection+0x1c>
     da4:	d5 c0       	rjmp	.+426    	; 0xf50 <GPIO_setupPinDirection+0x1c6>
     da6:	89 81       	ldd	r24, Y+1	; 0x01
     da8:	84 30       	cpi	r24, 0x04	; 4
     daa:	08 f0       	brcs	.+2      	; 0xdae <GPIO_setupPinDirection+0x24>
     dac:	d1 c0       	rjmp	.+418    	; 0xf50 <GPIO_setupPinDirection+0x1c6>
		/* Do Nothing */
	}
	else
	{
		/* Setup the pin direction as required */
		switch(port_num)
     dae:	89 81       	ldd	r24, Y+1	; 0x01
     db0:	28 2f       	mov	r18, r24
     db2:	30 e0       	ldi	r19, 0x00	; 0
     db4:	3d 83       	std	Y+5, r19	; 0x05
     db6:	2c 83       	std	Y+4, r18	; 0x04
     db8:	8c 81       	ldd	r24, Y+4	; 0x04
     dba:	9d 81       	ldd	r25, Y+5	; 0x05
     dbc:	81 30       	cpi	r24, 0x01	; 1
     dbe:	91 05       	cpc	r25, r1
     dc0:	09 f4       	brne	.+2      	; 0xdc4 <GPIO_setupPinDirection+0x3a>
     dc2:	43 c0       	rjmp	.+134    	; 0xe4a <GPIO_setupPinDirection+0xc0>
     dc4:	2c 81       	ldd	r18, Y+4	; 0x04
     dc6:	3d 81       	ldd	r19, Y+5	; 0x05
     dc8:	22 30       	cpi	r18, 0x02	; 2
     dca:	31 05       	cpc	r19, r1
     dcc:	2c f4       	brge	.+10     	; 0xdd8 <GPIO_setupPinDirection+0x4e>
     dce:	8c 81       	ldd	r24, Y+4	; 0x04
     dd0:	9d 81       	ldd	r25, Y+5	; 0x05
     dd2:	00 97       	sbiw	r24, 0x00	; 0
     dd4:	71 f0       	breq	.+28     	; 0xdf2 <GPIO_setupPinDirection+0x68>
     dd6:	bc c0       	rjmp	.+376    	; 0xf50 <GPIO_setupPinDirection+0x1c6>
     dd8:	2c 81       	ldd	r18, Y+4	; 0x04
     dda:	3d 81       	ldd	r19, Y+5	; 0x05
     ddc:	22 30       	cpi	r18, 0x02	; 2
     dde:	31 05       	cpc	r19, r1
     de0:	09 f4       	brne	.+2      	; 0xde4 <GPIO_setupPinDirection+0x5a>
     de2:	5f c0       	rjmp	.+190    	; 0xea2 <GPIO_setupPinDirection+0x118>
     de4:	8c 81       	ldd	r24, Y+4	; 0x04
     de6:	9d 81       	ldd	r25, Y+5	; 0x05
     de8:	83 30       	cpi	r24, 0x03	; 3
     dea:	91 05       	cpc	r25, r1
     dec:	09 f4       	brne	.+2      	; 0xdf0 <GPIO_setupPinDirection+0x66>
     dee:	85 c0       	rjmp	.+266    	; 0xefa <GPIO_setupPinDirection+0x170>
     df0:	af c0       	rjmp	.+350    	; 0xf50 <GPIO_setupPinDirection+0x1c6>
		{
		case PORTA_ID:
			if(direction == PIN_OUTPUT)
     df2:	8b 81       	ldd	r24, Y+3	; 0x03
     df4:	81 30       	cpi	r24, 0x01	; 1
     df6:	a1 f4       	brne	.+40     	; 0xe20 <GPIO_setupPinDirection+0x96>
			{
				SET_BIT(DDRA,pin_num);
     df8:	aa e3       	ldi	r26, 0x3A	; 58
     dfa:	b0 e0       	ldi	r27, 0x00	; 0
     dfc:	ea e3       	ldi	r30, 0x3A	; 58
     dfe:	f0 e0       	ldi	r31, 0x00	; 0
     e00:	80 81       	ld	r24, Z
     e02:	48 2f       	mov	r20, r24
     e04:	8a 81       	ldd	r24, Y+2	; 0x02
     e06:	28 2f       	mov	r18, r24
     e08:	30 e0       	ldi	r19, 0x00	; 0
     e0a:	81 e0       	ldi	r24, 0x01	; 1
     e0c:	90 e0       	ldi	r25, 0x00	; 0
     e0e:	02 2e       	mov	r0, r18
     e10:	02 c0       	rjmp	.+4      	; 0xe16 <GPIO_setupPinDirection+0x8c>
     e12:	88 0f       	add	r24, r24
     e14:	99 1f       	adc	r25, r25
     e16:	0a 94       	dec	r0
     e18:	e2 f7       	brpl	.-8      	; 0xe12 <GPIO_setupPinDirection+0x88>
     e1a:	84 2b       	or	r24, r20
     e1c:	8c 93       	st	X, r24
     e1e:	98 c0       	rjmp	.+304    	; 0xf50 <GPIO_setupPinDirection+0x1c6>
			}
			else
			{
				CLEAR_BIT(DDRA,pin_num);
     e20:	aa e3       	ldi	r26, 0x3A	; 58
     e22:	b0 e0       	ldi	r27, 0x00	; 0
     e24:	ea e3       	ldi	r30, 0x3A	; 58
     e26:	f0 e0       	ldi	r31, 0x00	; 0
     e28:	80 81       	ld	r24, Z
     e2a:	48 2f       	mov	r20, r24
     e2c:	8a 81       	ldd	r24, Y+2	; 0x02
     e2e:	28 2f       	mov	r18, r24
     e30:	30 e0       	ldi	r19, 0x00	; 0
     e32:	81 e0       	ldi	r24, 0x01	; 1
     e34:	90 e0       	ldi	r25, 0x00	; 0
     e36:	02 2e       	mov	r0, r18
     e38:	02 c0       	rjmp	.+4      	; 0xe3e <GPIO_setupPinDirection+0xb4>
     e3a:	88 0f       	add	r24, r24
     e3c:	99 1f       	adc	r25, r25
     e3e:	0a 94       	dec	r0
     e40:	e2 f7       	brpl	.-8      	; 0xe3a <GPIO_setupPinDirection+0xb0>
     e42:	80 95       	com	r24
     e44:	84 23       	and	r24, r20
     e46:	8c 93       	st	X, r24
     e48:	83 c0       	rjmp	.+262    	; 0xf50 <GPIO_setupPinDirection+0x1c6>
			}
			break;
		case PORTB_ID:
			if(direction == PIN_OUTPUT)
     e4a:	8b 81       	ldd	r24, Y+3	; 0x03
     e4c:	81 30       	cpi	r24, 0x01	; 1
     e4e:	a1 f4       	brne	.+40     	; 0xe78 <GPIO_setupPinDirection+0xee>
			{
				SET_BIT(DDRB,pin_num);
     e50:	a7 e3       	ldi	r26, 0x37	; 55
     e52:	b0 e0       	ldi	r27, 0x00	; 0
     e54:	e7 e3       	ldi	r30, 0x37	; 55
     e56:	f0 e0       	ldi	r31, 0x00	; 0
     e58:	80 81       	ld	r24, Z
     e5a:	48 2f       	mov	r20, r24
     e5c:	8a 81       	ldd	r24, Y+2	; 0x02
     e5e:	28 2f       	mov	r18, r24
     e60:	30 e0       	ldi	r19, 0x00	; 0
     e62:	81 e0       	ldi	r24, 0x01	; 1
     e64:	90 e0       	ldi	r25, 0x00	; 0
     e66:	02 2e       	mov	r0, r18
     e68:	02 c0       	rjmp	.+4      	; 0xe6e <GPIO_setupPinDirection+0xe4>
     e6a:	88 0f       	add	r24, r24
     e6c:	99 1f       	adc	r25, r25
     e6e:	0a 94       	dec	r0
     e70:	e2 f7       	brpl	.-8      	; 0xe6a <GPIO_setupPinDirection+0xe0>
     e72:	84 2b       	or	r24, r20
     e74:	8c 93       	st	X, r24
     e76:	6c c0       	rjmp	.+216    	; 0xf50 <GPIO_setupPinDirection+0x1c6>
			}
			else
			{
				CLEAR_BIT(DDRB,pin_num);
     e78:	a7 e3       	ldi	r26, 0x37	; 55
     e7a:	b0 e0       	ldi	r27, 0x00	; 0
     e7c:	e7 e3       	ldi	r30, 0x37	; 55
     e7e:	f0 e0       	ldi	r31, 0x00	; 0
     e80:	80 81       	ld	r24, Z
     e82:	48 2f       	mov	r20, r24
     e84:	8a 81       	ldd	r24, Y+2	; 0x02
     e86:	28 2f       	mov	r18, r24
     e88:	30 e0       	ldi	r19, 0x00	; 0
     e8a:	81 e0       	ldi	r24, 0x01	; 1
     e8c:	90 e0       	ldi	r25, 0x00	; 0
     e8e:	02 2e       	mov	r0, r18
     e90:	02 c0       	rjmp	.+4      	; 0xe96 <GPIO_setupPinDirection+0x10c>
     e92:	88 0f       	add	r24, r24
     e94:	99 1f       	adc	r25, r25
     e96:	0a 94       	dec	r0
     e98:	e2 f7       	brpl	.-8      	; 0xe92 <GPIO_setupPinDirection+0x108>
     e9a:	80 95       	com	r24
     e9c:	84 23       	and	r24, r20
     e9e:	8c 93       	st	X, r24
     ea0:	57 c0       	rjmp	.+174    	; 0xf50 <GPIO_setupPinDirection+0x1c6>
			}
			break;
		case PORTC_ID:
			if(direction == PIN_OUTPUT)
     ea2:	8b 81       	ldd	r24, Y+3	; 0x03
     ea4:	81 30       	cpi	r24, 0x01	; 1
     ea6:	a1 f4       	brne	.+40     	; 0xed0 <GPIO_setupPinDirection+0x146>
			{
				SET_BIT(DDRC,pin_num);
     ea8:	a4 e3       	ldi	r26, 0x34	; 52
     eaa:	b0 e0       	ldi	r27, 0x00	; 0
     eac:	e4 e3       	ldi	r30, 0x34	; 52
     eae:	f0 e0       	ldi	r31, 0x00	; 0
     eb0:	80 81       	ld	r24, Z
     eb2:	48 2f       	mov	r20, r24
     eb4:	8a 81       	ldd	r24, Y+2	; 0x02
     eb6:	28 2f       	mov	r18, r24
     eb8:	30 e0       	ldi	r19, 0x00	; 0
     eba:	81 e0       	ldi	r24, 0x01	; 1
     ebc:	90 e0       	ldi	r25, 0x00	; 0
     ebe:	02 2e       	mov	r0, r18
     ec0:	02 c0       	rjmp	.+4      	; 0xec6 <GPIO_setupPinDirection+0x13c>
     ec2:	88 0f       	add	r24, r24
     ec4:	99 1f       	adc	r25, r25
     ec6:	0a 94       	dec	r0
     ec8:	e2 f7       	brpl	.-8      	; 0xec2 <GPIO_setupPinDirection+0x138>
     eca:	84 2b       	or	r24, r20
     ecc:	8c 93       	st	X, r24
     ece:	40 c0       	rjmp	.+128    	; 0xf50 <GPIO_setupPinDirection+0x1c6>
			}
			else
			{
				CLEAR_BIT(DDRC,pin_num);
     ed0:	a4 e3       	ldi	r26, 0x34	; 52
     ed2:	b0 e0       	ldi	r27, 0x00	; 0
     ed4:	e4 e3       	ldi	r30, 0x34	; 52
     ed6:	f0 e0       	ldi	r31, 0x00	; 0
     ed8:	80 81       	ld	r24, Z
     eda:	48 2f       	mov	r20, r24
     edc:	8a 81       	ldd	r24, Y+2	; 0x02
     ede:	28 2f       	mov	r18, r24
     ee0:	30 e0       	ldi	r19, 0x00	; 0
     ee2:	81 e0       	ldi	r24, 0x01	; 1
     ee4:	90 e0       	ldi	r25, 0x00	; 0
     ee6:	02 2e       	mov	r0, r18
     ee8:	02 c0       	rjmp	.+4      	; 0xeee <GPIO_setupPinDirection+0x164>
     eea:	88 0f       	add	r24, r24
     eec:	99 1f       	adc	r25, r25
     eee:	0a 94       	dec	r0
     ef0:	e2 f7       	brpl	.-8      	; 0xeea <GPIO_setupPinDirection+0x160>
     ef2:	80 95       	com	r24
     ef4:	84 23       	and	r24, r20
     ef6:	8c 93       	st	X, r24
     ef8:	2b c0       	rjmp	.+86     	; 0xf50 <GPIO_setupPinDirection+0x1c6>
			}
			break;
		case PORTD_ID:
			if(direction == PIN_OUTPUT)
     efa:	8b 81       	ldd	r24, Y+3	; 0x03
     efc:	81 30       	cpi	r24, 0x01	; 1
     efe:	a1 f4       	brne	.+40     	; 0xf28 <GPIO_setupPinDirection+0x19e>
			{
				SET_BIT(DDRD,pin_num);
     f00:	a1 e3       	ldi	r26, 0x31	; 49
     f02:	b0 e0       	ldi	r27, 0x00	; 0
     f04:	e1 e3       	ldi	r30, 0x31	; 49
     f06:	f0 e0       	ldi	r31, 0x00	; 0
     f08:	80 81       	ld	r24, Z
     f0a:	48 2f       	mov	r20, r24
     f0c:	8a 81       	ldd	r24, Y+2	; 0x02
     f0e:	28 2f       	mov	r18, r24
     f10:	30 e0       	ldi	r19, 0x00	; 0
     f12:	81 e0       	ldi	r24, 0x01	; 1
     f14:	90 e0       	ldi	r25, 0x00	; 0
     f16:	02 2e       	mov	r0, r18
     f18:	02 c0       	rjmp	.+4      	; 0xf1e <GPIO_setupPinDirection+0x194>
     f1a:	88 0f       	add	r24, r24
     f1c:	99 1f       	adc	r25, r25
     f1e:	0a 94       	dec	r0
     f20:	e2 f7       	brpl	.-8      	; 0xf1a <GPIO_setupPinDirection+0x190>
     f22:	84 2b       	or	r24, r20
     f24:	8c 93       	st	X, r24
     f26:	14 c0       	rjmp	.+40     	; 0xf50 <GPIO_setupPinDirection+0x1c6>
			}
			else
			{
				CLEAR_BIT(DDRD,pin_num);
     f28:	a1 e3       	ldi	r26, 0x31	; 49
     f2a:	b0 e0       	ldi	r27, 0x00	; 0
     f2c:	e1 e3       	ldi	r30, 0x31	; 49
     f2e:	f0 e0       	ldi	r31, 0x00	; 0
     f30:	80 81       	ld	r24, Z
     f32:	48 2f       	mov	r20, r24
     f34:	8a 81       	ldd	r24, Y+2	; 0x02
     f36:	28 2f       	mov	r18, r24
     f38:	30 e0       	ldi	r19, 0x00	; 0
     f3a:	81 e0       	ldi	r24, 0x01	; 1
     f3c:	90 e0       	ldi	r25, 0x00	; 0
     f3e:	02 2e       	mov	r0, r18
     f40:	02 c0       	rjmp	.+4      	; 0xf46 <GPIO_setupPinDirection+0x1bc>
     f42:	88 0f       	add	r24, r24
     f44:	99 1f       	adc	r25, r25
     f46:	0a 94       	dec	r0
     f48:	e2 f7       	brpl	.-8      	; 0xf42 <GPIO_setupPinDirection+0x1b8>
     f4a:	80 95       	com	r24
     f4c:	84 23       	and	r24, r20
     f4e:	8c 93       	st	X, r24
			}
			break;
		}
	}
}
     f50:	0f 90       	pop	r0
     f52:	0f 90       	pop	r0
     f54:	0f 90       	pop	r0
     f56:	0f 90       	pop	r0
     f58:	0f 90       	pop	r0
     f5a:	cf 91       	pop	r28
     f5c:	df 91       	pop	r29
     f5e:	08 95       	ret

00000f60 <GPIO_writePin>:
 * Write the value Logic High or Logic Low on the required pin.
 * If the input port number or pin number are not correct, The function will not handle the request.
 * If the pin is input, this function will enable/disable the internal pull-up resistor.
 */
void GPIO_writePin(uint8 port_num, uint8 pin_num, uint8 value)
{
     f60:	df 93       	push	r29
     f62:	cf 93       	push	r28
     f64:	00 d0       	rcall	.+0      	; 0xf66 <GPIO_writePin+0x6>
     f66:	00 d0       	rcall	.+0      	; 0xf68 <GPIO_writePin+0x8>
     f68:	0f 92       	push	r0
     f6a:	cd b7       	in	r28, 0x3d	; 61
     f6c:	de b7       	in	r29, 0x3e	; 62
     f6e:	89 83       	std	Y+1, r24	; 0x01
     f70:	6a 83       	std	Y+2, r22	; 0x02
     f72:	4b 83       	std	Y+3, r20	; 0x03
	/*
	 * Check if the input port number is greater than NUM_OF_PINS_PER_PORT value.
	 * Or if the input pin number is greater than NUM_OF_PINS_PER_PORT value.
	 * In this case the input is not valid port/pin number
	 */
	if((pin_num >= NUM_OF_PINS_PER_PORT) || (port_num >= NUM_OF_PORTS))
     f74:	8a 81       	ldd	r24, Y+2	; 0x02
     f76:	88 30       	cpi	r24, 0x08	; 8
     f78:	08 f0       	brcs	.+2      	; 0xf7c <GPIO_writePin+0x1c>
     f7a:	d5 c0       	rjmp	.+426    	; 0x1126 <GPIO_writePin+0x1c6>
     f7c:	89 81       	ldd	r24, Y+1	; 0x01
     f7e:	84 30       	cpi	r24, 0x04	; 4
     f80:	08 f0       	brcs	.+2      	; 0xf84 <GPIO_writePin+0x24>
     f82:	d1 c0       	rjmp	.+418    	; 0x1126 <GPIO_writePin+0x1c6>
		/* Do Nothing */
	}
	else
	{
		/* Write the pin value as required */
		switch(port_num)
     f84:	89 81       	ldd	r24, Y+1	; 0x01
     f86:	28 2f       	mov	r18, r24
     f88:	30 e0       	ldi	r19, 0x00	; 0
     f8a:	3d 83       	std	Y+5, r19	; 0x05
     f8c:	2c 83       	std	Y+4, r18	; 0x04
     f8e:	8c 81       	ldd	r24, Y+4	; 0x04
     f90:	9d 81       	ldd	r25, Y+5	; 0x05
     f92:	81 30       	cpi	r24, 0x01	; 1
     f94:	91 05       	cpc	r25, r1
     f96:	09 f4       	brne	.+2      	; 0xf9a <GPIO_writePin+0x3a>
     f98:	43 c0       	rjmp	.+134    	; 0x1020 <GPIO_writePin+0xc0>
     f9a:	2c 81       	ldd	r18, Y+4	; 0x04
     f9c:	3d 81       	ldd	r19, Y+5	; 0x05
     f9e:	22 30       	cpi	r18, 0x02	; 2
     fa0:	31 05       	cpc	r19, r1
     fa2:	2c f4       	brge	.+10     	; 0xfae <GPIO_writePin+0x4e>
     fa4:	8c 81       	ldd	r24, Y+4	; 0x04
     fa6:	9d 81       	ldd	r25, Y+5	; 0x05
     fa8:	00 97       	sbiw	r24, 0x00	; 0
     faa:	71 f0       	breq	.+28     	; 0xfc8 <GPIO_writePin+0x68>
     fac:	bc c0       	rjmp	.+376    	; 0x1126 <GPIO_writePin+0x1c6>
     fae:	2c 81       	ldd	r18, Y+4	; 0x04
     fb0:	3d 81       	ldd	r19, Y+5	; 0x05
     fb2:	22 30       	cpi	r18, 0x02	; 2
     fb4:	31 05       	cpc	r19, r1
     fb6:	09 f4       	brne	.+2      	; 0xfba <GPIO_writePin+0x5a>
     fb8:	5f c0       	rjmp	.+190    	; 0x1078 <GPIO_writePin+0x118>
     fba:	8c 81       	ldd	r24, Y+4	; 0x04
     fbc:	9d 81       	ldd	r25, Y+5	; 0x05
     fbe:	83 30       	cpi	r24, 0x03	; 3
     fc0:	91 05       	cpc	r25, r1
     fc2:	09 f4       	brne	.+2      	; 0xfc6 <GPIO_writePin+0x66>
     fc4:	85 c0       	rjmp	.+266    	; 0x10d0 <GPIO_writePin+0x170>
     fc6:	af c0       	rjmp	.+350    	; 0x1126 <GPIO_writePin+0x1c6>
		{
		case PORTA_ID:
			if(value == LOGIC_HIGH)
     fc8:	8b 81       	ldd	r24, Y+3	; 0x03
     fca:	81 30       	cpi	r24, 0x01	; 1
     fcc:	a1 f4       	brne	.+40     	; 0xff6 <GPIO_writePin+0x96>
			{
				SET_BIT(PORTA,pin_num);
     fce:	ab e3       	ldi	r26, 0x3B	; 59
     fd0:	b0 e0       	ldi	r27, 0x00	; 0
     fd2:	eb e3       	ldi	r30, 0x3B	; 59
     fd4:	f0 e0       	ldi	r31, 0x00	; 0
     fd6:	80 81       	ld	r24, Z
     fd8:	48 2f       	mov	r20, r24
     fda:	8a 81       	ldd	r24, Y+2	; 0x02
     fdc:	28 2f       	mov	r18, r24
     fde:	30 e0       	ldi	r19, 0x00	; 0
     fe0:	81 e0       	ldi	r24, 0x01	; 1
     fe2:	90 e0       	ldi	r25, 0x00	; 0
     fe4:	02 2e       	mov	r0, r18
     fe6:	02 c0       	rjmp	.+4      	; 0xfec <GPIO_writePin+0x8c>
     fe8:	88 0f       	add	r24, r24
     fea:	99 1f       	adc	r25, r25
     fec:	0a 94       	dec	r0
     fee:	e2 f7       	brpl	.-8      	; 0xfe8 <GPIO_writePin+0x88>
     ff0:	84 2b       	or	r24, r20
     ff2:	8c 93       	st	X, r24
     ff4:	98 c0       	rjmp	.+304    	; 0x1126 <GPIO_writePin+0x1c6>
			}
			else
			{
				CLEAR_BIT(PORTA,pin_num);
     ff6:	ab e3       	ldi	r26, 0x3B	; 59
     ff8:	b0 e0       	ldi	r27, 0x00	; 0
     ffa:	eb e3       	ldi	r30, 0x3B	; 59
     ffc:	f0 e0       	ldi	r31, 0x00	; 0
     ffe:	80 81       	ld	r24, Z
    1000:	48 2f       	mov	r20, r24
    1002:	8a 81       	ldd	r24, Y+2	; 0x02
    1004:	28 2f       	mov	r18, r24
    1006:	30 e0       	ldi	r19, 0x00	; 0
    1008:	81 e0       	ldi	r24, 0x01	; 1
    100a:	90 e0       	ldi	r25, 0x00	; 0
    100c:	02 2e       	mov	r0, r18
    100e:	02 c0       	rjmp	.+4      	; 0x1014 <GPIO_writePin+0xb4>
    1010:	88 0f       	add	r24, r24
    1012:	99 1f       	adc	r25, r25
    1014:	0a 94       	dec	r0
    1016:	e2 f7       	brpl	.-8      	; 0x1010 <GPIO_writePin+0xb0>
    1018:	80 95       	com	r24
    101a:	84 23       	and	r24, r20
    101c:	8c 93       	st	X, r24
    101e:	83 c0       	rjmp	.+262    	; 0x1126 <GPIO_writePin+0x1c6>
			}
			break;
		case PORTB_ID:
			if(value == LOGIC_HIGH)
    1020:	8b 81       	ldd	r24, Y+3	; 0x03
    1022:	81 30       	cpi	r24, 0x01	; 1
    1024:	a1 f4       	brne	.+40     	; 0x104e <GPIO_writePin+0xee>
			{
				SET_BIT(PORTB,pin_num);
    1026:	a8 e3       	ldi	r26, 0x38	; 56
    1028:	b0 e0       	ldi	r27, 0x00	; 0
    102a:	e8 e3       	ldi	r30, 0x38	; 56
    102c:	f0 e0       	ldi	r31, 0x00	; 0
    102e:	80 81       	ld	r24, Z
    1030:	48 2f       	mov	r20, r24
    1032:	8a 81       	ldd	r24, Y+2	; 0x02
    1034:	28 2f       	mov	r18, r24
    1036:	30 e0       	ldi	r19, 0x00	; 0
    1038:	81 e0       	ldi	r24, 0x01	; 1
    103a:	90 e0       	ldi	r25, 0x00	; 0
    103c:	02 2e       	mov	r0, r18
    103e:	02 c0       	rjmp	.+4      	; 0x1044 <GPIO_writePin+0xe4>
    1040:	88 0f       	add	r24, r24
    1042:	99 1f       	adc	r25, r25
    1044:	0a 94       	dec	r0
    1046:	e2 f7       	brpl	.-8      	; 0x1040 <GPIO_writePin+0xe0>
    1048:	84 2b       	or	r24, r20
    104a:	8c 93       	st	X, r24
    104c:	6c c0       	rjmp	.+216    	; 0x1126 <GPIO_writePin+0x1c6>
			}
			else
			{
				CLEAR_BIT(PORTB,pin_num);
    104e:	a8 e3       	ldi	r26, 0x38	; 56
    1050:	b0 e0       	ldi	r27, 0x00	; 0
    1052:	e8 e3       	ldi	r30, 0x38	; 56
    1054:	f0 e0       	ldi	r31, 0x00	; 0
    1056:	80 81       	ld	r24, Z
    1058:	48 2f       	mov	r20, r24
    105a:	8a 81       	ldd	r24, Y+2	; 0x02
    105c:	28 2f       	mov	r18, r24
    105e:	30 e0       	ldi	r19, 0x00	; 0
    1060:	81 e0       	ldi	r24, 0x01	; 1
    1062:	90 e0       	ldi	r25, 0x00	; 0
    1064:	02 2e       	mov	r0, r18
    1066:	02 c0       	rjmp	.+4      	; 0x106c <GPIO_writePin+0x10c>
    1068:	88 0f       	add	r24, r24
    106a:	99 1f       	adc	r25, r25
    106c:	0a 94       	dec	r0
    106e:	e2 f7       	brpl	.-8      	; 0x1068 <GPIO_writePin+0x108>
    1070:	80 95       	com	r24
    1072:	84 23       	and	r24, r20
    1074:	8c 93       	st	X, r24
    1076:	57 c0       	rjmp	.+174    	; 0x1126 <GPIO_writePin+0x1c6>
			}
			break;
		case PORTC_ID:
			if(value == LOGIC_HIGH)
    1078:	8b 81       	ldd	r24, Y+3	; 0x03
    107a:	81 30       	cpi	r24, 0x01	; 1
    107c:	a1 f4       	brne	.+40     	; 0x10a6 <GPIO_writePin+0x146>
			{
				SET_BIT(PORTC,pin_num);
    107e:	a5 e3       	ldi	r26, 0x35	; 53
    1080:	b0 e0       	ldi	r27, 0x00	; 0
    1082:	e5 e3       	ldi	r30, 0x35	; 53
    1084:	f0 e0       	ldi	r31, 0x00	; 0
    1086:	80 81       	ld	r24, Z
    1088:	48 2f       	mov	r20, r24
    108a:	8a 81       	ldd	r24, Y+2	; 0x02
    108c:	28 2f       	mov	r18, r24
    108e:	30 e0       	ldi	r19, 0x00	; 0
    1090:	81 e0       	ldi	r24, 0x01	; 1
    1092:	90 e0       	ldi	r25, 0x00	; 0
    1094:	02 2e       	mov	r0, r18
    1096:	02 c0       	rjmp	.+4      	; 0x109c <GPIO_writePin+0x13c>
    1098:	88 0f       	add	r24, r24
    109a:	99 1f       	adc	r25, r25
    109c:	0a 94       	dec	r0
    109e:	e2 f7       	brpl	.-8      	; 0x1098 <GPIO_writePin+0x138>
    10a0:	84 2b       	or	r24, r20
    10a2:	8c 93       	st	X, r24
    10a4:	40 c0       	rjmp	.+128    	; 0x1126 <GPIO_writePin+0x1c6>
			}
			else
			{
				CLEAR_BIT(PORTC,pin_num);
    10a6:	a5 e3       	ldi	r26, 0x35	; 53
    10a8:	b0 e0       	ldi	r27, 0x00	; 0
    10aa:	e5 e3       	ldi	r30, 0x35	; 53
    10ac:	f0 e0       	ldi	r31, 0x00	; 0
    10ae:	80 81       	ld	r24, Z
    10b0:	48 2f       	mov	r20, r24
    10b2:	8a 81       	ldd	r24, Y+2	; 0x02
    10b4:	28 2f       	mov	r18, r24
    10b6:	30 e0       	ldi	r19, 0x00	; 0
    10b8:	81 e0       	ldi	r24, 0x01	; 1
    10ba:	90 e0       	ldi	r25, 0x00	; 0
    10bc:	02 2e       	mov	r0, r18
    10be:	02 c0       	rjmp	.+4      	; 0x10c4 <GPIO_writePin+0x164>
    10c0:	88 0f       	add	r24, r24
    10c2:	99 1f       	adc	r25, r25
    10c4:	0a 94       	dec	r0
    10c6:	e2 f7       	brpl	.-8      	; 0x10c0 <GPIO_writePin+0x160>
    10c8:	80 95       	com	r24
    10ca:	84 23       	and	r24, r20
    10cc:	8c 93       	st	X, r24
    10ce:	2b c0       	rjmp	.+86     	; 0x1126 <GPIO_writePin+0x1c6>
			}
			break;
		case PORTD_ID:
			if(value == LOGIC_HIGH)
    10d0:	8b 81       	ldd	r24, Y+3	; 0x03
    10d2:	81 30       	cpi	r24, 0x01	; 1
    10d4:	a1 f4       	brne	.+40     	; 0x10fe <GPIO_writePin+0x19e>
			{
				SET_BIT(PORTD,pin_num);
    10d6:	a2 e3       	ldi	r26, 0x32	; 50
    10d8:	b0 e0       	ldi	r27, 0x00	; 0
    10da:	e2 e3       	ldi	r30, 0x32	; 50
    10dc:	f0 e0       	ldi	r31, 0x00	; 0
    10de:	80 81       	ld	r24, Z
    10e0:	48 2f       	mov	r20, r24
    10e2:	8a 81       	ldd	r24, Y+2	; 0x02
    10e4:	28 2f       	mov	r18, r24
    10e6:	30 e0       	ldi	r19, 0x00	; 0
    10e8:	81 e0       	ldi	r24, 0x01	; 1
    10ea:	90 e0       	ldi	r25, 0x00	; 0
    10ec:	02 2e       	mov	r0, r18
    10ee:	02 c0       	rjmp	.+4      	; 0x10f4 <GPIO_writePin+0x194>
    10f0:	88 0f       	add	r24, r24
    10f2:	99 1f       	adc	r25, r25
    10f4:	0a 94       	dec	r0
    10f6:	e2 f7       	brpl	.-8      	; 0x10f0 <GPIO_writePin+0x190>
    10f8:	84 2b       	or	r24, r20
    10fa:	8c 93       	st	X, r24
    10fc:	14 c0       	rjmp	.+40     	; 0x1126 <GPIO_writePin+0x1c6>
			}
			else
			{
				CLEAR_BIT(PORTD,pin_num);
    10fe:	a2 e3       	ldi	r26, 0x32	; 50
    1100:	b0 e0       	ldi	r27, 0x00	; 0
    1102:	e2 e3       	ldi	r30, 0x32	; 50
    1104:	f0 e0       	ldi	r31, 0x00	; 0
    1106:	80 81       	ld	r24, Z
    1108:	48 2f       	mov	r20, r24
    110a:	8a 81       	ldd	r24, Y+2	; 0x02
    110c:	28 2f       	mov	r18, r24
    110e:	30 e0       	ldi	r19, 0x00	; 0
    1110:	81 e0       	ldi	r24, 0x01	; 1
    1112:	90 e0       	ldi	r25, 0x00	; 0
    1114:	02 2e       	mov	r0, r18
    1116:	02 c0       	rjmp	.+4      	; 0x111c <GPIO_writePin+0x1bc>
    1118:	88 0f       	add	r24, r24
    111a:	99 1f       	adc	r25, r25
    111c:	0a 94       	dec	r0
    111e:	e2 f7       	brpl	.-8      	; 0x1118 <GPIO_writePin+0x1b8>
    1120:	80 95       	com	r24
    1122:	84 23       	and	r24, r20
    1124:	8c 93       	st	X, r24
			}
			break;
		}
	}
}
    1126:	0f 90       	pop	r0
    1128:	0f 90       	pop	r0
    112a:	0f 90       	pop	r0
    112c:	0f 90       	pop	r0
    112e:	0f 90       	pop	r0
    1130:	cf 91       	pop	r28
    1132:	df 91       	pop	r29
    1134:	08 95       	ret

00001136 <GPIO_readPin>:
 * Description :
 * Read and return the value for the required pin, it should be Logic High or Logic Low.
 * If the input port number or pin number are not correct, The function will return Logic Low.
 */
uint8 GPIO_readPin(uint8 port_num, uint8 pin_num)
{
    1136:	df 93       	push	r29
    1138:	cf 93       	push	r28
    113a:	00 d0       	rcall	.+0      	; 0x113c <GPIO_readPin+0x6>
    113c:	00 d0       	rcall	.+0      	; 0x113e <GPIO_readPin+0x8>
    113e:	0f 92       	push	r0
    1140:	cd b7       	in	r28, 0x3d	; 61
    1142:	de b7       	in	r29, 0x3e	; 62
    1144:	8a 83       	std	Y+2, r24	; 0x02
    1146:	6b 83       	std	Y+3, r22	; 0x03
	uint8 pin_value = LOGIC_LOW;
    1148:	19 82       	std	Y+1, r1	; 0x01
	/*
	 * Check if the input port number is greater than NUM_OF_PINS_PER_PORT value.
	 * Or if the input pin number is greater than NUM_OF_PINS_PER_PORT value.
	 * In this case the input is not valid port/pin number
	 */
	if((pin_num >= NUM_OF_PINS_PER_PORT) || (port_num >= NUM_OF_PORTS))
    114a:	8b 81       	ldd	r24, Y+3	; 0x03
    114c:	88 30       	cpi	r24, 0x08	; 8
    114e:	08 f0       	brcs	.+2      	; 0x1152 <GPIO_readPin+0x1c>
    1150:	84 c0       	rjmp	.+264    	; 0x125a <GPIO_readPin+0x124>
    1152:	8a 81       	ldd	r24, Y+2	; 0x02
    1154:	84 30       	cpi	r24, 0x04	; 4
    1156:	08 f0       	brcs	.+2      	; 0x115a <GPIO_readPin+0x24>
    1158:	80 c0       	rjmp	.+256    	; 0x125a <GPIO_readPin+0x124>
		/* Do Nothing */
	}
	else
	{
		/* Read the pin value as required */
		switch(port_num)
    115a:	8a 81       	ldd	r24, Y+2	; 0x02
    115c:	28 2f       	mov	r18, r24
    115e:	30 e0       	ldi	r19, 0x00	; 0
    1160:	3d 83       	std	Y+5, r19	; 0x05
    1162:	2c 83       	std	Y+4, r18	; 0x04
    1164:	4c 81       	ldd	r20, Y+4	; 0x04
    1166:	5d 81       	ldd	r21, Y+5	; 0x05
    1168:	41 30       	cpi	r20, 0x01	; 1
    116a:	51 05       	cpc	r21, r1
    116c:	79 f1       	breq	.+94     	; 0x11cc <GPIO_readPin+0x96>
    116e:	8c 81       	ldd	r24, Y+4	; 0x04
    1170:	9d 81       	ldd	r25, Y+5	; 0x05
    1172:	82 30       	cpi	r24, 0x02	; 2
    1174:	91 05       	cpc	r25, r1
    1176:	34 f4       	brge	.+12     	; 0x1184 <GPIO_readPin+0x4e>
    1178:	2c 81       	ldd	r18, Y+4	; 0x04
    117a:	3d 81       	ldd	r19, Y+5	; 0x05
    117c:	21 15       	cp	r18, r1
    117e:	31 05       	cpc	r19, r1
    1180:	69 f0       	breq	.+26     	; 0x119c <GPIO_readPin+0x66>
    1182:	6b c0       	rjmp	.+214    	; 0x125a <GPIO_readPin+0x124>
    1184:	4c 81       	ldd	r20, Y+4	; 0x04
    1186:	5d 81       	ldd	r21, Y+5	; 0x05
    1188:	42 30       	cpi	r20, 0x02	; 2
    118a:	51 05       	cpc	r21, r1
    118c:	b9 f1       	breq	.+110    	; 0x11fc <GPIO_readPin+0xc6>
    118e:	8c 81       	ldd	r24, Y+4	; 0x04
    1190:	9d 81       	ldd	r25, Y+5	; 0x05
    1192:	83 30       	cpi	r24, 0x03	; 3
    1194:	91 05       	cpc	r25, r1
    1196:	09 f4       	brne	.+2      	; 0x119a <GPIO_readPin+0x64>
    1198:	49 c0       	rjmp	.+146    	; 0x122c <GPIO_readPin+0xf6>
    119a:	5f c0       	rjmp	.+190    	; 0x125a <GPIO_readPin+0x124>
		{
		case PORTA_ID:
			if(BIT_IS_SET(PINA,pin_num))
    119c:	e9 e3       	ldi	r30, 0x39	; 57
    119e:	f0 e0       	ldi	r31, 0x00	; 0
    11a0:	80 81       	ld	r24, Z
    11a2:	28 2f       	mov	r18, r24
    11a4:	30 e0       	ldi	r19, 0x00	; 0
    11a6:	8b 81       	ldd	r24, Y+3	; 0x03
    11a8:	88 2f       	mov	r24, r24
    11aa:	90 e0       	ldi	r25, 0x00	; 0
    11ac:	a9 01       	movw	r20, r18
    11ae:	02 c0       	rjmp	.+4      	; 0x11b4 <GPIO_readPin+0x7e>
    11b0:	55 95       	asr	r21
    11b2:	47 95       	ror	r20
    11b4:	8a 95       	dec	r24
    11b6:	e2 f7       	brpl	.-8      	; 0x11b0 <GPIO_readPin+0x7a>
    11b8:	ca 01       	movw	r24, r20
    11ba:	81 70       	andi	r24, 0x01	; 1
    11bc:	90 70       	andi	r25, 0x00	; 0
    11be:	88 23       	and	r24, r24
    11c0:	19 f0       	breq	.+6      	; 0x11c8 <GPIO_readPin+0x92>
			{
				pin_value = LOGIC_HIGH;
    11c2:	81 e0       	ldi	r24, 0x01	; 1
    11c4:	89 83       	std	Y+1, r24	; 0x01
    11c6:	49 c0       	rjmp	.+146    	; 0x125a <GPIO_readPin+0x124>
			}
			else
			{
				pin_value = LOGIC_LOW;
    11c8:	19 82       	std	Y+1, r1	; 0x01
    11ca:	47 c0       	rjmp	.+142    	; 0x125a <GPIO_readPin+0x124>
			}
			break;
		case PORTB_ID:
			if(BIT_IS_SET(PINB,pin_num))
    11cc:	e6 e3       	ldi	r30, 0x36	; 54
    11ce:	f0 e0       	ldi	r31, 0x00	; 0
    11d0:	80 81       	ld	r24, Z
    11d2:	28 2f       	mov	r18, r24
    11d4:	30 e0       	ldi	r19, 0x00	; 0
    11d6:	8b 81       	ldd	r24, Y+3	; 0x03
    11d8:	88 2f       	mov	r24, r24
    11da:	90 e0       	ldi	r25, 0x00	; 0
    11dc:	a9 01       	movw	r20, r18
    11de:	02 c0       	rjmp	.+4      	; 0x11e4 <GPIO_readPin+0xae>
    11e0:	55 95       	asr	r21
    11e2:	47 95       	ror	r20
    11e4:	8a 95       	dec	r24
    11e6:	e2 f7       	brpl	.-8      	; 0x11e0 <GPIO_readPin+0xaa>
    11e8:	ca 01       	movw	r24, r20
    11ea:	81 70       	andi	r24, 0x01	; 1
    11ec:	90 70       	andi	r25, 0x00	; 0
    11ee:	88 23       	and	r24, r24
    11f0:	19 f0       	breq	.+6      	; 0x11f8 <GPIO_readPin+0xc2>
			{
				pin_value = LOGIC_HIGH;
    11f2:	81 e0       	ldi	r24, 0x01	; 1
    11f4:	89 83       	std	Y+1, r24	; 0x01
    11f6:	31 c0       	rjmp	.+98     	; 0x125a <GPIO_readPin+0x124>
			}
			else
			{
				pin_value = LOGIC_LOW;
    11f8:	19 82       	std	Y+1, r1	; 0x01
    11fa:	2f c0       	rjmp	.+94     	; 0x125a <GPIO_readPin+0x124>
			}
			break;
		case PORTC_ID:
			if(BIT_IS_SET(PINC,pin_num))
    11fc:	e3 e3       	ldi	r30, 0x33	; 51
    11fe:	f0 e0       	ldi	r31, 0x00	; 0
    1200:	80 81       	ld	r24, Z
    1202:	28 2f       	mov	r18, r24
    1204:	30 e0       	ldi	r19, 0x00	; 0
    1206:	8b 81       	ldd	r24, Y+3	; 0x03
    1208:	88 2f       	mov	r24, r24
    120a:	90 e0       	ldi	r25, 0x00	; 0
    120c:	a9 01       	movw	r20, r18
    120e:	02 c0       	rjmp	.+4      	; 0x1214 <GPIO_readPin+0xde>
    1210:	55 95       	asr	r21
    1212:	47 95       	ror	r20
    1214:	8a 95       	dec	r24
    1216:	e2 f7       	brpl	.-8      	; 0x1210 <GPIO_readPin+0xda>
    1218:	ca 01       	movw	r24, r20
    121a:	81 70       	andi	r24, 0x01	; 1
    121c:	90 70       	andi	r25, 0x00	; 0
    121e:	88 23       	and	r24, r24
    1220:	19 f0       	breq	.+6      	; 0x1228 <GPIO_readPin+0xf2>
			{
				pin_value = LOGIC_HIGH;
    1222:	81 e0       	ldi	r24, 0x01	; 1
    1224:	89 83       	std	Y+1, r24	; 0x01
    1226:	19 c0       	rjmp	.+50     	; 0x125a <GPIO_readPin+0x124>
			}
			else
			{
				pin_value = LOGIC_LOW;
    1228:	19 82       	std	Y+1, r1	; 0x01
    122a:	17 c0       	rjmp	.+46     	; 0x125a <GPIO_readPin+0x124>
			}
			break;
		case PORTD_ID:
			if(BIT_IS_SET(PIND,pin_num))
    122c:	e0 e3       	ldi	r30, 0x30	; 48
    122e:	f0 e0       	ldi	r31, 0x00	; 0
    1230:	80 81       	ld	r24, Z
    1232:	28 2f       	mov	r18, r24
    1234:	30 e0       	ldi	r19, 0x00	; 0
    1236:	8b 81       	ldd	r24, Y+3	; 0x03
    1238:	88 2f       	mov	r24, r24
    123a:	90 e0       	ldi	r25, 0x00	; 0
    123c:	a9 01       	movw	r20, r18
    123e:	02 c0       	rjmp	.+4      	; 0x1244 <GPIO_readPin+0x10e>
    1240:	55 95       	asr	r21
    1242:	47 95       	ror	r20
    1244:	8a 95       	dec	r24
    1246:	e2 f7       	brpl	.-8      	; 0x1240 <GPIO_readPin+0x10a>
    1248:	ca 01       	movw	r24, r20
    124a:	81 70       	andi	r24, 0x01	; 1
    124c:	90 70       	andi	r25, 0x00	; 0
    124e:	88 23       	and	r24, r24
    1250:	19 f0       	breq	.+6      	; 0x1258 <GPIO_readPin+0x122>
			{
				pin_value = LOGIC_HIGH;
    1252:	81 e0       	ldi	r24, 0x01	; 1
    1254:	89 83       	std	Y+1, r24	; 0x01
    1256:	01 c0       	rjmp	.+2      	; 0x125a <GPIO_readPin+0x124>
			}
			else
			{
				pin_value = LOGIC_LOW;
    1258:	19 82       	std	Y+1, r1	; 0x01
			}
			break;
		}
	}

	return pin_value;
    125a:	89 81       	ldd	r24, Y+1	; 0x01
}
    125c:	0f 90       	pop	r0
    125e:	0f 90       	pop	r0
    1260:	0f 90       	pop	r0
    1262:	0f 90       	pop	r0
    1264:	0f 90       	pop	r0
    1266:	cf 91       	pop	r28
    1268:	df 91       	pop	r29
    126a:	08 95       	ret

0000126c <GPIO_setupPortDirection>:
 * If the direction value is PORT_INPUT all pins in this port should be input pins.
 * If the direction value is PORT_OUTPUT all pins in this port should be output pins.
 * If the input port number is not correct, The function will not handle the request.
 */
void GPIO_setupPortDirection(uint8 port_num, GPIO_PortDirectionType direction)
{
    126c:	df 93       	push	r29
    126e:	cf 93       	push	r28
    1270:	00 d0       	rcall	.+0      	; 0x1272 <GPIO_setupPortDirection+0x6>
    1272:	00 d0       	rcall	.+0      	; 0x1274 <GPIO_setupPortDirection+0x8>
    1274:	cd b7       	in	r28, 0x3d	; 61
    1276:	de b7       	in	r29, 0x3e	; 62
    1278:	89 83       	std	Y+1, r24	; 0x01
    127a:	6a 83       	std	Y+2, r22	; 0x02
	/*
	 * Check if the input number is greater than NUM_OF_PORTS value.
	 * In this case the input is not valid port number
	 */
	if(port_num >= NUM_OF_PORTS)
    127c:	89 81       	ldd	r24, Y+1	; 0x01
    127e:	84 30       	cpi	r24, 0x04	; 4
    1280:	90 f5       	brcc	.+100    	; 0x12e6 <GPIO_setupPortDirection+0x7a>
		/* Do Nothing */
	}
	else
	{
		/* Setup the port direction as required */
		switch(port_num)
    1282:	89 81       	ldd	r24, Y+1	; 0x01
    1284:	28 2f       	mov	r18, r24
    1286:	30 e0       	ldi	r19, 0x00	; 0
    1288:	3c 83       	std	Y+4, r19	; 0x04
    128a:	2b 83       	std	Y+3, r18	; 0x03
    128c:	8b 81       	ldd	r24, Y+3	; 0x03
    128e:	9c 81       	ldd	r25, Y+4	; 0x04
    1290:	81 30       	cpi	r24, 0x01	; 1
    1292:	91 05       	cpc	r25, r1
    1294:	d1 f0       	breq	.+52     	; 0x12ca <GPIO_setupPortDirection+0x5e>
    1296:	2b 81       	ldd	r18, Y+3	; 0x03
    1298:	3c 81       	ldd	r19, Y+4	; 0x04
    129a:	22 30       	cpi	r18, 0x02	; 2
    129c:	31 05       	cpc	r19, r1
    129e:	2c f4       	brge	.+10     	; 0x12aa <GPIO_setupPortDirection+0x3e>
    12a0:	8b 81       	ldd	r24, Y+3	; 0x03
    12a2:	9c 81       	ldd	r25, Y+4	; 0x04
    12a4:	00 97       	sbiw	r24, 0x00	; 0
    12a6:	61 f0       	breq	.+24     	; 0x12c0 <GPIO_setupPortDirection+0x54>
    12a8:	1e c0       	rjmp	.+60     	; 0x12e6 <GPIO_setupPortDirection+0x7a>
    12aa:	2b 81       	ldd	r18, Y+3	; 0x03
    12ac:	3c 81       	ldd	r19, Y+4	; 0x04
    12ae:	22 30       	cpi	r18, 0x02	; 2
    12b0:	31 05       	cpc	r19, r1
    12b2:	81 f0       	breq	.+32     	; 0x12d4 <GPIO_setupPortDirection+0x68>
    12b4:	8b 81       	ldd	r24, Y+3	; 0x03
    12b6:	9c 81       	ldd	r25, Y+4	; 0x04
    12b8:	83 30       	cpi	r24, 0x03	; 3
    12ba:	91 05       	cpc	r25, r1
    12bc:	81 f0       	breq	.+32     	; 0x12de <GPIO_setupPortDirection+0x72>
    12be:	13 c0       	rjmp	.+38     	; 0x12e6 <GPIO_setupPortDirection+0x7a>
		{
		case PORTA_ID:
			DDRA = direction;
    12c0:	ea e3       	ldi	r30, 0x3A	; 58
    12c2:	f0 e0       	ldi	r31, 0x00	; 0
    12c4:	8a 81       	ldd	r24, Y+2	; 0x02
    12c6:	80 83       	st	Z, r24
    12c8:	0e c0       	rjmp	.+28     	; 0x12e6 <GPIO_setupPortDirection+0x7a>
			break;
		case PORTB_ID:
			DDRB = direction;
    12ca:	e7 e3       	ldi	r30, 0x37	; 55
    12cc:	f0 e0       	ldi	r31, 0x00	; 0
    12ce:	8a 81       	ldd	r24, Y+2	; 0x02
    12d0:	80 83       	st	Z, r24
    12d2:	09 c0       	rjmp	.+18     	; 0x12e6 <GPIO_setupPortDirection+0x7a>
			break;
		case PORTC_ID:
			DDRC = direction;
    12d4:	e4 e3       	ldi	r30, 0x34	; 52
    12d6:	f0 e0       	ldi	r31, 0x00	; 0
    12d8:	8a 81       	ldd	r24, Y+2	; 0x02
    12da:	80 83       	st	Z, r24
    12dc:	04 c0       	rjmp	.+8      	; 0x12e6 <GPIO_setupPortDirection+0x7a>
			break;
		case PORTD_ID:
			DDRD = direction;
    12de:	e1 e3       	ldi	r30, 0x31	; 49
    12e0:	f0 e0       	ldi	r31, 0x00	; 0
    12e2:	8a 81       	ldd	r24, Y+2	; 0x02
    12e4:	80 83       	st	Z, r24
			break;
		}
	}
}
    12e6:	0f 90       	pop	r0
    12e8:	0f 90       	pop	r0
    12ea:	0f 90       	pop	r0
    12ec:	0f 90       	pop	r0
    12ee:	cf 91       	pop	r28
    12f0:	df 91       	pop	r29
    12f2:	08 95       	ret

000012f4 <GPIO_writePort>:
 * If any pin in the port is output pin the value will be written.
 * If any pin in the port is input pin this will activate/deactivate the internal pull-up resistor.
 * If the input port number is not correct, The function will not handle the request.
 */
void GPIO_writePort(uint8 port_num, uint8 value)
{
    12f4:	df 93       	push	r29
    12f6:	cf 93       	push	r28
    12f8:	00 d0       	rcall	.+0      	; 0x12fa <GPIO_writePort+0x6>
    12fa:	00 d0       	rcall	.+0      	; 0x12fc <GPIO_writePort+0x8>
    12fc:	cd b7       	in	r28, 0x3d	; 61
    12fe:	de b7       	in	r29, 0x3e	; 62
    1300:	89 83       	std	Y+1, r24	; 0x01
    1302:	6a 83       	std	Y+2, r22	; 0x02
	/*
	 * Check if the input number is greater than NUM_OF_PORTS value.
	 * In this case the input is not valid port number
	 */
	if(port_num >= NUM_OF_PORTS)
    1304:	89 81       	ldd	r24, Y+1	; 0x01
    1306:	84 30       	cpi	r24, 0x04	; 4
    1308:	90 f5       	brcc	.+100    	; 0x136e <GPIO_writePort+0x7a>
		/* Do Nothing */
	}
	else
	{
		/* Write the port value as required */
		switch(port_num)
    130a:	89 81       	ldd	r24, Y+1	; 0x01
    130c:	28 2f       	mov	r18, r24
    130e:	30 e0       	ldi	r19, 0x00	; 0
    1310:	3c 83       	std	Y+4, r19	; 0x04
    1312:	2b 83       	std	Y+3, r18	; 0x03
    1314:	8b 81       	ldd	r24, Y+3	; 0x03
    1316:	9c 81       	ldd	r25, Y+4	; 0x04
    1318:	81 30       	cpi	r24, 0x01	; 1
    131a:	91 05       	cpc	r25, r1
    131c:	d1 f0       	breq	.+52     	; 0x1352 <GPIO_writePort+0x5e>
    131e:	2b 81       	ldd	r18, Y+3	; 0x03
    1320:	3c 81       	ldd	r19, Y+4	; 0x04
    1322:	22 30       	cpi	r18, 0x02	; 2
    1324:	31 05       	cpc	r19, r1
    1326:	2c f4       	brge	.+10     	; 0x1332 <GPIO_writePort+0x3e>
    1328:	8b 81       	ldd	r24, Y+3	; 0x03
    132a:	9c 81       	ldd	r25, Y+4	; 0x04
    132c:	00 97       	sbiw	r24, 0x00	; 0
    132e:	61 f0       	breq	.+24     	; 0x1348 <GPIO_writePort+0x54>
    1330:	1e c0       	rjmp	.+60     	; 0x136e <GPIO_writePort+0x7a>
    1332:	2b 81       	ldd	r18, Y+3	; 0x03
    1334:	3c 81       	ldd	r19, Y+4	; 0x04
    1336:	22 30       	cpi	r18, 0x02	; 2
    1338:	31 05       	cpc	r19, r1
    133a:	81 f0       	breq	.+32     	; 0x135c <GPIO_writePort+0x68>
    133c:	8b 81       	ldd	r24, Y+3	; 0x03
    133e:	9c 81       	ldd	r25, Y+4	; 0x04
    1340:	83 30       	cpi	r24, 0x03	; 3
    1342:	91 05       	cpc	r25, r1
    1344:	81 f0       	breq	.+32     	; 0x1366 <GPIO_writePort+0x72>
    1346:	13 c0       	rjmp	.+38     	; 0x136e <GPIO_writePort+0x7a>
		{
		case PORTA_ID:
			PORTA = value;
    1348:	eb e3       	ldi	r30, 0x3B	; 59
    134a:	f0 e0       	ldi	r31, 0x00	; 0
    134c:	8a 81       	ldd	r24, Y+2	; 0x02
    134e:	80 83       	st	Z, r24
    1350:	0e c0       	rjmp	.+28     	; 0x136e <GPIO_writePort+0x7a>
			break;
		case PORTB_ID:
			PORTB = value;
    1352:	e8 e3       	ldi	r30, 0x38	; 56
    1354:	f0 e0       	ldi	r31, 0x00	; 0
    1356:	8a 81       	ldd	r24, Y+2	; 0x02
    1358:	80 83       	st	Z, r24
    135a:	09 c0       	rjmp	.+18     	; 0x136e <GPIO_writePort+0x7a>
			break;
		case PORTC_ID:
			PORTC = value;
    135c:	e5 e3       	ldi	r30, 0x35	; 53
    135e:	f0 e0       	ldi	r31, 0x00	; 0
    1360:	8a 81       	ldd	r24, Y+2	; 0x02
    1362:	80 83       	st	Z, r24
    1364:	04 c0       	rjmp	.+8      	; 0x136e <GPIO_writePort+0x7a>
			break;
		case PORTD_ID:
			PORTD = value;
    1366:	e2 e3       	ldi	r30, 0x32	; 50
    1368:	f0 e0       	ldi	r31, 0x00	; 0
    136a:	8a 81       	ldd	r24, Y+2	; 0x02
    136c:	80 83       	st	Z, r24
			break;
		}
	}
}
    136e:	0f 90       	pop	r0
    1370:	0f 90       	pop	r0
    1372:	0f 90       	pop	r0
    1374:	0f 90       	pop	r0
    1376:	cf 91       	pop	r28
    1378:	df 91       	pop	r29
    137a:	08 95       	ret

0000137c <GPIO_readPort>:
 * Description :
 * Read and return the value of the required port.
 * If the input port number is not correct, The function will return ZERO value.
 */
uint8 GPIO_readPort(uint8 port_num)
{
    137c:	df 93       	push	r29
    137e:	cf 93       	push	r28
    1380:	00 d0       	rcall	.+0      	; 0x1382 <GPIO_readPort+0x6>
    1382:	00 d0       	rcall	.+0      	; 0x1384 <GPIO_readPort+0x8>
    1384:	cd b7       	in	r28, 0x3d	; 61
    1386:	de b7       	in	r29, 0x3e	; 62
    1388:	8a 83       	std	Y+2, r24	; 0x02
	uint8 value = LOGIC_LOW;
    138a:	19 82       	std	Y+1, r1	; 0x01

	/*
	 * Check if the input number is greater than NUM_OF_PORTS value.
	 * In this case the input is not valid port number
	 */
	if(port_num >= NUM_OF_PORTS)
    138c:	8a 81       	ldd	r24, Y+2	; 0x02
    138e:	84 30       	cpi	r24, 0x04	; 4
    1390:	90 f5       	brcc	.+100    	; 0x13f6 <GPIO_readPort+0x7a>
		/* Do Nothing */
	}
	else
	{
		/* Read the port value as required */
		switch(port_num)
    1392:	8a 81       	ldd	r24, Y+2	; 0x02
    1394:	28 2f       	mov	r18, r24
    1396:	30 e0       	ldi	r19, 0x00	; 0
    1398:	3c 83       	std	Y+4, r19	; 0x04
    139a:	2b 83       	std	Y+3, r18	; 0x03
    139c:	8b 81       	ldd	r24, Y+3	; 0x03
    139e:	9c 81       	ldd	r25, Y+4	; 0x04
    13a0:	81 30       	cpi	r24, 0x01	; 1
    13a2:	91 05       	cpc	r25, r1
    13a4:	d1 f0       	breq	.+52     	; 0x13da <GPIO_readPort+0x5e>
    13a6:	2b 81       	ldd	r18, Y+3	; 0x03
    13a8:	3c 81       	ldd	r19, Y+4	; 0x04
    13aa:	22 30       	cpi	r18, 0x02	; 2
    13ac:	31 05       	cpc	r19, r1
    13ae:	2c f4       	brge	.+10     	; 0x13ba <GPIO_readPort+0x3e>
    13b0:	8b 81       	ldd	r24, Y+3	; 0x03
    13b2:	9c 81       	ldd	r25, Y+4	; 0x04
    13b4:	00 97       	sbiw	r24, 0x00	; 0
    13b6:	61 f0       	breq	.+24     	; 0x13d0 <GPIO_readPort+0x54>
    13b8:	1e c0       	rjmp	.+60     	; 0x13f6 <GPIO_readPort+0x7a>
    13ba:	2b 81       	ldd	r18, Y+3	; 0x03
    13bc:	3c 81       	ldd	r19, Y+4	; 0x04
    13be:	22 30       	cpi	r18, 0x02	; 2
    13c0:	31 05       	cpc	r19, r1
    13c2:	81 f0       	breq	.+32     	; 0x13e4 <GPIO_readPort+0x68>
    13c4:	8b 81       	ldd	r24, Y+3	; 0x03
    13c6:	9c 81       	ldd	r25, Y+4	; 0x04
    13c8:	83 30       	cpi	r24, 0x03	; 3
    13ca:	91 05       	cpc	r25, r1
    13cc:	81 f0       	breq	.+32     	; 0x13ee <GPIO_readPort+0x72>
    13ce:	13 c0       	rjmp	.+38     	; 0x13f6 <GPIO_readPort+0x7a>
		{
		case PORTA_ID:
			value = PINA;
    13d0:	e9 e3       	ldi	r30, 0x39	; 57
    13d2:	f0 e0       	ldi	r31, 0x00	; 0
    13d4:	80 81       	ld	r24, Z
    13d6:	89 83       	std	Y+1, r24	; 0x01
    13d8:	0e c0       	rjmp	.+28     	; 0x13f6 <GPIO_readPort+0x7a>
			break;
		case PORTB_ID:
			value = PINB;
    13da:	e6 e3       	ldi	r30, 0x36	; 54
    13dc:	f0 e0       	ldi	r31, 0x00	; 0
    13de:	80 81       	ld	r24, Z
    13e0:	89 83       	std	Y+1, r24	; 0x01
    13e2:	09 c0       	rjmp	.+18     	; 0x13f6 <GPIO_readPort+0x7a>
			break;
		case PORTC_ID:
			value = PINC;
    13e4:	e3 e3       	ldi	r30, 0x33	; 51
    13e6:	f0 e0       	ldi	r31, 0x00	; 0
    13e8:	80 81       	ld	r24, Z
    13ea:	89 83       	std	Y+1, r24	; 0x01
    13ec:	04 c0       	rjmp	.+8      	; 0x13f6 <GPIO_readPort+0x7a>
			break;
		case PORTD_ID:
			value = PIND;
    13ee:	e0 e3       	ldi	r30, 0x30	; 48
    13f0:	f0 e0       	ldi	r31, 0x00	; 0
    13f2:	80 81       	ld	r24, Z
    13f4:	89 83       	std	Y+1, r24	; 0x01
			break;
		}
	}

	return value;
    13f6:	89 81       	ldd	r24, Y+1	; 0x01
}
    13f8:	0f 90       	pop	r0
    13fa:	0f 90       	pop	r0
    13fc:	0f 90       	pop	r0
    13fe:	0f 90       	pop	r0
    1400:	cf 91       	pop	r28
    1402:	df 91       	pop	r29
    1404:	08 95       	ret

00001406 <LCD_init>:




void LCD_init(void)
{
    1406:	df 93       	push	r29
    1408:	cf 93       	push	r28
    140a:	cd b7       	in	r28, 0x3d	; 61
    140c:	de b7       	in	r29, 0x3e	; 62
	/* Configure the direction for RS, RW and E pins as output pins */
	GPIO_setupPinDirection(RS_PORT_ID,RS_PIN_ID,PIN_OUTPUT);
    140e:	83 e0       	ldi	r24, 0x03	; 3
    1410:	64 e0       	ldi	r22, 0x04	; 4
    1412:	41 e0       	ldi	r20, 0x01	; 1
    1414:	0e 94 c5 06 	call	0xd8a	; 0xd8a <GPIO_setupPinDirection>
	GPIO_setupPinDirection(RW_PORT_ID,RW_PIN_ID,PIN_OUTPUT);
    1418:	83 e0       	ldi	r24, 0x03	; 3
    141a:	65 e0       	ldi	r22, 0x05	; 5
    141c:	41 e0       	ldi	r20, 0x01	; 1
    141e:	0e 94 c5 06 	call	0xd8a	; 0xd8a <GPIO_setupPinDirection>
	GPIO_setupPinDirection(EN_PORT_ID,EN_PIN_ID,PIN_OUTPUT);
    1422:	83 e0       	ldi	r24, 0x03	; 3
    1424:	66 e0       	ldi	r22, 0x06	; 6
    1426:	41 e0       	ldi	r20, 0x01	; 1
    1428:	0e 94 c5 06 	call	0xd8a	; 0xd8a <GPIO_setupPinDirection>

	/* Configure the data port as output port */
	GPIO_setupPortDirection(LCD_DATA_PORT,PORT_OUTPUT);
    142c:	82 e0       	ldi	r24, 0x02	; 2
    142e:	6f ef       	ldi	r22, 0xFF	; 255
    1430:	0e 94 36 09 	call	0x126c	; 0x126c <GPIO_setupPortDirection>

	LCD_sendCommand(LCD_TWO_LINES_EIGHT_BITS_MODE);  /* use 2-line lcd + 8-bit Data Mode + 5*7 dot display Mode */
    1434:	88 e3       	ldi	r24, 0x38	; 56
    1436:	0e 94 26 0a 	call	0x144c	; 0x144c <LCD_sendCommand>
	LCD_sendCommand(LCD_CURSOR_OFF); /* cursor off */
    143a:	8c e0       	ldi	r24, 0x0C	; 12
    143c:	0e 94 26 0a 	call	0x144c	; 0x144c <LCD_sendCommand>
	LCD_sendCommand(LCD_CLEAR_COMMAND); /* clear LCD at the beginning */}
    1440:	81 e0       	ldi	r24, 0x01	; 1
    1442:	0e 94 26 0a 	call	0x144c	; 0x144c <LCD_sendCommand>
    1446:	cf 91       	pop	r28
    1448:	df 91       	pop	r29
    144a:	08 95       	ret

0000144c <LCD_sendCommand>:
/*
 * Description :
 * Send the required command to the screen
 */
void LCD_sendCommand(uint8 command)
{
    144c:	df 93       	push	r29
    144e:	cf 93       	push	r28
    1450:	cd b7       	in	r28, 0x3d	; 61
    1452:	de b7       	in	r29, 0x3e	; 62
    1454:	e9 97       	sbiw	r28, 0x39	; 57
    1456:	0f b6       	in	r0, 0x3f	; 63
    1458:	f8 94       	cli
    145a:	de bf       	out	0x3e, r29	; 62
    145c:	0f be       	out	0x3f, r0	; 63
    145e:	cd bf       	out	0x3d, r28	; 61
    1460:	89 af       	std	Y+57, r24	; 0x39
	GPIO_writePin(RS_PORT_ID,RS_PIN_ID,LOGIC_LOW);
    1462:	83 e0       	ldi	r24, 0x03	; 3
    1464:	64 e0       	ldi	r22, 0x04	; 4
    1466:	40 e0       	ldi	r20, 0x00	; 0
    1468:	0e 94 b0 07 	call	0xf60	; 0xf60 <GPIO_writePin>

	GPIO_writePin(RW_PORT_ID,RW_PIN_ID,LOGIC_LOW);
    146c:	83 e0       	ldi	r24, 0x03	; 3
    146e:	65 e0       	ldi	r22, 0x05	; 5
    1470:	40 e0       	ldi	r20, 0x00	; 0
    1472:	0e 94 b0 07 	call	0xf60	; 0xf60 <GPIO_writePin>
    1476:	80 e0       	ldi	r24, 0x00	; 0
    1478:	90 e0       	ldi	r25, 0x00	; 0
    147a:	a0 e8       	ldi	r26, 0x80	; 128
    147c:	bf e3       	ldi	r27, 0x3F	; 63
    147e:	8d ab       	std	Y+53, r24	; 0x35
    1480:	9e ab       	std	Y+54, r25	; 0x36
    1482:	af ab       	std	Y+55, r26	; 0x37
    1484:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1486:	6d a9       	ldd	r22, Y+53	; 0x35
    1488:	7e a9       	ldd	r23, Y+54	; 0x36
    148a:	8f a9       	ldd	r24, Y+55	; 0x37
    148c:	98 ad       	ldd	r25, Y+56	; 0x38
    148e:	20 e0       	ldi	r18, 0x00	; 0
    1490:	30 e0       	ldi	r19, 0x00	; 0
    1492:	4a e7       	ldi	r20, 0x7A	; 122
    1494:	53 e4       	ldi	r21, 0x43	; 67
    1496:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    149a:	dc 01       	movw	r26, r24
    149c:	cb 01       	movw	r24, r22
    149e:	89 ab       	std	Y+49, r24	; 0x31
    14a0:	9a ab       	std	Y+50, r25	; 0x32
    14a2:	ab ab       	std	Y+51, r26	; 0x33
    14a4:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    14a6:	69 a9       	ldd	r22, Y+49	; 0x31
    14a8:	7a a9       	ldd	r23, Y+50	; 0x32
    14aa:	8b a9       	ldd	r24, Y+51	; 0x33
    14ac:	9c a9       	ldd	r25, Y+52	; 0x34
    14ae:	20 e0       	ldi	r18, 0x00	; 0
    14b0:	30 e0       	ldi	r19, 0x00	; 0
    14b2:	40 e8       	ldi	r20, 0x80	; 128
    14b4:	5f e3       	ldi	r21, 0x3F	; 63
    14b6:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    14ba:	88 23       	and	r24, r24
    14bc:	2c f4       	brge	.+10     	; 0x14c8 <LCD_sendCommand+0x7c>
		__ticks = 1;
    14be:	81 e0       	ldi	r24, 0x01	; 1
    14c0:	90 e0       	ldi	r25, 0x00	; 0
    14c2:	98 ab       	std	Y+48, r25	; 0x30
    14c4:	8f a7       	std	Y+47, r24	; 0x2f
    14c6:	3f c0       	rjmp	.+126    	; 0x1546 <LCD_sendCommand+0xfa>
	else if (__tmp > 65535)
    14c8:	69 a9       	ldd	r22, Y+49	; 0x31
    14ca:	7a a9       	ldd	r23, Y+50	; 0x32
    14cc:	8b a9       	ldd	r24, Y+51	; 0x33
    14ce:	9c a9       	ldd	r25, Y+52	; 0x34
    14d0:	20 e0       	ldi	r18, 0x00	; 0
    14d2:	3f ef       	ldi	r19, 0xFF	; 255
    14d4:	4f e7       	ldi	r20, 0x7F	; 127
    14d6:	57 e4       	ldi	r21, 0x47	; 71
    14d8:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    14dc:	18 16       	cp	r1, r24
    14de:	4c f5       	brge	.+82     	; 0x1532 <LCD_sendCommand+0xe6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    14e0:	6d a9       	ldd	r22, Y+53	; 0x35
    14e2:	7e a9       	ldd	r23, Y+54	; 0x36
    14e4:	8f a9       	ldd	r24, Y+55	; 0x37
    14e6:	98 ad       	ldd	r25, Y+56	; 0x38
    14e8:	20 e0       	ldi	r18, 0x00	; 0
    14ea:	30 e0       	ldi	r19, 0x00	; 0
    14ec:	40 e2       	ldi	r20, 0x20	; 32
    14ee:	51 e4       	ldi	r21, 0x41	; 65
    14f0:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    14f4:	dc 01       	movw	r26, r24
    14f6:	cb 01       	movw	r24, r22
    14f8:	bc 01       	movw	r22, r24
    14fa:	cd 01       	movw	r24, r26
    14fc:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1500:	dc 01       	movw	r26, r24
    1502:	cb 01       	movw	r24, r22
    1504:	98 ab       	std	Y+48, r25	; 0x30
    1506:	8f a7       	std	Y+47, r24	; 0x2f
    1508:	0f c0       	rjmp	.+30     	; 0x1528 <LCD_sendCommand+0xdc>
    150a:	89 e1       	ldi	r24, 0x19	; 25
    150c:	90 e0       	ldi	r25, 0x00	; 0
    150e:	9e a7       	std	Y+46, r25	; 0x2e
    1510:	8d a7       	std	Y+45, r24	; 0x2d
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    1512:	8d a5       	ldd	r24, Y+45	; 0x2d
    1514:	9e a5       	ldd	r25, Y+46	; 0x2e
    1516:	01 97       	sbiw	r24, 0x01	; 1
    1518:	f1 f7       	brne	.-4      	; 0x1516 <LCD_sendCommand+0xca>
    151a:	9e a7       	std	Y+46, r25	; 0x2e
    151c:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    151e:	8f a5       	ldd	r24, Y+47	; 0x2f
    1520:	98 a9       	ldd	r25, Y+48	; 0x30
    1522:	01 97       	sbiw	r24, 0x01	; 1
    1524:	98 ab       	std	Y+48, r25	; 0x30
    1526:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1528:	8f a5       	ldd	r24, Y+47	; 0x2f
    152a:	98 a9       	ldd	r25, Y+48	; 0x30
    152c:	00 97       	sbiw	r24, 0x00	; 0
    152e:	69 f7       	brne	.-38     	; 0x150a <LCD_sendCommand+0xbe>
    1530:	14 c0       	rjmp	.+40     	; 0x155a <LCD_sendCommand+0x10e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1532:	69 a9       	ldd	r22, Y+49	; 0x31
    1534:	7a a9       	ldd	r23, Y+50	; 0x32
    1536:	8b a9       	ldd	r24, Y+51	; 0x33
    1538:	9c a9       	ldd	r25, Y+52	; 0x34
    153a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    153e:	dc 01       	movw	r26, r24
    1540:	cb 01       	movw	r24, r22
    1542:	98 ab       	std	Y+48, r25	; 0x30
    1544:	8f a7       	std	Y+47, r24	; 0x2f
    1546:	8f a5       	ldd	r24, Y+47	; 0x2f
    1548:	98 a9       	ldd	r25, Y+48	; 0x30
    154a:	9c a7       	std	Y+44, r25	; 0x2c
    154c:	8b a7       	std	Y+43, r24	; 0x2b
    154e:	8b a5       	ldd	r24, Y+43	; 0x2b
    1550:	9c a5       	ldd	r25, Y+44	; 0x2c
    1552:	01 97       	sbiw	r24, 0x01	; 1
    1554:	f1 f7       	brne	.-4      	; 0x1552 <LCD_sendCommand+0x106>
    1556:	9c a7       	std	Y+44, r25	; 0x2c
    1558:	8b a7       	std	Y+43, r24	; 0x2b

	_delay_ms(1); /* delay for processing Tas = 50ns */

	GPIO_writePin(EN_PORT_ID,EN_PIN_ID,LOGIC_HIGH); /* Enable LCD E=1 */
    155a:	83 e0       	ldi	r24, 0x03	; 3
    155c:	66 e0       	ldi	r22, 0x06	; 6
    155e:	41 e0       	ldi	r20, 0x01	; 1
    1560:	0e 94 b0 07 	call	0xf60	; 0xf60 <GPIO_writePin>
    1564:	80 e0       	ldi	r24, 0x00	; 0
    1566:	90 e0       	ldi	r25, 0x00	; 0
    1568:	a0 e8       	ldi	r26, 0x80	; 128
    156a:	bf e3       	ldi	r27, 0x3F	; 63
    156c:	8f a3       	std	Y+39, r24	; 0x27
    156e:	98 a7       	std	Y+40, r25	; 0x28
    1570:	a9 a7       	std	Y+41, r26	; 0x29
    1572:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1574:	6f a1       	ldd	r22, Y+39	; 0x27
    1576:	78 a5       	ldd	r23, Y+40	; 0x28
    1578:	89 a5       	ldd	r24, Y+41	; 0x29
    157a:	9a a5       	ldd	r25, Y+42	; 0x2a
    157c:	20 e0       	ldi	r18, 0x00	; 0
    157e:	30 e0       	ldi	r19, 0x00	; 0
    1580:	4a e7       	ldi	r20, 0x7A	; 122
    1582:	53 e4       	ldi	r21, 0x43	; 67
    1584:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1588:	dc 01       	movw	r26, r24
    158a:	cb 01       	movw	r24, r22
    158c:	8b a3       	std	Y+35, r24	; 0x23
    158e:	9c a3       	std	Y+36, r25	; 0x24
    1590:	ad a3       	std	Y+37, r26	; 0x25
    1592:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    1594:	6b a1       	ldd	r22, Y+35	; 0x23
    1596:	7c a1       	ldd	r23, Y+36	; 0x24
    1598:	8d a1       	ldd	r24, Y+37	; 0x25
    159a:	9e a1       	ldd	r25, Y+38	; 0x26
    159c:	20 e0       	ldi	r18, 0x00	; 0
    159e:	30 e0       	ldi	r19, 0x00	; 0
    15a0:	40 e8       	ldi	r20, 0x80	; 128
    15a2:	5f e3       	ldi	r21, 0x3F	; 63
    15a4:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    15a8:	88 23       	and	r24, r24
    15aa:	2c f4       	brge	.+10     	; 0x15b6 <LCD_sendCommand+0x16a>
		__ticks = 1;
    15ac:	81 e0       	ldi	r24, 0x01	; 1
    15ae:	90 e0       	ldi	r25, 0x00	; 0
    15b0:	9a a3       	std	Y+34, r25	; 0x22
    15b2:	89 a3       	std	Y+33, r24	; 0x21
    15b4:	3f c0       	rjmp	.+126    	; 0x1634 <LCD_sendCommand+0x1e8>
	else if (__tmp > 65535)
    15b6:	6b a1       	ldd	r22, Y+35	; 0x23
    15b8:	7c a1       	ldd	r23, Y+36	; 0x24
    15ba:	8d a1       	ldd	r24, Y+37	; 0x25
    15bc:	9e a1       	ldd	r25, Y+38	; 0x26
    15be:	20 e0       	ldi	r18, 0x00	; 0
    15c0:	3f ef       	ldi	r19, 0xFF	; 255
    15c2:	4f e7       	ldi	r20, 0x7F	; 127
    15c4:	57 e4       	ldi	r21, 0x47	; 71
    15c6:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    15ca:	18 16       	cp	r1, r24
    15cc:	4c f5       	brge	.+82     	; 0x1620 <LCD_sendCommand+0x1d4>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    15ce:	6f a1       	ldd	r22, Y+39	; 0x27
    15d0:	78 a5       	ldd	r23, Y+40	; 0x28
    15d2:	89 a5       	ldd	r24, Y+41	; 0x29
    15d4:	9a a5       	ldd	r25, Y+42	; 0x2a
    15d6:	20 e0       	ldi	r18, 0x00	; 0
    15d8:	30 e0       	ldi	r19, 0x00	; 0
    15da:	40 e2       	ldi	r20, 0x20	; 32
    15dc:	51 e4       	ldi	r21, 0x41	; 65
    15de:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    15e2:	dc 01       	movw	r26, r24
    15e4:	cb 01       	movw	r24, r22
    15e6:	bc 01       	movw	r22, r24
    15e8:	cd 01       	movw	r24, r26
    15ea:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    15ee:	dc 01       	movw	r26, r24
    15f0:	cb 01       	movw	r24, r22
    15f2:	9a a3       	std	Y+34, r25	; 0x22
    15f4:	89 a3       	std	Y+33, r24	; 0x21
    15f6:	0f c0       	rjmp	.+30     	; 0x1616 <LCD_sendCommand+0x1ca>
    15f8:	89 e1       	ldi	r24, 0x19	; 25
    15fa:	90 e0       	ldi	r25, 0x00	; 0
    15fc:	98 a3       	std	Y+32, r25	; 0x20
    15fe:	8f 8f       	std	Y+31, r24	; 0x1f
    1600:	8f 8d       	ldd	r24, Y+31	; 0x1f
    1602:	98 a1       	ldd	r25, Y+32	; 0x20
    1604:	01 97       	sbiw	r24, 0x01	; 1
    1606:	f1 f7       	brne	.-4      	; 0x1604 <LCD_sendCommand+0x1b8>
    1608:	98 a3       	std	Y+32, r25	; 0x20
    160a:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    160c:	89 a1       	ldd	r24, Y+33	; 0x21
    160e:	9a a1       	ldd	r25, Y+34	; 0x22
    1610:	01 97       	sbiw	r24, 0x01	; 1
    1612:	9a a3       	std	Y+34, r25	; 0x22
    1614:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1616:	89 a1       	ldd	r24, Y+33	; 0x21
    1618:	9a a1       	ldd	r25, Y+34	; 0x22
    161a:	00 97       	sbiw	r24, 0x00	; 0
    161c:	69 f7       	brne	.-38     	; 0x15f8 <LCD_sendCommand+0x1ac>
    161e:	14 c0       	rjmp	.+40     	; 0x1648 <LCD_sendCommand+0x1fc>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1620:	6b a1       	ldd	r22, Y+35	; 0x23
    1622:	7c a1       	ldd	r23, Y+36	; 0x24
    1624:	8d a1       	ldd	r24, Y+37	; 0x25
    1626:	9e a1       	ldd	r25, Y+38	; 0x26
    1628:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    162c:	dc 01       	movw	r26, r24
    162e:	cb 01       	movw	r24, r22
    1630:	9a a3       	std	Y+34, r25	; 0x22
    1632:	89 a3       	std	Y+33, r24	; 0x21
    1634:	89 a1       	ldd	r24, Y+33	; 0x21
    1636:	9a a1       	ldd	r25, Y+34	; 0x22
    1638:	9e 8f       	std	Y+30, r25	; 0x1e
    163a:	8d 8f       	std	Y+29, r24	; 0x1d
    163c:	8d 8d       	ldd	r24, Y+29	; 0x1d
    163e:	9e 8d       	ldd	r25, Y+30	; 0x1e
    1640:	01 97       	sbiw	r24, 0x01	; 1
    1642:	f1 f7       	brne	.-4      	; 0x1640 <LCD_sendCommand+0x1f4>
    1644:	9e 8f       	std	Y+30, r25	; 0x1e
    1646:	8d 8f       	std	Y+29, r24	; 0x1d

	_delay_ms(1); 	/* delay for processing Tpw - Tdws = 190ns */

	GPIO_writePort(LCD_DATA_PORT,command);
    1648:	82 e0       	ldi	r24, 0x02	; 2
    164a:	69 ad       	ldd	r22, Y+57	; 0x39
    164c:	0e 94 7a 09 	call	0x12f4	; 0x12f4 <GPIO_writePort>
    1650:	80 e0       	ldi	r24, 0x00	; 0
    1652:	90 e0       	ldi	r25, 0x00	; 0
    1654:	a0 e8       	ldi	r26, 0x80	; 128
    1656:	bf e3       	ldi	r27, 0x3F	; 63
    1658:	89 8f       	std	Y+25, r24	; 0x19
    165a:	9a 8f       	std	Y+26, r25	; 0x1a
    165c:	ab 8f       	std	Y+27, r26	; 0x1b
    165e:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1660:	69 8d       	ldd	r22, Y+25	; 0x19
    1662:	7a 8d       	ldd	r23, Y+26	; 0x1a
    1664:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1666:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1668:	20 e0       	ldi	r18, 0x00	; 0
    166a:	30 e0       	ldi	r19, 0x00	; 0
    166c:	4a e7       	ldi	r20, 0x7A	; 122
    166e:	53 e4       	ldi	r21, 0x43	; 67
    1670:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1674:	dc 01       	movw	r26, r24
    1676:	cb 01       	movw	r24, r22
    1678:	8d 8b       	std	Y+21, r24	; 0x15
    167a:	9e 8b       	std	Y+22, r25	; 0x16
    167c:	af 8b       	std	Y+23, r26	; 0x17
    167e:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    1680:	6d 89       	ldd	r22, Y+21	; 0x15
    1682:	7e 89       	ldd	r23, Y+22	; 0x16
    1684:	8f 89       	ldd	r24, Y+23	; 0x17
    1686:	98 8d       	ldd	r25, Y+24	; 0x18
    1688:	20 e0       	ldi	r18, 0x00	; 0
    168a:	30 e0       	ldi	r19, 0x00	; 0
    168c:	40 e8       	ldi	r20, 0x80	; 128
    168e:	5f e3       	ldi	r21, 0x3F	; 63
    1690:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1694:	88 23       	and	r24, r24
    1696:	2c f4       	brge	.+10     	; 0x16a2 <LCD_sendCommand+0x256>
		__ticks = 1;
    1698:	81 e0       	ldi	r24, 0x01	; 1
    169a:	90 e0       	ldi	r25, 0x00	; 0
    169c:	9c 8b       	std	Y+20, r25	; 0x14
    169e:	8b 8b       	std	Y+19, r24	; 0x13
    16a0:	3f c0       	rjmp	.+126    	; 0x1720 <LCD_sendCommand+0x2d4>
	else if (__tmp > 65535)
    16a2:	6d 89       	ldd	r22, Y+21	; 0x15
    16a4:	7e 89       	ldd	r23, Y+22	; 0x16
    16a6:	8f 89       	ldd	r24, Y+23	; 0x17
    16a8:	98 8d       	ldd	r25, Y+24	; 0x18
    16aa:	20 e0       	ldi	r18, 0x00	; 0
    16ac:	3f ef       	ldi	r19, 0xFF	; 255
    16ae:	4f e7       	ldi	r20, 0x7F	; 127
    16b0:	57 e4       	ldi	r21, 0x47	; 71
    16b2:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    16b6:	18 16       	cp	r1, r24
    16b8:	4c f5       	brge	.+82     	; 0x170c <LCD_sendCommand+0x2c0>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    16ba:	69 8d       	ldd	r22, Y+25	; 0x19
    16bc:	7a 8d       	ldd	r23, Y+26	; 0x1a
    16be:	8b 8d       	ldd	r24, Y+27	; 0x1b
    16c0:	9c 8d       	ldd	r25, Y+28	; 0x1c
    16c2:	20 e0       	ldi	r18, 0x00	; 0
    16c4:	30 e0       	ldi	r19, 0x00	; 0
    16c6:	40 e2       	ldi	r20, 0x20	; 32
    16c8:	51 e4       	ldi	r21, 0x41	; 65
    16ca:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    16ce:	dc 01       	movw	r26, r24
    16d0:	cb 01       	movw	r24, r22
    16d2:	bc 01       	movw	r22, r24
    16d4:	cd 01       	movw	r24, r26
    16d6:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    16da:	dc 01       	movw	r26, r24
    16dc:	cb 01       	movw	r24, r22
    16de:	9c 8b       	std	Y+20, r25	; 0x14
    16e0:	8b 8b       	std	Y+19, r24	; 0x13
    16e2:	0f c0       	rjmp	.+30     	; 0x1702 <LCD_sendCommand+0x2b6>
    16e4:	89 e1       	ldi	r24, 0x19	; 25
    16e6:	90 e0       	ldi	r25, 0x00	; 0
    16e8:	9a 8b       	std	Y+18, r25	; 0x12
    16ea:	89 8b       	std	Y+17, r24	; 0x11
    16ec:	89 89       	ldd	r24, Y+17	; 0x11
    16ee:	9a 89       	ldd	r25, Y+18	; 0x12
    16f0:	01 97       	sbiw	r24, 0x01	; 1
    16f2:	f1 f7       	brne	.-4      	; 0x16f0 <LCD_sendCommand+0x2a4>
    16f4:	9a 8b       	std	Y+18, r25	; 0x12
    16f6:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    16f8:	8b 89       	ldd	r24, Y+19	; 0x13
    16fa:	9c 89       	ldd	r25, Y+20	; 0x14
    16fc:	01 97       	sbiw	r24, 0x01	; 1
    16fe:	9c 8b       	std	Y+20, r25	; 0x14
    1700:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1702:	8b 89       	ldd	r24, Y+19	; 0x13
    1704:	9c 89       	ldd	r25, Y+20	; 0x14
    1706:	00 97       	sbiw	r24, 0x00	; 0
    1708:	69 f7       	brne	.-38     	; 0x16e4 <LCD_sendCommand+0x298>
    170a:	14 c0       	rjmp	.+40     	; 0x1734 <LCD_sendCommand+0x2e8>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    170c:	6d 89       	ldd	r22, Y+21	; 0x15
    170e:	7e 89       	ldd	r23, Y+22	; 0x16
    1710:	8f 89       	ldd	r24, Y+23	; 0x17
    1712:	98 8d       	ldd	r25, Y+24	; 0x18
    1714:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1718:	dc 01       	movw	r26, r24
    171a:	cb 01       	movw	r24, r22
    171c:	9c 8b       	std	Y+20, r25	; 0x14
    171e:	8b 8b       	std	Y+19, r24	; 0x13
    1720:	8b 89       	ldd	r24, Y+19	; 0x13
    1722:	9c 89       	ldd	r25, Y+20	; 0x14
    1724:	98 8b       	std	Y+16, r25	; 0x10
    1726:	8f 87       	std	Y+15, r24	; 0x0f
    1728:	8f 85       	ldd	r24, Y+15	; 0x0f
    172a:	98 89       	ldd	r25, Y+16	; 0x10
    172c:	01 97       	sbiw	r24, 0x01	; 1
    172e:	f1 f7       	brne	.-4      	; 0x172c <LCD_sendCommand+0x2e0>
    1730:	98 8b       	std	Y+16, r25	; 0x10
    1732:	8f 87       	std	Y+15, r24	; 0x0f

	_delay_ms(1); /* delay for processing Tdsw = 100ns */

	GPIO_writePin(EN_PORT_ID,EN_PIN_ID,LOGIC_LOW); /* Disable LCD E=0 */
    1734:	83 e0       	ldi	r24, 0x03	; 3
    1736:	66 e0       	ldi	r22, 0x06	; 6
    1738:	40 e0       	ldi	r20, 0x00	; 0
    173a:	0e 94 b0 07 	call	0xf60	; 0xf60 <GPIO_writePin>
    173e:	80 e0       	ldi	r24, 0x00	; 0
    1740:	90 e0       	ldi	r25, 0x00	; 0
    1742:	a0 e8       	ldi	r26, 0x80	; 128
    1744:	bf e3       	ldi	r27, 0x3F	; 63
    1746:	8b 87       	std	Y+11, r24	; 0x0b
    1748:	9c 87       	std	Y+12, r25	; 0x0c
    174a:	ad 87       	std	Y+13, r26	; 0x0d
    174c:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    174e:	6b 85       	ldd	r22, Y+11	; 0x0b
    1750:	7c 85       	ldd	r23, Y+12	; 0x0c
    1752:	8d 85       	ldd	r24, Y+13	; 0x0d
    1754:	9e 85       	ldd	r25, Y+14	; 0x0e
    1756:	20 e0       	ldi	r18, 0x00	; 0
    1758:	30 e0       	ldi	r19, 0x00	; 0
    175a:	4a e7       	ldi	r20, 0x7A	; 122
    175c:	53 e4       	ldi	r21, 0x43	; 67
    175e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1762:	dc 01       	movw	r26, r24
    1764:	cb 01       	movw	r24, r22
    1766:	8f 83       	std	Y+7, r24	; 0x07
    1768:	98 87       	std	Y+8, r25	; 0x08
    176a:	a9 87       	std	Y+9, r26	; 0x09
    176c:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    176e:	6f 81       	ldd	r22, Y+7	; 0x07
    1770:	78 85       	ldd	r23, Y+8	; 0x08
    1772:	89 85       	ldd	r24, Y+9	; 0x09
    1774:	9a 85       	ldd	r25, Y+10	; 0x0a
    1776:	20 e0       	ldi	r18, 0x00	; 0
    1778:	30 e0       	ldi	r19, 0x00	; 0
    177a:	40 e8       	ldi	r20, 0x80	; 128
    177c:	5f e3       	ldi	r21, 0x3F	; 63
    177e:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1782:	88 23       	and	r24, r24
    1784:	2c f4       	brge	.+10     	; 0x1790 <LCD_sendCommand+0x344>
		__ticks = 1;
    1786:	81 e0       	ldi	r24, 0x01	; 1
    1788:	90 e0       	ldi	r25, 0x00	; 0
    178a:	9e 83       	std	Y+6, r25	; 0x06
    178c:	8d 83       	std	Y+5, r24	; 0x05
    178e:	3f c0       	rjmp	.+126    	; 0x180e <LCD_sendCommand+0x3c2>
	else if (__tmp > 65535)
    1790:	6f 81       	ldd	r22, Y+7	; 0x07
    1792:	78 85       	ldd	r23, Y+8	; 0x08
    1794:	89 85       	ldd	r24, Y+9	; 0x09
    1796:	9a 85       	ldd	r25, Y+10	; 0x0a
    1798:	20 e0       	ldi	r18, 0x00	; 0
    179a:	3f ef       	ldi	r19, 0xFF	; 255
    179c:	4f e7       	ldi	r20, 0x7F	; 127
    179e:	57 e4       	ldi	r21, 0x47	; 71
    17a0:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    17a4:	18 16       	cp	r1, r24
    17a6:	4c f5       	brge	.+82     	; 0x17fa <LCD_sendCommand+0x3ae>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    17a8:	6b 85       	ldd	r22, Y+11	; 0x0b
    17aa:	7c 85       	ldd	r23, Y+12	; 0x0c
    17ac:	8d 85       	ldd	r24, Y+13	; 0x0d
    17ae:	9e 85       	ldd	r25, Y+14	; 0x0e
    17b0:	20 e0       	ldi	r18, 0x00	; 0
    17b2:	30 e0       	ldi	r19, 0x00	; 0
    17b4:	40 e2       	ldi	r20, 0x20	; 32
    17b6:	51 e4       	ldi	r21, 0x41	; 65
    17b8:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    17bc:	dc 01       	movw	r26, r24
    17be:	cb 01       	movw	r24, r22
    17c0:	bc 01       	movw	r22, r24
    17c2:	cd 01       	movw	r24, r26
    17c4:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    17c8:	dc 01       	movw	r26, r24
    17ca:	cb 01       	movw	r24, r22
    17cc:	9e 83       	std	Y+6, r25	; 0x06
    17ce:	8d 83       	std	Y+5, r24	; 0x05
    17d0:	0f c0       	rjmp	.+30     	; 0x17f0 <LCD_sendCommand+0x3a4>
    17d2:	89 e1       	ldi	r24, 0x19	; 25
    17d4:	90 e0       	ldi	r25, 0x00	; 0
    17d6:	9c 83       	std	Y+4, r25	; 0x04
    17d8:	8b 83       	std	Y+3, r24	; 0x03
    17da:	8b 81       	ldd	r24, Y+3	; 0x03
    17dc:	9c 81       	ldd	r25, Y+4	; 0x04
    17de:	01 97       	sbiw	r24, 0x01	; 1
    17e0:	f1 f7       	brne	.-4      	; 0x17de <LCD_sendCommand+0x392>
    17e2:	9c 83       	std	Y+4, r25	; 0x04
    17e4:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    17e6:	8d 81       	ldd	r24, Y+5	; 0x05
    17e8:	9e 81       	ldd	r25, Y+6	; 0x06
    17ea:	01 97       	sbiw	r24, 0x01	; 1
    17ec:	9e 83       	std	Y+6, r25	; 0x06
    17ee:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    17f0:	8d 81       	ldd	r24, Y+5	; 0x05
    17f2:	9e 81       	ldd	r25, Y+6	; 0x06
    17f4:	00 97       	sbiw	r24, 0x00	; 0
    17f6:	69 f7       	brne	.-38     	; 0x17d2 <LCD_sendCommand+0x386>
    17f8:	14 c0       	rjmp	.+40     	; 0x1822 <LCD_sendCommand+0x3d6>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    17fa:	6f 81       	ldd	r22, Y+7	; 0x07
    17fc:	78 85       	ldd	r23, Y+8	; 0x08
    17fe:	89 85       	ldd	r24, Y+9	; 0x09
    1800:	9a 85       	ldd	r25, Y+10	; 0x0a
    1802:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1806:	dc 01       	movw	r26, r24
    1808:	cb 01       	movw	r24, r22
    180a:	9e 83       	std	Y+6, r25	; 0x06
    180c:	8d 83       	std	Y+5, r24	; 0x05
    180e:	8d 81       	ldd	r24, Y+5	; 0x05
    1810:	9e 81       	ldd	r25, Y+6	; 0x06
    1812:	9a 83       	std	Y+2, r25	; 0x02
    1814:	89 83       	std	Y+1, r24	; 0x01
    1816:	89 81       	ldd	r24, Y+1	; 0x01
    1818:	9a 81       	ldd	r25, Y+2	; 0x02
    181a:	01 97       	sbiw	r24, 0x01	; 1
    181c:	f1 f7       	brne	.-4      	; 0x181a <LCD_sendCommand+0x3ce>
    181e:	9a 83       	std	Y+2, r25	; 0x02
    1820:	89 83       	std	Y+1, r24	; 0x01

	_delay_ms(1); /* delay for processing Th = 13ns */


}
    1822:	e9 96       	adiw	r28, 0x39	; 57
    1824:	0f b6       	in	r0, 0x3f	; 63
    1826:	f8 94       	cli
    1828:	de bf       	out	0x3e, r29	; 62
    182a:	0f be       	out	0x3f, r0	; 63
    182c:	cd bf       	out	0x3d, r28	; 61
    182e:	cf 91       	pop	r28
    1830:	df 91       	pop	r29
    1832:	08 95       	ret

00001834 <LCD_displayCharacter>:
/*
 * Description :
 * Display the required character on the screen
 */
void LCD_displayCharacter(uint8 data)
{
    1834:	df 93       	push	r29
    1836:	cf 93       	push	r28
    1838:	cd b7       	in	r28, 0x3d	; 61
    183a:	de b7       	in	r29, 0x3e	; 62
    183c:	e9 97       	sbiw	r28, 0x39	; 57
    183e:	0f b6       	in	r0, 0x3f	; 63
    1840:	f8 94       	cli
    1842:	de bf       	out	0x3e, r29	; 62
    1844:	0f be       	out	0x3f, r0	; 63
    1846:	cd bf       	out	0x3d, r28	; 61
    1848:	89 af       	std	Y+57, r24	; 0x39
	GPIO_writePin(RS_PORT_ID,RS_PIN_ID,LOGIC_HIGH);
    184a:	83 e0       	ldi	r24, 0x03	; 3
    184c:	64 e0       	ldi	r22, 0x04	; 4
    184e:	41 e0       	ldi	r20, 0x01	; 1
    1850:	0e 94 b0 07 	call	0xf60	; 0xf60 <GPIO_writePin>

	GPIO_writePin(RW_PORT_ID,RW_PIN_ID,LOGIC_LOW);
    1854:	83 e0       	ldi	r24, 0x03	; 3
    1856:	65 e0       	ldi	r22, 0x05	; 5
    1858:	40 e0       	ldi	r20, 0x00	; 0
    185a:	0e 94 b0 07 	call	0xf60	; 0xf60 <GPIO_writePin>
    185e:	80 e0       	ldi	r24, 0x00	; 0
    1860:	90 e0       	ldi	r25, 0x00	; 0
    1862:	a0 e8       	ldi	r26, 0x80	; 128
    1864:	bf e3       	ldi	r27, 0x3F	; 63
    1866:	8d ab       	std	Y+53, r24	; 0x35
    1868:	9e ab       	std	Y+54, r25	; 0x36
    186a:	af ab       	std	Y+55, r26	; 0x37
    186c:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    186e:	6d a9       	ldd	r22, Y+53	; 0x35
    1870:	7e a9       	ldd	r23, Y+54	; 0x36
    1872:	8f a9       	ldd	r24, Y+55	; 0x37
    1874:	98 ad       	ldd	r25, Y+56	; 0x38
    1876:	20 e0       	ldi	r18, 0x00	; 0
    1878:	30 e0       	ldi	r19, 0x00	; 0
    187a:	4a e7       	ldi	r20, 0x7A	; 122
    187c:	53 e4       	ldi	r21, 0x43	; 67
    187e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1882:	dc 01       	movw	r26, r24
    1884:	cb 01       	movw	r24, r22
    1886:	89 ab       	std	Y+49, r24	; 0x31
    1888:	9a ab       	std	Y+50, r25	; 0x32
    188a:	ab ab       	std	Y+51, r26	; 0x33
    188c:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    188e:	69 a9       	ldd	r22, Y+49	; 0x31
    1890:	7a a9       	ldd	r23, Y+50	; 0x32
    1892:	8b a9       	ldd	r24, Y+51	; 0x33
    1894:	9c a9       	ldd	r25, Y+52	; 0x34
    1896:	20 e0       	ldi	r18, 0x00	; 0
    1898:	30 e0       	ldi	r19, 0x00	; 0
    189a:	40 e8       	ldi	r20, 0x80	; 128
    189c:	5f e3       	ldi	r21, 0x3F	; 63
    189e:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    18a2:	88 23       	and	r24, r24
    18a4:	2c f4       	brge	.+10     	; 0x18b0 <LCD_displayCharacter+0x7c>
		__ticks = 1;
    18a6:	81 e0       	ldi	r24, 0x01	; 1
    18a8:	90 e0       	ldi	r25, 0x00	; 0
    18aa:	98 ab       	std	Y+48, r25	; 0x30
    18ac:	8f a7       	std	Y+47, r24	; 0x2f
    18ae:	3f c0       	rjmp	.+126    	; 0x192e <LCD_displayCharacter+0xfa>
	else if (__tmp > 65535)
    18b0:	69 a9       	ldd	r22, Y+49	; 0x31
    18b2:	7a a9       	ldd	r23, Y+50	; 0x32
    18b4:	8b a9       	ldd	r24, Y+51	; 0x33
    18b6:	9c a9       	ldd	r25, Y+52	; 0x34
    18b8:	20 e0       	ldi	r18, 0x00	; 0
    18ba:	3f ef       	ldi	r19, 0xFF	; 255
    18bc:	4f e7       	ldi	r20, 0x7F	; 127
    18be:	57 e4       	ldi	r21, 0x47	; 71
    18c0:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    18c4:	18 16       	cp	r1, r24
    18c6:	4c f5       	brge	.+82     	; 0x191a <LCD_displayCharacter+0xe6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    18c8:	6d a9       	ldd	r22, Y+53	; 0x35
    18ca:	7e a9       	ldd	r23, Y+54	; 0x36
    18cc:	8f a9       	ldd	r24, Y+55	; 0x37
    18ce:	98 ad       	ldd	r25, Y+56	; 0x38
    18d0:	20 e0       	ldi	r18, 0x00	; 0
    18d2:	30 e0       	ldi	r19, 0x00	; 0
    18d4:	40 e2       	ldi	r20, 0x20	; 32
    18d6:	51 e4       	ldi	r21, 0x41	; 65
    18d8:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    18dc:	dc 01       	movw	r26, r24
    18de:	cb 01       	movw	r24, r22
    18e0:	bc 01       	movw	r22, r24
    18e2:	cd 01       	movw	r24, r26
    18e4:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    18e8:	dc 01       	movw	r26, r24
    18ea:	cb 01       	movw	r24, r22
    18ec:	98 ab       	std	Y+48, r25	; 0x30
    18ee:	8f a7       	std	Y+47, r24	; 0x2f
    18f0:	0f c0       	rjmp	.+30     	; 0x1910 <LCD_displayCharacter+0xdc>
    18f2:	89 e1       	ldi	r24, 0x19	; 25
    18f4:	90 e0       	ldi	r25, 0x00	; 0
    18f6:	9e a7       	std	Y+46, r25	; 0x2e
    18f8:	8d a7       	std	Y+45, r24	; 0x2d
    18fa:	8d a5       	ldd	r24, Y+45	; 0x2d
    18fc:	9e a5       	ldd	r25, Y+46	; 0x2e
    18fe:	01 97       	sbiw	r24, 0x01	; 1
    1900:	f1 f7       	brne	.-4      	; 0x18fe <LCD_displayCharacter+0xca>
    1902:	9e a7       	std	Y+46, r25	; 0x2e
    1904:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1906:	8f a5       	ldd	r24, Y+47	; 0x2f
    1908:	98 a9       	ldd	r25, Y+48	; 0x30
    190a:	01 97       	sbiw	r24, 0x01	; 1
    190c:	98 ab       	std	Y+48, r25	; 0x30
    190e:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1910:	8f a5       	ldd	r24, Y+47	; 0x2f
    1912:	98 a9       	ldd	r25, Y+48	; 0x30
    1914:	00 97       	sbiw	r24, 0x00	; 0
    1916:	69 f7       	brne	.-38     	; 0x18f2 <LCD_displayCharacter+0xbe>
    1918:	14 c0       	rjmp	.+40     	; 0x1942 <LCD_displayCharacter+0x10e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    191a:	69 a9       	ldd	r22, Y+49	; 0x31
    191c:	7a a9       	ldd	r23, Y+50	; 0x32
    191e:	8b a9       	ldd	r24, Y+51	; 0x33
    1920:	9c a9       	ldd	r25, Y+52	; 0x34
    1922:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1926:	dc 01       	movw	r26, r24
    1928:	cb 01       	movw	r24, r22
    192a:	98 ab       	std	Y+48, r25	; 0x30
    192c:	8f a7       	std	Y+47, r24	; 0x2f
    192e:	8f a5       	ldd	r24, Y+47	; 0x2f
    1930:	98 a9       	ldd	r25, Y+48	; 0x30
    1932:	9c a7       	std	Y+44, r25	; 0x2c
    1934:	8b a7       	std	Y+43, r24	; 0x2b
    1936:	8b a5       	ldd	r24, Y+43	; 0x2b
    1938:	9c a5       	ldd	r25, Y+44	; 0x2c
    193a:	01 97       	sbiw	r24, 0x01	; 1
    193c:	f1 f7       	brne	.-4      	; 0x193a <LCD_displayCharacter+0x106>
    193e:	9c a7       	std	Y+44, r25	; 0x2c
    1940:	8b a7       	std	Y+43, r24	; 0x2b

	_delay_ms(1); /* delay for processing Tas = 50ns */

	GPIO_writePin(EN_PORT_ID,EN_PIN_ID,LOGIC_HIGH); /* Enable LCD E=1 */
    1942:	83 e0       	ldi	r24, 0x03	; 3
    1944:	66 e0       	ldi	r22, 0x06	; 6
    1946:	41 e0       	ldi	r20, 0x01	; 1
    1948:	0e 94 b0 07 	call	0xf60	; 0xf60 <GPIO_writePin>
    194c:	80 e0       	ldi	r24, 0x00	; 0
    194e:	90 e0       	ldi	r25, 0x00	; 0
    1950:	a0 e8       	ldi	r26, 0x80	; 128
    1952:	bf e3       	ldi	r27, 0x3F	; 63
    1954:	8f a3       	std	Y+39, r24	; 0x27
    1956:	98 a7       	std	Y+40, r25	; 0x28
    1958:	a9 a7       	std	Y+41, r26	; 0x29
    195a:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    195c:	6f a1       	ldd	r22, Y+39	; 0x27
    195e:	78 a5       	ldd	r23, Y+40	; 0x28
    1960:	89 a5       	ldd	r24, Y+41	; 0x29
    1962:	9a a5       	ldd	r25, Y+42	; 0x2a
    1964:	20 e0       	ldi	r18, 0x00	; 0
    1966:	30 e0       	ldi	r19, 0x00	; 0
    1968:	4a e7       	ldi	r20, 0x7A	; 122
    196a:	53 e4       	ldi	r21, 0x43	; 67
    196c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1970:	dc 01       	movw	r26, r24
    1972:	cb 01       	movw	r24, r22
    1974:	8b a3       	std	Y+35, r24	; 0x23
    1976:	9c a3       	std	Y+36, r25	; 0x24
    1978:	ad a3       	std	Y+37, r26	; 0x25
    197a:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    197c:	6b a1       	ldd	r22, Y+35	; 0x23
    197e:	7c a1       	ldd	r23, Y+36	; 0x24
    1980:	8d a1       	ldd	r24, Y+37	; 0x25
    1982:	9e a1       	ldd	r25, Y+38	; 0x26
    1984:	20 e0       	ldi	r18, 0x00	; 0
    1986:	30 e0       	ldi	r19, 0x00	; 0
    1988:	40 e8       	ldi	r20, 0x80	; 128
    198a:	5f e3       	ldi	r21, 0x3F	; 63
    198c:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1990:	88 23       	and	r24, r24
    1992:	2c f4       	brge	.+10     	; 0x199e <LCD_displayCharacter+0x16a>
		__ticks = 1;
    1994:	81 e0       	ldi	r24, 0x01	; 1
    1996:	90 e0       	ldi	r25, 0x00	; 0
    1998:	9a a3       	std	Y+34, r25	; 0x22
    199a:	89 a3       	std	Y+33, r24	; 0x21
    199c:	3f c0       	rjmp	.+126    	; 0x1a1c <LCD_displayCharacter+0x1e8>
	else if (__tmp > 65535)
    199e:	6b a1       	ldd	r22, Y+35	; 0x23
    19a0:	7c a1       	ldd	r23, Y+36	; 0x24
    19a2:	8d a1       	ldd	r24, Y+37	; 0x25
    19a4:	9e a1       	ldd	r25, Y+38	; 0x26
    19a6:	20 e0       	ldi	r18, 0x00	; 0
    19a8:	3f ef       	ldi	r19, 0xFF	; 255
    19aa:	4f e7       	ldi	r20, 0x7F	; 127
    19ac:	57 e4       	ldi	r21, 0x47	; 71
    19ae:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    19b2:	18 16       	cp	r1, r24
    19b4:	4c f5       	brge	.+82     	; 0x1a08 <LCD_displayCharacter+0x1d4>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    19b6:	6f a1       	ldd	r22, Y+39	; 0x27
    19b8:	78 a5       	ldd	r23, Y+40	; 0x28
    19ba:	89 a5       	ldd	r24, Y+41	; 0x29
    19bc:	9a a5       	ldd	r25, Y+42	; 0x2a
    19be:	20 e0       	ldi	r18, 0x00	; 0
    19c0:	30 e0       	ldi	r19, 0x00	; 0
    19c2:	40 e2       	ldi	r20, 0x20	; 32
    19c4:	51 e4       	ldi	r21, 0x41	; 65
    19c6:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    19ca:	dc 01       	movw	r26, r24
    19cc:	cb 01       	movw	r24, r22
    19ce:	bc 01       	movw	r22, r24
    19d0:	cd 01       	movw	r24, r26
    19d2:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    19d6:	dc 01       	movw	r26, r24
    19d8:	cb 01       	movw	r24, r22
    19da:	9a a3       	std	Y+34, r25	; 0x22
    19dc:	89 a3       	std	Y+33, r24	; 0x21
    19de:	0f c0       	rjmp	.+30     	; 0x19fe <LCD_displayCharacter+0x1ca>
    19e0:	89 e1       	ldi	r24, 0x19	; 25
    19e2:	90 e0       	ldi	r25, 0x00	; 0
    19e4:	98 a3       	std	Y+32, r25	; 0x20
    19e6:	8f 8f       	std	Y+31, r24	; 0x1f
    19e8:	8f 8d       	ldd	r24, Y+31	; 0x1f
    19ea:	98 a1       	ldd	r25, Y+32	; 0x20
    19ec:	01 97       	sbiw	r24, 0x01	; 1
    19ee:	f1 f7       	brne	.-4      	; 0x19ec <LCD_displayCharacter+0x1b8>
    19f0:	98 a3       	std	Y+32, r25	; 0x20
    19f2:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    19f4:	89 a1       	ldd	r24, Y+33	; 0x21
    19f6:	9a a1       	ldd	r25, Y+34	; 0x22
    19f8:	01 97       	sbiw	r24, 0x01	; 1
    19fa:	9a a3       	std	Y+34, r25	; 0x22
    19fc:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    19fe:	89 a1       	ldd	r24, Y+33	; 0x21
    1a00:	9a a1       	ldd	r25, Y+34	; 0x22
    1a02:	00 97       	sbiw	r24, 0x00	; 0
    1a04:	69 f7       	brne	.-38     	; 0x19e0 <LCD_displayCharacter+0x1ac>
    1a06:	14 c0       	rjmp	.+40     	; 0x1a30 <LCD_displayCharacter+0x1fc>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1a08:	6b a1       	ldd	r22, Y+35	; 0x23
    1a0a:	7c a1       	ldd	r23, Y+36	; 0x24
    1a0c:	8d a1       	ldd	r24, Y+37	; 0x25
    1a0e:	9e a1       	ldd	r25, Y+38	; 0x26
    1a10:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1a14:	dc 01       	movw	r26, r24
    1a16:	cb 01       	movw	r24, r22
    1a18:	9a a3       	std	Y+34, r25	; 0x22
    1a1a:	89 a3       	std	Y+33, r24	; 0x21
    1a1c:	89 a1       	ldd	r24, Y+33	; 0x21
    1a1e:	9a a1       	ldd	r25, Y+34	; 0x22
    1a20:	9e 8f       	std	Y+30, r25	; 0x1e
    1a22:	8d 8f       	std	Y+29, r24	; 0x1d
    1a24:	8d 8d       	ldd	r24, Y+29	; 0x1d
    1a26:	9e 8d       	ldd	r25, Y+30	; 0x1e
    1a28:	01 97       	sbiw	r24, 0x01	; 1
    1a2a:	f1 f7       	brne	.-4      	; 0x1a28 <LCD_displayCharacter+0x1f4>
    1a2c:	9e 8f       	std	Y+30, r25	; 0x1e
    1a2e:	8d 8f       	std	Y+29, r24	; 0x1d

	_delay_ms(1); 	/* delay for processing Tpw - Tdws = 190ns */

	GPIO_writePort(LCD_DATA_PORT,data);
    1a30:	82 e0       	ldi	r24, 0x02	; 2
    1a32:	69 ad       	ldd	r22, Y+57	; 0x39
    1a34:	0e 94 7a 09 	call	0x12f4	; 0x12f4 <GPIO_writePort>
    1a38:	80 e0       	ldi	r24, 0x00	; 0
    1a3a:	90 e0       	ldi	r25, 0x00	; 0
    1a3c:	a0 e8       	ldi	r26, 0x80	; 128
    1a3e:	bf e3       	ldi	r27, 0x3F	; 63
    1a40:	89 8f       	std	Y+25, r24	; 0x19
    1a42:	9a 8f       	std	Y+26, r25	; 0x1a
    1a44:	ab 8f       	std	Y+27, r26	; 0x1b
    1a46:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1a48:	69 8d       	ldd	r22, Y+25	; 0x19
    1a4a:	7a 8d       	ldd	r23, Y+26	; 0x1a
    1a4c:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1a4e:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1a50:	20 e0       	ldi	r18, 0x00	; 0
    1a52:	30 e0       	ldi	r19, 0x00	; 0
    1a54:	4a e7       	ldi	r20, 0x7A	; 122
    1a56:	53 e4       	ldi	r21, 0x43	; 67
    1a58:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1a5c:	dc 01       	movw	r26, r24
    1a5e:	cb 01       	movw	r24, r22
    1a60:	8d 8b       	std	Y+21, r24	; 0x15
    1a62:	9e 8b       	std	Y+22, r25	; 0x16
    1a64:	af 8b       	std	Y+23, r26	; 0x17
    1a66:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    1a68:	6d 89       	ldd	r22, Y+21	; 0x15
    1a6a:	7e 89       	ldd	r23, Y+22	; 0x16
    1a6c:	8f 89       	ldd	r24, Y+23	; 0x17
    1a6e:	98 8d       	ldd	r25, Y+24	; 0x18
    1a70:	20 e0       	ldi	r18, 0x00	; 0
    1a72:	30 e0       	ldi	r19, 0x00	; 0
    1a74:	40 e8       	ldi	r20, 0x80	; 128
    1a76:	5f e3       	ldi	r21, 0x3F	; 63
    1a78:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1a7c:	88 23       	and	r24, r24
    1a7e:	2c f4       	brge	.+10     	; 0x1a8a <LCD_displayCharacter+0x256>
		__ticks = 1;
    1a80:	81 e0       	ldi	r24, 0x01	; 1
    1a82:	90 e0       	ldi	r25, 0x00	; 0
    1a84:	9c 8b       	std	Y+20, r25	; 0x14
    1a86:	8b 8b       	std	Y+19, r24	; 0x13
    1a88:	3f c0       	rjmp	.+126    	; 0x1b08 <LCD_displayCharacter+0x2d4>
	else if (__tmp > 65535)
    1a8a:	6d 89       	ldd	r22, Y+21	; 0x15
    1a8c:	7e 89       	ldd	r23, Y+22	; 0x16
    1a8e:	8f 89       	ldd	r24, Y+23	; 0x17
    1a90:	98 8d       	ldd	r25, Y+24	; 0x18
    1a92:	20 e0       	ldi	r18, 0x00	; 0
    1a94:	3f ef       	ldi	r19, 0xFF	; 255
    1a96:	4f e7       	ldi	r20, 0x7F	; 127
    1a98:	57 e4       	ldi	r21, 0x47	; 71
    1a9a:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1a9e:	18 16       	cp	r1, r24
    1aa0:	4c f5       	brge	.+82     	; 0x1af4 <LCD_displayCharacter+0x2c0>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1aa2:	69 8d       	ldd	r22, Y+25	; 0x19
    1aa4:	7a 8d       	ldd	r23, Y+26	; 0x1a
    1aa6:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1aa8:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1aaa:	20 e0       	ldi	r18, 0x00	; 0
    1aac:	30 e0       	ldi	r19, 0x00	; 0
    1aae:	40 e2       	ldi	r20, 0x20	; 32
    1ab0:	51 e4       	ldi	r21, 0x41	; 65
    1ab2:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1ab6:	dc 01       	movw	r26, r24
    1ab8:	cb 01       	movw	r24, r22
    1aba:	bc 01       	movw	r22, r24
    1abc:	cd 01       	movw	r24, r26
    1abe:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1ac2:	dc 01       	movw	r26, r24
    1ac4:	cb 01       	movw	r24, r22
    1ac6:	9c 8b       	std	Y+20, r25	; 0x14
    1ac8:	8b 8b       	std	Y+19, r24	; 0x13
    1aca:	0f c0       	rjmp	.+30     	; 0x1aea <LCD_displayCharacter+0x2b6>
    1acc:	89 e1       	ldi	r24, 0x19	; 25
    1ace:	90 e0       	ldi	r25, 0x00	; 0
    1ad0:	9a 8b       	std	Y+18, r25	; 0x12
    1ad2:	89 8b       	std	Y+17, r24	; 0x11
    1ad4:	89 89       	ldd	r24, Y+17	; 0x11
    1ad6:	9a 89       	ldd	r25, Y+18	; 0x12
    1ad8:	01 97       	sbiw	r24, 0x01	; 1
    1ada:	f1 f7       	brne	.-4      	; 0x1ad8 <LCD_displayCharacter+0x2a4>
    1adc:	9a 8b       	std	Y+18, r25	; 0x12
    1ade:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1ae0:	8b 89       	ldd	r24, Y+19	; 0x13
    1ae2:	9c 89       	ldd	r25, Y+20	; 0x14
    1ae4:	01 97       	sbiw	r24, 0x01	; 1
    1ae6:	9c 8b       	std	Y+20, r25	; 0x14
    1ae8:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1aea:	8b 89       	ldd	r24, Y+19	; 0x13
    1aec:	9c 89       	ldd	r25, Y+20	; 0x14
    1aee:	00 97       	sbiw	r24, 0x00	; 0
    1af0:	69 f7       	brne	.-38     	; 0x1acc <LCD_displayCharacter+0x298>
    1af2:	14 c0       	rjmp	.+40     	; 0x1b1c <LCD_displayCharacter+0x2e8>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1af4:	6d 89       	ldd	r22, Y+21	; 0x15
    1af6:	7e 89       	ldd	r23, Y+22	; 0x16
    1af8:	8f 89       	ldd	r24, Y+23	; 0x17
    1afa:	98 8d       	ldd	r25, Y+24	; 0x18
    1afc:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1b00:	dc 01       	movw	r26, r24
    1b02:	cb 01       	movw	r24, r22
    1b04:	9c 8b       	std	Y+20, r25	; 0x14
    1b06:	8b 8b       	std	Y+19, r24	; 0x13
    1b08:	8b 89       	ldd	r24, Y+19	; 0x13
    1b0a:	9c 89       	ldd	r25, Y+20	; 0x14
    1b0c:	98 8b       	std	Y+16, r25	; 0x10
    1b0e:	8f 87       	std	Y+15, r24	; 0x0f
    1b10:	8f 85       	ldd	r24, Y+15	; 0x0f
    1b12:	98 89       	ldd	r25, Y+16	; 0x10
    1b14:	01 97       	sbiw	r24, 0x01	; 1
    1b16:	f1 f7       	brne	.-4      	; 0x1b14 <LCD_displayCharacter+0x2e0>
    1b18:	98 8b       	std	Y+16, r25	; 0x10
    1b1a:	8f 87       	std	Y+15, r24	; 0x0f

	_delay_ms(1); /* delay for processing Tdsw = 100ns */

	GPIO_writePin(EN_PORT_ID,EN_PIN_ID,LOGIC_LOW); /* Disable LCD E=0 */
    1b1c:	83 e0       	ldi	r24, 0x03	; 3
    1b1e:	66 e0       	ldi	r22, 0x06	; 6
    1b20:	40 e0       	ldi	r20, 0x00	; 0
    1b22:	0e 94 b0 07 	call	0xf60	; 0xf60 <GPIO_writePin>
    1b26:	80 e0       	ldi	r24, 0x00	; 0
    1b28:	90 e0       	ldi	r25, 0x00	; 0
    1b2a:	a0 e8       	ldi	r26, 0x80	; 128
    1b2c:	bf e3       	ldi	r27, 0x3F	; 63
    1b2e:	8b 87       	std	Y+11, r24	; 0x0b
    1b30:	9c 87       	std	Y+12, r25	; 0x0c
    1b32:	ad 87       	std	Y+13, r26	; 0x0d
    1b34:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1b36:	6b 85       	ldd	r22, Y+11	; 0x0b
    1b38:	7c 85       	ldd	r23, Y+12	; 0x0c
    1b3a:	8d 85       	ldd	r24, Y+13	; 0x0d
    1b3c:	9e 85       	ldd	r25, Y+14	; 0x0e
    1b3e:	20 e0       	ldi	r18, 0x00	; 0
    1b40:	30 e0       	ldi	r19, 0x00	; 0
    1b42:	4a e7       	ldi	r20, 0x7A	; 122
    1b44:	53 e4       	ldi	r21, 0x43	; 67
    1b46:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1b4a:	dc 01       	movw	r26, r24
    1b4c:	cb 01       	movw	r24, r22
    1b4e:	8f 83       	std	Y+7, r24	; 0x07
    1b50:	98 87       	std	Y+8, r25	; 0x08
    1b52:	a9 87       	std	Y+9, r26	; 0x09
    1b54:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    1b56:	6f 81       	ldd	r22, Y+7	; 0x07
    1b58:	78 85       	ldd	r23, Y+8	; 0x08
    1b5a:	89 85       	ldd	r24, Y+9	; 0x09
    1b5c:	9a 85       	ldd	r25, Y+10	; 0x0a
    1b5e:	20 e0       	ldi	r18, 0x00	; 0
    1b60:	30 e0       	ldi	r19, 0x00	; 0
    1b62:	40 e8       	ldi	r20, 0x80	; 128
    1b64:	5f e3       	ldi	r21, 0x3F	; 63
    1b66:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1b6a:	88 23       	and	r24, r24
    1b6c:	2c f4       	brge	.+10     	; 0x1b78 <LCD_displayCharacter+0x344>
		__ticks = 1;
    1b6e:	81 e0       	ldi	r24, 0x01	; 1
    1b70:	90 e0       	ldi	r25, 0x00	; 0
    1b72:	9e 83       	std	Y+6, r25	; 0x06
    1b74:	8d 83       	std	Y+5, r24	; 0x05
    1b76:	3f c0       	rjmp	.+126    	; 0x1bf6 <LCD_displayCharacter+0x3c2>
	else if (__tmp > 65535)
    1b78:	6f 81       	ldd	r22, Y+7	; 0x07
    1b7a:	78 85       	ldd	r23, Y+8	; 0x08
    1b7c:	89 85       	ldd	r24, Y+9	; 0x09
    1b7e:	9a 85       	ldd	r25, Y+10	; 0x0a
    1b80:	20 e0       	ldi	r18, 0x00	; 0
    1b82:	3f ef       	ldi	r19, 0xFF	; 255
    1b84:	4f e7       	ldi	r20, 0x7F	; 127
    1b86:	57 e4       	ldi	r21, 0x47	; 71
    1b88:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1b8c:	18 16       	cp	r1, r24
    1b8e:	4c f5       	brge	.+82     	; 0x1be2 <LCD_displayCharacter+0x3ae>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1b90:	6b 85       	ldd	r22, Y+11	; 0x0b
    1b92:	7c 85       	ldd	r23, Y+12	; 0x0c
    1b94:	8d 85       	ldd	r24, Y+13	; 0x0d
    1b96:	9e 85       	ldd	r25, Y+14	; 0x0e
    1b98:	20 e0       	ldi	r18, 0x00	; 0
    1b9a:	30 e0       	ldi	r19, 0x00	; 0
    1b9c:	40 e2       	ldi	r20, 0x20	; 32
    1b9e:	51 e4       	ldi	r21, 0x41	; 65
    1ba0:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1ba4:	dc 01       	movw	r26, r24
    1ba6:	cb 01       	movw	r24, r22
    1ba8:	bc 01       	movw	r22, r24
    1baa:	cd 01       	movw	r24, r26
    1bac:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1bb0:	dc 01       	movw	r26, r24
    1bb2:	cb 01       	movw	r24, r22
    1bb4:	9e 83       	std	Y+6, r25	; 0x06
    1bb6:	8d 83       	std	Y+5, r24	; 0x05
    1bb8:	0f c0       	rjmp	.+30     	; 0x1bd8 <LCD_displayCharacter+0x3a4>
    1bba:	89 e1       	ldi	r24, 0x19	; 25
    1bbc:	90 e0       	ldi	r25, 0x00	; 0
    1bbe:	9c 83       	std	Y+4, r25	; 0x04
    1bc0:	8b 83       	std	Y+3, r24	; 0x03
    1bc2:	8b 81       	ldd	r24, Y+3	; 0x03
    1bc4:	9c 81       	ldd	r25, Y+4	; 0x04
    1bc6:	01 97       	sbiw	r24, 0x01	; 1
    1bc8:	f1 f7       	brne	.-4      	; 0x1bc6 <LCD_displayCharacter+0x392>
    1bca:	9c 83       	std	Y+4, r25	; 0x04
    1bcc:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1bce:	8d 81       	ldd	r24, Y+5	; 0x05
    1bd0:	9e 81       	ldd	r25, Y+6	; 0x06
    1bd2:	01 97       	sbiw	r24, 0x01	; 1
    1bd4:	9e 83       	std	Y+6, r25	; 0x06
    1bd6:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1bd8:	8d 81       	ldd	r24, Y+5	; 0x05
    1bda:	9e 81       	ldd	r25, Y+6	; 0x06
    1bdc:	00 97       	sbiw	r24, 0x00	; 0
    1bde:	69 f7       	brne	.-38     	; 0x1bba <LCD_displayCharacter+0x386>
    1be0:	14 c0       	rjmp	.+40     	; 0x1c0a <LCD_displayCharacter+0x3d6>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1be2:	6f 81       	ldd	r22, Y+7	; 0x07
    1be4:	78 85       	ldd	r23, Y+8	; 0x08
    1be6:	89 85       	ldd	r24, Y+9	; 0x09
    1be8:	9a 85       	ldd	r25, Y+10	; 0x0a
    1bea:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1bee:	dc 01       	movw	r26, r24
    1bf0:	cb 01       	movw	r24, r22
    1bf2:	9e 83       	std	Y+6, r25	; 0x06
    1bf4:	8d 83       	std	Y+5, r24	; 0x05
    1bf6:	8d 81       	ldd	r24, Y+5	; 0x05
    1bf8:	9e 81       	ldd	r25, Y+6	; 0x06
    1bfa:	9a 83       	std	Y+2, r25	; 0x02
    1bfc:	89 83       	std	Y+1, r24	; 0x01
    1bfe:	89 81       	ldd	r24, Y+1	; 0x01
    1c00:	9a 81       	ldd	r25, Y+2	; 0x02
    1c02:	01 97       	sbiw	r24, 0x01	; 1
    1c04:	f1 f7       	brne	.-4      	; 0x1c02 <LCD_displayCharacter+0x3ce>
    1c06:	9a 83       	std	Y+2, r25	; 0x02
    1c08:	89 83       	std	Y+1, r24	; 0x01

	_delay_ms(1); /* delay for processing Th = 13ns */

}
    1c0a:	e9 96       	adiw	r28, 0x39	; 57
    1c0c:	0f b6       	in	r0, 0x3f	; 63
    1c0e:	f8 94       	cli
    1c10:	de bf       	out	0x3e, r29	; 62
    1c12:	0f be       	out	0x3f, r0	; 63
    1c14:	cd bf       	out	0x3d, r28	; 61
    1c16:	cf 91       	pop	r28
    1c18:	df 91       	pop	r29
    1c1a:	08 95       	ret

00001c1c <LCD_displayString>:
/*
 * Description :
 * Display the required string on the screen
 */
void LCD_displayString(const char *str)
{
    1c1c:	df 93       	push	r29
    1c1e:	cf 93       	push	r28
    1c20:	00 d0       	rcall	.+0      	; 0x1c22 <LCD_displayString+0x6>
    1c22:	0f 92       	push	r0
    1c24:	cd b7       	in	r28, 0x3d	; 61
    1c26:	de b7       	in	r29, 0x3e	; 62
    1c28:	9b 83       	std	Y+3, r25	; 0x03
    1c2a:	8a 83       	std	Y+2, r24	; 0x02
	uint8 i = 0;
    1c2c:	19 82       	std	Y+1, r1	; 0x01
    1c2e:	0e c0       	rjmp	.+28     	; 0x1c4c <LCD_displayString+0x30>
	while (str[i] != '\0')
	{
		LCD_displayCharacter(str[i]);
    1c30:	89 81       	ldd	r24, Y+1	; 0x01
    1c32:	28 2f       	mov	r18, r24
    1c34:	30 e0       	ldi	r19, 0x00	; 0
    1c36:	8a 81       	ldd	r24, Y+2	; 0x02
    1c38:	9b 81       	ldd	r25, Y+3	; 0x03
    1c3a:	fc 01       	movw	r30, r24
    1c3c:	e2 0f       	add	r30, r18
    1c3e:	f3 1f       	adc	r31, r19
    1c40:	80 81       	ld	r24, Z
    1c42:	0e 94 1a 0c 	call	0x1834	; 0x1834 <LCD_displayCharacter>
		i++;
    1c46:	89 81       	ldd	r24, Y+1	; 0x01
    1c48:	8f 5f       	subi	r24, 0xFF	; 255
    1c4a:	89 83       	std	Y+1, r24	; 0x01
 * Display the required string on the screen
 */
void LCD_displayString(const char *str)
{
	uint8 i = 0;
	while (str[i] != '\0')
    1c4c:	89 81       	ldd	r24, Y+1	; 0x01
    1c4e:	28 2f       	mov	r18, r24
    1c50:	30 e0       	ldi	r19, 0x00	; 0
    1c52:	8a 81       	ldd	r24, Y+2	; 0x02
    1c54:	9b 81       	ldd	r25, Y+3	; 0x03
    1c56:	fc 01       	movw	r30, r24
    1c58:	e2 0f       	add	r30, r18
    1c5a:	f3 1f       	adc	r31, r19
    1c5c:	80 81       	ld	r24, Z
    1c5e:	88 23       	and	r24, r24
    1c60:	39 f7       	brne	.-50     	; 0x1c30 <LCD_displayString+0x14>
	{
		LCD_displayCharacter(str[i]);
		i++;
	}

}
    1c62:	0f 90       	pop	r0
    1c64:	0f 90       	pop	r0
    1c66:	0f 90       	pop	r0
    1c68:	cf 91       	pop	r28
    1c6a:	df 91       	pop	r29
    1c6c:	08 95       	ret

00001c6e <LCD_clearScreen>:
/*
 * Description :
 * Send the clear screen command
 */
void LCD_clearScreen(void)
{
    1c6e:	df 93       	push	r29
    1c70:	cf 93       	push	r28
    1c72:	cd b7       	in	r28, 0x3d	; 61
    1c74:	de b7       	in	r29, 0x3e	; 62
	LCD_sendCommand(LCD_CLEAR_COMMAND); /* Send clear display command */
    1c76:	81 e0       	ldi	r24, 0x01	; 1
    1c78:	0e 94 26 0a 	call	0x144c	; 0x144c <LCD_sendCommand>
}
    1c7c:	cf 91       	pop	r28
    1c7e:	df 91       	pop	r29
    1c80:	08 95       	ret

00001c82 <LCD_moveCursor>:
/*
 * Description :
 * Move the cursor to a specified row and column index on the screen
 */
void LCD_moveCursor(uint8 row,uint8 col)
{
    1c82:	df 93       	push	r29
    1c84:	cf 93       	push	r28
    1c86:	00 d0       	rcall	.+0      	; 0x1c88 <LCD_moveCursor+0x6>
    1c88:	00 d0       	rcall	.+0      	; 0x1c8a <LCD_moveCursor+0x8>
    1c8a:	0f 92       	push	r0
    1c8c:	cd b7       	in	r28, 0x3d	; 61
    1c8e:	de b7       	in	r29, 0x3e	; 62
    1c90:	8a 83       	std	Y+2, r24	; 0x02
    1c92:	6b 83       	std	Y+3, r22	; 0x03
	uint8 lcd_memory_address;

	/* Calculate the required address in the LCD DDRAM */
	switch(row)
    1c94:	8a 81       	ldd	r24, Y+2	; 0x02
    1c96:	28 2f       	mov	r18, r24
    1c98:	30 e0       	ldi	r19, 0x00	; 0
    1c9a:	3d 83       	std	Y+5, r19	; 0x05
    1c9c:	2c 83       	std	Y+4, r18	; 0x04
    1c9e:	8c 81       	ldd	r24, Y+4	; 0x04
    1ca0:	9d 81       	ldd	r25, Y+5	; 0x05
    1ca2:	81 30       	cpi	r24, 0x01	; 1
    1ca4:	91 05       	cpc	r25, r1
    1ca6:	c1 f0       	breq	.+48     	; 0x1cd8 <LCD_moveCursor+0x56>
    1ca8:	2c 81       	ldd	r18, Y+4	; 0x04
    1caa:	3d 81       	ldd	r19, Y+5	; 0x05
    1cac:	22 30       	cpi	r18, 0x02	; 2
    1cae:	31 05       	cpc	r19, r1
    1cb0:	2c f4       	brge	.+10     	; 0x1cbc <LCD_moveCursor+0x3a>
    1cb2:	8c 81       	ldd	r24, Y+4	; 0x04
    1cb4:	9d 81       	ldd	r25, Y+5	; 0x05
    1cb6:	00 97       	sbiw	r24, 0x00	; 0
    1cb8:	61 f0       	breq	.+24     	; 0x1cd2 <LCD_moveCursor+0x50>
    1cba:	19 c0       	rjmp	.+50     	; 0x1cee <LCD_moveCursor+0x6c>
    1cbc:	2c 81       	ldd	r18, Y+4	; 0x04
    1cbe:	3d 81       	ldd	r19, Y+5	; 0x05
    1cc0:	22 30       	cpi	r18, 0x02	; 2
    1cc2:	31 05       	cpc	r19, r1
    1cc4:	69 f0       	breq	.+26     	; 0x1ce0 <LCD_moveCursor+0x5e>
    1cc6:	8c 81       	ldd	r24, Y+4	; 0x04
    1cc8:	9d 81       	ldd	r25, Y+5	; 0x05
    1cca:	83 30       	cpi	r24, 0x03	; 3
    1ccc:	91 05       	cpc	r25, r1
    1cce:	61 f0       	breq	.+24     	; 0x1ce8 <LCD_moveCursor+0x66>
    1cd0:	0e c0       	rjmp	.+28     	; 0x1cee <LCD_moveCursor+0x6c>
	{
	case 0:
		lcd_memory_address=col;
    1cd2:	8b 81       	ldd	r24, Y+3	; 0x03
    1cd4:	89 83       	std	Y+1, r24	; 0x01
    1cd6:	0b c0       	rjmp	.+22     	; 0x1cee <LCD_moveCursor+0x6c>
		break;
	case 1:
		lcd_memory_address=col+0x40;
    1cd8:	8b 81       	ldd	r24, Y+3	; 0x03
    1cda:	80 5c       	subi	r24, 0xC0	; 192
    1cdc:	89 83       	std	Y+1, r24	; 0x01
    1cde:	07 c0       	rjmp	.+14     	; 0x1cee <LCD_moveCursor+0x6c>
		break;
	case 2:
		lcd_memory_address=col+0x10;
    1ce0:	8b 81       	ldd	r24, Y+3	; 0x03
    1ce2:	80 5f       	subi	r24, 0xF0	; 240
    1ce4:	89 83       	std	Y+1, r24	; 0x01
    1ce6:	03 c0       	rjmp	.+6      	; 0x1cee <LCD_moveCursor+0x6c>
		break;
	case 3:
		lcd_memory_address=col+0x50;
    1ce8:	8b 81       	ldd	r24, Y+3	; 0x03
    1cea:	80 5b       	subi	r24, 0xB0	; 176
    1cec:	89 83       	std	Y+1, r24	; 0x01
		break;
	}
	/* Move the LCD cursor to this specific address */
	LCD_sendCommand(lcd_memory_address | LCD_SET_CURSOR_LOCATION);
    1cee:	89 81       	ldd	r24, Y+1	; 0x01
    1cf0:	80 68       	ori	r24, 0x80	; 128
    1cf2:	0e 94 26 0a 	call	0x144c	; 0x144c <LCD_sendCommand>
}
    1cf6:	0f 90       	pop	r0
    1cf8:	0f 90       	pop	r0
    1cfa:	0f 90       	pop	r0
    1cfc:	0f 90       	pop	r0
    1cfe:	0f 90       	pop	r0
    1d00:	cf 91       	pop	r28
    1d02:	df 91       	pop	r29
    1d04:	08 95       	ret

00001d06 <LCD_displayStringRowColumn>:
/*
 * Description :
 * Display the required string in a specified row and column index on the screen
 */
void LCD_displayStringRowColumn(uint8 row,uint8 col,const char *Str)
{
    1d06:	df 93       	push	r29
    1d08:	cf 93       	push	r28
    1d0a:	00 d0       	rcall	.+0      	; 0x1d0c <LCD_displayStringRowColumn+0x6>
    1d0c:	00 d0       	rcall	.+0      	; 0x1d0e <LCD_displayStringRowColumn+0x8>
    1d0e:	cd b7       	in	r28, 0x3d	; 61
    1d10:	de b7       	in	r29, 0x3e	; 62
    1d12:	89 83       	std	Y+1, r24	; 0x01
    1d14:	6a 83       	std	Y+2, r22	; 0x02
    1d16:	5c 83       	std	Y+4, r21	; 0x04
    1d18:	4b 83       	std	Y+3, r20	; 0x03
	LCD_moveCursor(row,col); /* go to to the required LCD position */
    1d1a:	89 81       	ldd	r24, Y+1	; 0x01
    1d1c:	6a 81       	ldd	r22, Y+2	; 0x02
    1d1e:	0e 94 41 0e 	call	0x1c82	; 0x1c82 <LCD_moveCursor>
	LCD_displayString(Str); /* display the string */
    1d22:	8b 81       	ldd	r24, Y+3	; 0x03
    1d24:	9c 81       	ldd	r25, Y+4	; 0x04
    1d26:	0e 94 0e 0e 	call	0x1c1c	; 0x1c1c <LCD_displayString>
}
    1d2a:	0f 90       	pop	r0
    1d2c:	0f 90       	pop	r0
    1d2e:	0f 90       	pop	r0
    1d30:	0f 90       	pop	r0
    1d32:	cf 91       	pop	r28
    1d34:	df 91       	pop	r29
    1d36:	08 95       	ret

00001d38 <LCD_intgerToString>:
/*
 * Description :
 * Display the required decimal value on the screen
 */
void LCD_intgerToString(int data)
{
    1d38:	df 93       	push	r29
    1d3a:	cf 93       	push	r28
    1d3c:	cd b7       	in	r28, 0x3d	; 61
    1d3e:	de b7       	in	r29, 0x3e	; 62
    1d40:	62 97       	sbiw	r28, 0x12	; 18
    1d42:	0f b6       	in	r0, 0x3f	; 63
    1d44:	f8 94       	cli
    1d46:	de bf       	out	0x3e, r29	; 62
    1d48:	0f be       	out	0x3f, r0	; 63
    1d4a:	cd bf       	out	0x3d, r28	; 61
    1d4c:	9a 8b       	std	Y+18, r25	; 0x12
    1d4e:	89 8b       	std	Y+17, r24	; 0x11
	char buff[16]; /* String to hold the ascii result */
	itoa(data,buff,10); /* Use itoa C function to convert the data to its corresponding ASCII value, 10 for decimal */
    1d50:	89 89       	ldd	r24, Y+17	; 0x11
    1d52:	9a 89       	ldd	r25, Y+18	; 0x12
    1d54:	9e 01       	movw	r18, r28
    1d56:	2f 5f       	subi	r18, 0xFF	; 255
    1d58:	3f 4f       	sbci	r19, 0xFF	; 255
    1d5a:	b9 01       	movw	r22, r18
    1d5c:	4a e0       	ldi	r20, 0x0A	; 10
    1d5e:	50 e0       	ldi	r21, 0x00	; 0
    1d60:	0e 94 b8 16 	call	0x2d70	; 0x2d70 <itoa>
	LCD_displayString(buff); /* Display the string */
    1d64:	ce 01       	movw	r24, r28
    1d66:	01 96       	adiw	r24, 0x01	; 1
    1d68:	0e 94 0e 0e 	call	0x1c1c	; 0x1c1c <LCD_displayString>
}
    1d6c:	62 96       	adiw	r28, 0x12	; 18
    1d6e:	0f b6       	in	r0, 0x3f	; 63
    1d70:	f8 94       	cli
    1d72:	de bf       	out	0x3e, r29	; 62
    1d74:	0f be       	out	0x3f, r0	; 63
    1d76:	cd bf       	out	0x3d, r28	; 61
    1d78:	cf 91       	pop	r28
    1d7a:	df 91       	pop	r29
    1d7c:	08 95       	ret

00001d7e <main>:
#include "Buzzer.h"



int main(void)
{
    1d7e:	df 93       	push	r29
    1d80:	cf 93       	push	r28
    1d82:	cd b7       	in	r28, 0x3d	; 61
    1d84:	de b7       	in	r29, 0x3e	; 62
    1d86:	65 97       	sbiw	r28, 0x15	; 21
    1d88:	0f b6       	in	r0, 0x3f	; 63
    1d8a:	f8 94       	cli
    1d8c:	de bf       	out	0x3e, r29	; 62
    1d8e:	0f be       	out	0x3f, r0	; 63
    1d90:	cd bf       	out	0x3d, r28	; 61
	SREG |= (1 << 7); /*enable global interrupt*/
    1d92:	af e5       	ldi	r26, 0x5F	; 95
    1d94:	b0 e0       	ldi	r27, 0x00	; 0
    1d96:	ef e5       	ldi	r30, 0x5F	; 95
    1d98:	f0 e0       	ldi	r31, 0x00	; 0
    1d9a:	80 81       	ld	r24, Z
    1d9c:	80 68       	ori	r24, 0x80	; 128
    1d9e:	8c 93       	st	X, r24

	/* Timer freq = 8MHz/1024, one clock-cycle time = 128 uSecond
		 so to force the timer to produce an interrupt every 1 second:
		 we set the compare value to be 1/(128u) = 7813 */

	TIMER_Config timer_config = {Timer1,CTC,F_CPU_1024,7813,0};
    1da0:	ce 01       	movw	r24, r28
    1da2:	02 96       	adiw	r24, 0x02	; 2
    1da4:	9d 87       	std	Y+13, r25	; 0x0d
    1da6:	8c 87       	std	Y+12, r24	; 0x0c
    1da8:	e9 e7       	ldi	r30, 0x79	; 121
    1daa:	f0 e0       	ldi	r31, 0x00	; 0
    1dac:	ff 87       	std	Y+15, r31	; 0x0f
    1dae:	ee 87       	std	Y+14, r30	; 0x0e
    1db0:	f7 e0       	ldi	r31, 0x07	; 7
    1db2:	f8 8b       	std	Y+16, r31	; 0x10
    1db4:	ee 85       	ldd	r30, Y+14	; 0x0e
    1db6:	ff 85       	ldd	r31, Y+15	; 0x0f
    1db8:	00 80       	ld	r0, Z
    1dba:	8e 85       	ldd	r24, Y+14	; 0x0e
    1dbc:	9f 85       	ldd	r25, Y+15	; 0x0f
    1dbe:	01 96       	adiw	r24, 0x01	; 1
    1dc0:	9f 87       	std	Y+15, r25	; 0x0f
    1dc2:	8e 87       	std	Y+14, r24	; 0x0e
    1dc4:	ec 85       	ldd	r30, Y+12	; 0x0c
    1dc6:	fd 85       	ldd	r31, Y+13	; 0x0d
    1dc8:	00 82       	st	Z, r0
    1dca:	8c 85       	ldd	r24, Y+12	; 0x0c
    1dcc:	9d 85       	ldd	r25, Y+13	; 0x0d
    1dce:	01 96       	adiw	r24, 0x01	; 1
    1dd0:	9d 87       	std	Y+13, r25	; 0x0d
    1dd2:	8c 87       	std	Y+12, r24	; 0x0c
    1dd4:	98 89       	ldd	r25, Y+16	; 0x10
    1dd6:	91 50       	subi	r25, 0x01	; 1
    1dd8:	98 8b       	std	Y+16, r25	; 0x10
    1dda:	e8 89       	ldd	r30, Y+16	; 0x10
    1ddc:	ee 23       	and	r30, r30
    1dde:	51 f7       	brne	.-44     	; 0x1db4 <main+0x36>
	Timer_init(&timer_config);
    1de0:	ce 01       	movw	r24, r28
    1de2:	02 96       	adiw	r24, 0x02	; 2
    1de4:	0e 94 1d 13 	call	0x263a	; 0x263a <Timer_init>
	Timer1_setCallBack(timerCallBack);
    1de8:	85 e0       	ldi	r24, 0x05	; 5
    1dea:	90 e1       	ldi	r25, 0x10	; 16
    1dec:	0e 94 f9 12 	call	0x25f2	; 0x25f2 <Timer1_setCallBack>

	UART_Config Uart = {one_bit,eight_bit,Disabled};
    1df0:	ce 01       	movw	r24, r28
    1df2:	09 96       	adiw	r24, 0x09	; 9
    1df4:	9a 8b       	std	Y+18, r25	; 0x12
    1df6:	89 8b       	std	Y+17, r24	; 0x11
    1df8:	e6 e7       	ldi	r30, 0x76	; 118
    1dfa:	f0 e0       	ldi	r31, 0x00	; 0
    1dfc:	fc 8b       	std	Y+20, r31	; 0x14
    1dfe:	eb 8b       	std	Y+19, r30	; 0x13
    1e00:	f3 e0       	ldi	r31, 0x03	; 3
    1e02:	fd 8b       	std	Y+21, r31	; 0x15
    1e04:	eb 89       	ldd	r30, Y+19	; 0x13
    1e06:	fc 89       	ldd	r31, Y+20	; 0x14
    1e08:	00 80       	ld	r0, Z
    1e0a:	8b 89       	ldd	r24, Y+19	; 0x13
    1e0c:	9c 89       	ldd	r25, Y+20	; 0x14
    1e0e:	01 96       	adiw	r24, 0x01	; 1
    1e10:	9c 8b       	std	Y+20, r25	; 0x14
    1e12:	8b 8b       	std	Y+19, r24	; 0x13
    1e14:	e9 89       	ldd	r30, Y+17	; 0x11
    1e16:	fa 89       	ldd	r31, Y+18	; 0x12
    1e18:	00 82       	st	Z, r0
    1e1a:	89 89       	ldd	r24, Y+17	; 0x11
    1e1c:	9a 89       	ldd	r25, Y+18	; 0x12
    1e1e:	01 96       	adiw	r24, 0x01	; 1
    1e20:	9a 8b       	std	Y+18, r25	; 0x12
    1e22:	89 8b       	std	Y+17, r24	; 0x11
    1e24:	9d 89       	ldd	r25, Y+21	; 0x15
    1e26:	91 50       	subi	r25, 0x01	; 1
    1e28:	9d 8b       	std	Y+21, r25	; 0x15
    1e2a:	ed 89       	ldd	r30, Y+21	; 0x15
    1e2c:	ee 23       	and	r30, r30
    1e2e:	51 f7       	brne	.-44     	; 0x1e04 <main+0x86>

	UART_init(9600,&Uart);
    1e30:	9e 01       	movw	r18, r28
    1e32:	27 5f       	subi	r18, 0xF7	; 247
    1e34:	3f 4f       	sbci	r19, 0xFF	; 255
    1e36:	60 e8       	ldi	r22, 0x80	; 128
    1e38:	75 e2       	ldi	r23, 0x25	; 37
    1e3a:	80 e0       	ldi	r24, 0x00	; 0
    1e3c:	90 e0       	ldi	r25, 0x00	; 0
    1e3e:	a9 01       	movw	r20, r18
    1e40:	0e 94 32 15 	call	0x2a64	; 0x2a64 <UART_init>


	DcMotor_Init();
    1e44:	0e 94 c9 05 	call	0xb92	; 0xb92 <DcMotor_Init>

	BZR_init();
    1e48:	0e 94 a3 05 	call	0xb46	; 0xb46 <BZR_init>

	initializePassword();
    1e4c:	0e 94 15 10 	call	0x202a	; 0x202a <initializePassword>

	uint8 receivedByte = 0;
    1e50:	19 82       	std	Y+1, r1	; 0x01

	while(1)
	{
		if (UART_recieveByte() == READY_TO_SEND)
    1e52:	0e 94 d9 15 	call	0x2bb2	; 0x2bb2 <UART_recieveByte>
    1e56:	85 31       	cpi	r24, 0x15	; 21
    1e58:	e1 f7       	brne	.-8      	; 0x1e52 <main+0xd4>
		{
			receivePasswordViaUART(g_receivedPassword);
    1e5a:	89 e8       	ldi	r24, 0x89	; 137
    1e5c:	90 e0       	ldi	r25, 0x00	; 0
    1e5e:	0e 94 5b 10 	call	0x20b6	; 0x20b6 <receivePasswordViaUART>
			receivedByte = UART_recieveByte();
    1e62:	0e 94 d9 15 	call	0x2bb2	; 0x2bb2 <UART_recieveByte>
    1e66:	89 83       	std	Y+1, r24	; 0x01

			if ( receivedByte == '+')
    1e68:	89 81       	ldd	r24, Y+1	; 0x01
    1e6a:	8b 32       	cpi	r24, 0x2B	; 43
    1e6c:	89 f5       	brne	.+98     	; 0x1ed0 <main+0x152>
			{
				if (compare_passwords(g_storedPassword, g_receivedPassword) == PASSWORD_MATCHED)
    1e6e:	8e e8       	ldi	r24, 0x8E	; 142
    1e70:	90 e0       	ldi	r25, 0x00	; 0
    1e72:	29 e8       	ldi	r18, 0x89	; 137
    1e74:	30 e0       	ldi	r19, 0x00	; 0
    1e76:	b9 01       	movw	r22, r18
    1e78:	0e 94 9a 0f 	call	0x1f34	; 0x1f34 <compare_passwords>
    1e7c:	81 30       	cpi	r24, 0x01	; 1
    1e7e:	31 f4       	brne	.+12     	; 0x1e8c <main+0x10e>
				{
					UART_sendByte(UNLOCKING_DOOR); /* inform HMI ECU to display that door is unlocking */
    1e80:	85 e2       	ldi	r24, 0x25	; 37
    1e82:	0e 94 bb 15 	call	0x2b76	; 0x2b76 <UART_sendByte>
					DoorOpeningTask(); /* start opening door process/task */
    1e86:	0e 94 d1 0f 	call	0x1fa2	; 0x1fa2 <DoorOpeningTask>
    1e8a:	e3 cf       	rjmp	.-58     	; 0x1e52 <main+0xd4>
				}
				else
				{
					UART_sendByte(WRONG_PASSWORD);
    1e8c:	80 e3       	ldi	r24, 0x30	; 48
    1e8e:	0e 94 bb 15 	call	0x2b76	; 0x2b76 <UART_sendByte>
					/* count number of wrong attempts, and turn on a buzzer of it exceeds the limit */
					g_wrongPasswordCounter++;
    1e92:	80 91 80 00 	lds	r24, 0x0080
    1e96:	8f 5f       	subi	r24, 0xFF	; 255
    1e98:	80 93 80 00 	sts	0x0080, r24

					if (g_wrongPasswordCounter == NUMBER_OF_WRONG_PASSWORD_ATTEMPTS)
    1e9c:	80 91 80 00 	lds	r24, 0x0080
    1ea0:	83 30       	cpi	r24, 0x03	; 3
    1ea2:	b9 f6       	brne	.-82     	; 0x1e52 <main+0xd4>
					{
						LCD_displayString("Amsk Haramy");
    1ea4:	80 e6       	ldi	r24, 0x60	; 96
    1ea6:	90 e0       	ldi	r25, 0x00	; 0
    1ea8:	0e 94 0e 0e 	call	0x1c1c	; 0x1c1c <LCD_displayString>
						BZR_ON();
    1eac:	0e 94 b1 05 	call	0xb62	; 0xb62 <BZR_ON>
						g_seconds = 0;
    1eb0:	10 92 82 00 	sts	0x0082, r1
    1eb4:	10 92 81 00 	sts	0x0081, r1
						while(g_seconds < ALARM_ON_DELAY); /* turn on alarm for a certain period */
    1eb8:	80 91 81 00 	lds	r24, 0x0081
    1ebc:	90 91 82 00 	lds	r25, 0x0082
    1ec0:	8c 33       	cpi	r24, 0x3C	; 60
    1ec2:	91 05       	cpc	r25, r1
    1ec4:	c8 f3       	brcs	.-14     	; 0x1eb8 <main+0x13a>
						BZR_OFF();
    1ec6:	0e 94 bd 05 	call	0xb7a	; 0xb7a <BZR_OFF>
						g_wrongPasswordCounter = 0; /* reset the counter */
    1eca:	10 92 80 00 	sts	0x0080, r1
    1ece:	c1 cf       	rjmp	.-126    	; 0x1e52 <main+0xd4>
					}
				}


			}
			else if (receivedByte == CHANGE_PASSWORD_OPTION)
    1ed0:	89 81       	ldd	r24, Y+1	; 0x01
    1ed2:	88 31       	cpi	r24, 0x18	; 24
    1ed4:	09 f0       	breq	.+2      	; 0x1ed8 <main+0x15a>
    1ed6:	bd cf       	rjmp	.-134    	; 0x1e52 <main+0xd4>
			{
				if (compare_passwords(g_storedPassword, g_receivedPassword) == PASSWORD_MATCHED)
    1ed8:	8e e8       	ldi	r24, 0x8E	; 142
    1eda:	90 e0       	ldi	r25, 0x00	; 0
    1edc:	29 e8       	ldi	r18, 0x89	; 137
    1ede:	30 e0       	ldi	r19, 0x00	; 0
    1ee0:	b9 01       	movw	r22, r18
    1ee2:	0e 94 9a 0f 	call	0x1f34	; 0x1f34 <compare_passwords>
    1ee6:	81 30       	cpi	r24, 0x01	; 1
    1ee8:	31 f4       	brne	.+12     	; 0x1ef6 <main+0x178>
				{
					UART_sendByte(CHANGING_PASSWORD); /* inform HMI to process changing password */
    1eea:	81 e3       	ldi	r24, 0x31	; 49
    1eec:	0e 94 bb 15 	call	0x2b76	; 0x2b76 <UART_sendByte>
					initializePassword();
    1ef0:	0e 94 15 10 	call	0x202a	; 0x202a <initializePassword>
    1ef4:	ae cf       	rjmp	.-164    	; 0x1e52 <main+0xd4>
				}
				else
				{
					UART_sendByte(WRONG_PASSWORD);
    1ef6:	80 e3       	ldi	r24, 0x30	; 48
    1ef8:	0e 94 bb 15 	call	0x2b76	; 0x2b76 <UART_sendByte>
					/* count number of wrong attempts, and turn on a buzzer of it exceeds the limit */
					g_wrongPasswordCounter++;
    1efc:	80 91 80 00 	lds	r24, 0x0080
    1f00:	8f 5f       	subi	r24, 0xFF	; 255
    1f02:	80 93 80 00 	sts	0x0080, r24

					if (g_wrongPasswordCounter == NUMBER_OF_WRONG_PASSWORD_ATTEMPTS)
    1f06:	80 91 80 00 	lds	r24, 0x0080
    1f0a:	83 30       	cpi	r24, 0x03	; 3
    1f0c:	09 f0       	breq	.+2      	; 0x1f10 <main+0x192>
    1f0e:	a1 cf       	rjmp	.-190    	; 0x1e52 <main+0xd4>
					{
						BZR_ON();
    1f10:	0e 94 b1 05 	call	0xb62	; 0xb62 <BZR_ON>
						g_seconds = 0;
    1f14:	10 92 82 00 	sts	0x0082, r1
    1f18:	10 92 81 00 	sts	0x0081, r1
						while(g_seconds < ALARM_ON_DELAY); /* turn on alarm for a certain period */
    1f1c:	80 91 81 00 	lds	r24, 0x0081
    1f20:	90 91 82 00 	lds	r25, 0x0082
    1f24:	8c 33       	cpi	r24, 0x3C	; 60
    1f26:	91 05       	cpc	r25, r1
    1f28:	c8 f3       	brcs	.-14     	; 0x1f1c <main+0x19e>
						BZR_OFF();
    1f2a:	0e 94 bd 05 	call	0xb7a	; 0xb7a <BZR_OFF>
						g_wrongPasswordCounter = 0; /* reset the counter */
    1f2e:	10 92 80 00 	sts	0x0080, r1
    1f32:	8f cf       	rjmp	.-226    	; 0x1e52 <main+0xd4>

00001f34 <compare_passwords>:

/********************************************************/
/* Functions Definations */
/********************************************************/
uint8 compare_passwords(uint8 a_password1[PASSWORD_LENGTH],uint8 a_password2[PASSWORD_LENGTH])
{
    1f34:	df 93       	push	r29
    1f36:	cf 93       	push	r28
    1f38:	00 d0       	rcall	.+0      	; 0x1f3a <compare_passwords+0x6>
    1f3a:	00 d0       	rcall	.+0      	; 0x1f3c <compare_passwords+0x8>
    1f3c:	00 d0       	rcall	.+0      	; 0x1f3e <compare_passwords+0xa>
    1f3e:	cd b7       	in	r28, 0x3d	; 61
    1f40:	de b7       	in	r29, 0x3e	; 62
    1f42:	9b 83       	std	Y+3, r25	; 0x03
    1f44:	8a 83       	std	Y+2, r24	; 0x02
    1f46:	7d 83       	std	Y+5, r23	; 0x05
    1f48:	6c 83       	std	Y+4, r22	; 0x04
	updateStoredPassword();
    1f4a:	0e 94 fb 10 	call	0x21f6	; 0x21f6 <updateStoredPassword>
	uint8 i;
	for(i = 0; i < PASSWORD_LENGTH; i++)
    1f4e:	19 82       	std	Y+1, r1	; 0x01
    1f50:	19 c0       	rjmp	.+50     	; 0x1f84 <compare_passwords+0x50>
	{
		if (a_password1[i] != a_password2[i])
    1f52:	89 81       	ldd	r24, Y+1	; 0x01
    1f54:	28 2f       	mov	r18, r24
    1f56:	30 e0       	ldi	r19, 0x00	; 0
    1f58:	8a 81       	ldd	r24, Y+2	; 0x02
    1f5a:	9b 81       	ldd	r25, Y+3	; 0x03
    1f5c:	fc 01       	movw	r30, r24
    1f5e:	e2 0f       	add	r30, r18
    1f60:	f3 1f       	adc	r31, r19
    1f62:	40 81       	ld	r20, Z
    1f64:	89 81       	ldd	r24, Y+1	; 0x01
    1f66:	28 2f       	mov	r18, r24
    1f68:	30 e0       	ldi	r19, 0x00	; 0
    1f6a:	8c 81       	ldd	r24, Y+4	; 0x04
    1f6c:	9d 81       	ldd	r25, Y+5	; 0x05
    1f6e:	fc 01       	movw	r30, r24
    1f70:	e2 0f       	add	r30, r18
    1f72:	f3 1f       	adc	r31, r19
    1f74:	80 81       	ld	r24, Z
    1f76:	48 17       	cp	r20, r24
    1f78:	11 f0       	breq	.+4      	; 0x1f7e <compare_passwords+0x4a>
		{
			return PASSWORD_MISMATCHED;
    1f7a:	1e 82       	std	Y+6, r1	; 0x06
    1f7c:	08 c0       	rjmp	.+16     	; 0x1f8e <compare_passwords+0x5a>
/********************************************************/
uint8 compare_passwords(uint8 a_password1[PASSWORD_LENGTH],uint8 a_password2[PASSWORD_LENGTH])
{
	updateStoredPassword();
	uint8 i;
	for(i = 0; i < PASSWORD_LENGTH; i++)
    1f7e:	89 81       	ldd	r24, Y+1	; 0x01
    1f80:	8f 5f       	subi	r24, 0xFF	; 255
    1f82:	89 83       	std	Y+1, r24	; 0x01
    1f84:	89 81       	ldd	r24, Y+1	; 0x01
    1f86:	85 30       	cpi	r24, 0x05	; 5
    1f88:	20 f3       	brcs	.-56     	; 0x1f52 <compare_passwords+0x1e>
		if (a_password1[i] != a_password2[i])
		{
			return PASSWORD_MISMATCHED;
		}
	}
	return PASSWORD_MATCHED;
    1f8a:	81 e0       	ldi	r24, 0x01	; 1
    1f8c:	8e 83       	std	Y+6, r24	; 0x06
    1f8e:	8e 81       	ldd	r24, Y+6	; 0x06
}
    1f90:	26 96       	adiw	r28, 0x06	; 6
    1f92:	0f b6       	in	r0, 0x3f	; 63
    1f94:	f8 94       	cli
    1f96:	de bf       	out	0x3e, r29	; 62
    1f98:	0f be       	out	0x3f, r0	; 63
    1f9a:	cd bf       	out	0x3d, r28	; 61
    1f9c:	cf 91       	pop	r28
    1f9e:	df 91       	pop	r29
    1fa0:	08 95       	ret

00001fa2 <DoorOpeningTask>:

void DoorOpeningTask(void)
{
    1fa2:	df 93       	push	r29
    1fa4:	cf 93       	push	r28
    1fa6:	cd b7       	in	r28, 0x3d	; 61
    1fa8:	de b7       	in	r29, 0x3e	; 62
	/* run the DC motor clockwise for 15 seconds */
	g_seconds = 0;
    1faa:	10 92 82 00 	sts	0x0082, r1
    1fae:	10 92 81 00 	sts	0x0081, r1
	DcMotor_Rotate(CW);
    1fb2:	81 e0       	ldi	r24, 0x01	; 1
    1fb4:	0e 94 e4 05 	call	0xbc8	; 0xbc8 <DcMotor_Rotate>
	while (g_seconds < DOOR_UNLOCKING_PERIOD);
    1fb8:	80 91 81 00 	lds	r24, 0x0081
    1fbc:	90 91 82 00 	lds	r25, 0x0082
    1fc0:	8f 30       	cpi	r24, 0x0F	; 15
    1fc2:	91 05       	cpc	r25, r1
    1fc4:	c8 f3       	brcs	.-14     	; 0x1fb8 <DoorOpeningTask+0x16>

	/* let the door be open for 3 seconds */
	g_seconds = 0;
    1fc6:	10 92 82 00 	sts	0x0082, r1
    1fca:	10 92 81 00 	sts	0x0081, r1
	DcMotor_Rotate(Stop);
    1fce:	80 e0       	ldi	r24, 0x00	; 0
    1fd0:	0e 94 e4 05 	call	0xbc8	; 0xbc8 <DcMotor_Rotate>
	while (g_seconds < DOOR_LEFT_OPEN_PERIOD);
    1fd4:	80 91 81 00 	lds	r24, 0x0081
    1fd8:	90 91 82 00 	lds	r25, 0x0082
    1fdc:	83 30       	cpi	r24, 0x03	; 3
    1fde:	91 05       	cpc	r25, r1
    1fe0:	c8 f3       	brcs	.-14     	; 0x1fd4 <DoorOpeningTask+0x32>

	/* hold the system for 15 seconds & display to user that door is locking */
	g_seconds = 0;
    1fe2:	10 92 82 00 	sts	0x0082, r1
    1fe6:	10 92 81 00 	sts	0x0081, r1
	DcMotor_Rotate(CCW);
    1fea:	82 e0       	ldi	r24, 0x02	; 2
    1fec:	0e 94 e4 05 	call	0xbc8	; 0xbc8 <DcMotor_Rotate>
	while (g_seconds < DOOR_UNLOCKING_PERIOD);
    1ff0:	80 91 81 00 	lds	r24, 0x0081
    1ff4:	90 91 82 00 	lds	r25, 0x0082
    1ff8:	8f 30       	cpi	r24, 0x0F	; 15
    1ffa:	91 05       	cpc	r25, r1
    1ffc:	c8 f3       	brcs	.-14     	; 0x1ff0 <DoorOpeningTask+0x4e>

	DcMotor_Rotate(Stop);
    1ffe:	80 e0       	ldi	r24, 0x00	; 0
    2000:	0e 94 e4 05 	call	0xbc8	; 0xbc8 <DcMotor_Rotate>
}
    2004:	cf 91       	pop	r28
    2006:	df 91       	pop	r29
    2008:	08 95       	ret

0000200a <timerCallBack>:

void timerCallBack(void)
{
    200a:	df 93       	push	r29
    200c:	cf 93       	push	r28
    200e:	cd b7       	in	r28, 0x3d	; 61
    2010:	de b7       	in	r29, 0x3e	; 62
	g_seconds++;
    2012:	80 91 81 00 	lds	r24, 0x0081
    2016:	90 91 82 00 	lds	r25, 0x0082
    201a:	01 96       	adiw	r24, 0x01	; 1
    201c:	90 93 82 00 	sts	0x0082, r25
    2020:	80 93 81 00 	sts	0x0081, r24
}
    2024:	cf 91       	pop	r28
    2026:	df 91       	pop	r29
    2028:	08 95       	ret

0000202a <initializePassword>:

void initializePassword(void)
{
    202a:	df 93       	push	r29
    202c:	cf 93       	push	r28
    202e:	00 d0       	rcall	.+0      	; 0x2030 <initializePassword+0x6>
    2030:	00 d0       	rcall	.+0      	; 0x2032 <initializePassword+0x8>
    2032:	00 d0       	rcall	.+0      	; 0x2034 <initializePassword+0xa>
    2034:	cd b7       	in	r28, 0x3d	; 61
    2036:	de b7       	in	r29, 0x3e	; 62
	/* do not return from this function till Control ECU sends a PASSWORD_MATCH signal */
	uint8 confirmationPassword[PASSWORD_LENGTH];
	uint8 check = 0;
    2038:	19 82       	std	Y+1, r1	; 0x01
    203a:	31 c0       	rjmp	.+98     	; 0x209e <initializePassword+0x74>
	while(!check)
	{
		while (UART_recieveByte() != READY_TO_SEND); /* wait till HMI gets ready */
    203c:	0e 94 d9 15 	call	0x2bb2	; 0x2bb2 <UART_recieveByte>
    2040:	85 31       	cpi	r24, 0x15	; 21
    2042:	e1 f7       	brne	.-8      	; 0x203c <initializePassword+0x12>
		UART_sendByte(READY_TO_RECEIVE); /* inform HMI that Control ECU ready to receive the password */
    2044:	86 e1       	ldi	r24, 0x16	; 22
    2046:	0e 94 bb 15 	call	0x2b76	; 0x2b76 <UART_sendByte>
		receivePasswordViaUART(g_receivedPassword);
    204a:	89 e8       	ldi	r24, 0x89	; 137
    204c:	90 e0       	ldi	r25, 0x00	; 0
    204e:	0e 94 5b 10 	call	0x20b6	; 0x20b6 <receivePasswordViaUART>

		while (UART_recieveByte() != READY_TO_SEND);
    2052:	0e 94 d9 15 	call	0x2bb2	; 0x2bb2 <UART_recieveByte>
    2056:	85 31       	cpi	r24, 0x15	; 21
    2058:	e1 f7       	brne	.-8      	; 0x2052 <initializePassword+0x28>
		UART_sendByte(READY_TO_RECEIVE); /* inform HMI to send the confirmation password */
    205a:	86 e1       	ldi	r24, 0x16	; 22
    205c:	0e 94 bb 15 	call	0x2b76	; 0x2b76 <UART_sendByte>
		receivePasswordViaUART(confirmationPassword);
    2060:	ce 01       	movw	r24, r28
    2062:	02 96       	adiw	r24, 0x02	; 2
    2064:	0e 94 5b 10 	call	0x20b6	; 0x20b6 <receivePasswordViaUART>

		if (compare_passwords(g_receivedPassword, confirmationPassword) == PASSWORD_MATCHED)
    2068:	89 e8       	ldi	r24, 0x89	; 137
    206a:	90 e0       	ldi	r25, 0x00	; 0
    206c:	9e 01       	movw	r18, r28
    206e:	2e 5f       	subi	r18, 0xFE	; 254
    2070:	3f 4f       	sbci	r19, 0xFF	; 255
    2072:	b9 01       	movw	r22, r18
    2074:	0e 94 9a 0f 	call	0x1f34	; 0x1f34 <compare_passwords>
    2078:	81 30       	cpi	r24, 0x01	; 1
    207a:	59 f4       	brne	.+22     	; 0x2092 <initializePassword+0x68>
		{
			UART_sendByte(READY_TO_SEND);
    207c:	85 e1       	ldi	r24, 0x15	; 21
    207e:	0e 94 bb 15 	call	0x2b76	; 0x2b76 <UART_sendByte>
			UART_sendByte(PASSWORD_MATCHED);
    2082:	81 e0       	ldi	r24, 0x01	; 1
    2084:	0e 94 bb 15 	call	0x2b76	; 0x2b76 <UART_sendByte>
			storePassword();
    2088:	0e 94 19 11 	call	0x2232	; 0x2232 <storePassword>
			check = 1;
    208c:	81 e0       	ldi	r24, 0x01	; 1
    208e:	89 83       	std	Y+1, r24	; 0x01
    2090:	06 c0       	rjmp	.+12     	; 0x209e <initializePassword+0x74>
		}
		else
		{
			UART_sendByte(READY_TO_SEND);
    2092:	85 e1       	ldi	r24, 0x15	; 21
    2094:	0e 94 bb 15 	call	0x2b76	; 0x2b76 <UART_sendByte>
			UART_sendByte(PASSWORD_MISMATCHED);
    2098:	80 e0       	ldi	r24, 0x00	; 0
    209a:	0e 94 bb 15 	call	0x2b76	; 0x2b76 <UART_sendByte>
void initializePassword(void)
{
	/* do not return from this function till Control ECU sends a PASSWORD_MATCH signal */
	uint8 confirmationPassword[PASSWORD_LENGTH];
	uint8 check = 0;
	while(!check)
    209e:	89 81       	ldd	r24, Y+1	; 0x01
    20a0:	88 23       	and	r24, r24
    20a2:	61 f2       	breq	.-104    	; 0x203c <initializePassword+0x12>
		{
			UART_sendByte(READY_TO_SEND);
			UART_sendByte(PASSWORD_MISMATCHED);
		}
	}
}
    20a4:	26 96       	adiw	r28, 0x06	; 6
    20a6:	0f b6       	in	r0, 0x3f	; 63
    20a8:	f8 94       	cli
    20aa:	de bf       	out	0x3e, r29	; 62
    20ac:	0f be       	out	0x3f, r0	; 63
    20ae:	cd bf       	out	0x3d, r28	; 61
    20b0:	cf 91       	pop	r28
    20b2:	df 91       	pop	r29
    20b4:	08 95       	ret

000020b6 <receivePasswordViaUART>:

void receivePasswordViaUART(uint8 * passwordArray)
{
    20b6:	0f 93       	push	r16
    20b8:	1f 93       	push	r17
    20ba:	df 93       	push	r29
    20bc:	cf 93       	push	r28
    20be:	cd b7       	in	r28, 0x3d	; 61
    20c0:	de b7       	in	r29, 0x3e	; 62
    20c2:	61 97       	sbiw	r28, 0x11	; 17
    20c4:	0f b6       	in	r0, 0x3f	; 63
    20c6:	f8 94       	cli
    20c8:	de bf       	out	0x3e, r29	; 62
    20ca:	0f be       	out	0x3f, r0	; 63
    20cc:	cd bf       	out	0x3d, r28	; 61
    20ce:	99 8b       	std	Y+17, r25	; 0x11
    20d0:	88 8b       	std	Y+16, r24	; 0x10
	uint8 count;
	for (count = 0; count < PASSWORD_LENGTH; count++)
    20d2:	1f 86       	std	Y+15, r1	; 0x0f
    20d4:	81 c0       	rjmp	.+258    	; 0x21d8 <receivePasswordViaUART+0x122>
	{
		*(passwordArray+count) = UART_recieveByte();
    20d6:	8f 85       	ldd	r24, Y+15	; 0x0f
    20d8:	28 2f       	mov	r18, r24
    20da:	30 e0       	ldi	r19, 0x00	; 0
    20dc:	88 89       	ldd	r24, Y+16	; 0x10
    20de:	99 89       	ldd	r25, Y+17	; 0x11
    20e0:	8c 01       	movw	r16, r24
    20e2:	02 0f       	add	r16, r18
    20e4:	13 1f       	adc	r17, r19
    20e6:	0e 94 d9 15 	call	0x2bb2	; 0x2bb2 <UART_recieveByte>
    20ea:	f8 01       	movw	r30, r16
    20ec:	80 83       	st	Z, r24
    20ee:	80 e0       	ldi	r24, 0x00	; 0
    20f0:	90 e0       	ldi	r25, 0x00	; 0
    20f2:	a8 ec       	ldi	r26, 0xC8	; 200
    20f4:	b2 e4       	ldi	r27, 0x42	; 66
    20f6:	8b 87       	std	Y+11, r24	; 0x0b
    20f8:	9c 87       	std	Y+12, r25	; 0x0c
    20fa:	ad 87       	std	Y+13, r26	; 0x0d
    20fc:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    20fe:	6b 85       	ldd	r22, Y+11	; 0x0b
    2100:	7c 85       	ldd	r23, Y+12	; 0x0c
    2102:	8d 85       	ldd	r24, Y+13	; 0x0d
    2104:	9e 85       	ldd	r25, Y+14	; 0x0e
    2106:	20 e0       	ldi	r18, 0x00	; 0
    2108:	30 e0       	ldi	r19, 0x00	; 0
    210a:	4a e7       	ldi	r20, 0x7A	; 122
    210c:	53 e4       	ldi	r21, 0x43	; 67
    210e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2112:	dc 01       	movw	r26, r24
    2114:	cb 01       	movw	r24, r22
    2116:	8f 83       	std	Y+7, r24	; 0x07
    2118:	98 87       	std	Y+8, r25	; 0x08
    211a:	a9 87       	std	Y+9, r26	; 0x09
    211c:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    211e:	6f 81       	ldd	r22, Y+7	; 0x07
    2120:	78 85       	ldd	r23, Y+8	; 0x08
    2122:	89 85       	ldd	r24, Y+9	; 0x09
    2124:	9a 85       	ldd	r25, Y+10	; 0x0a
    2126:	20 e0       	ldi	r18, 0x00	; 0
    2128:	30 e0       	ldi	r19, 0x00	; 0
    212a:	40 e8       	ldi	r20, 0x80	; 128
    212c:	5f e3       	ldi	r21, 0x3F	; 63
    212e:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    2132:	88 23       	and	r24, r24
    2134:	2c f4       	brge	.+10     	; 0x2140 <receivePasswordViaUART+0x8a>
		__ticks = 1;
    2136:	81 e0       	ldi	r24, 0x01	; 1
    2138:	90 e0       	ldi	r25, 0x00	; 0
    213a:	9e 83       	std	Y+6, r25	; 0x06
    213c:	8d 83       	std	Y+5, r24	; 0x05
    213e:	3f c0       	rjmp	.+126    	; 0x21be <receivePasswordViaUART+0x108>
	else if (__tmp > 65535)
    2140:	6f 81       	ldd	r22, Y+7	; 0x07
    2142:	78 85       	ldd	r23, Y+8	; 0x08
    2144:	89 85       	ldd	r24, Y+9	; 0x09
    2146:	9a 85       	ldd	r25, Y+10	; 0x0a
    2148:	20 e0       	ldi	r18, 0x00	; 0
    214a:	3f ef       	ldi	r19, 0xFF	; 255
    214c:	4f e7       	ldi	r20, 0x7F	; 127
    214e:	57 e4       	ldi	r21, 0x47	; 71
    2150:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    2154:	18 16       	cp	r1, r24
    2156:	4c f5       	brge	.+82     	; 0x21aa <receivePasswordViaUART+0xf4>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2158:	6b 85       	ldd	r22, Y+11	; 0x0b
    215a:	7c 85       	ldd	r23, Y+12	; 0x0c
    215c:	8d 85       	ldd	r24, Y+13	; 0x0d
    215e:	9e 85       	ldd	r25, Y+14	; 0x0e
    2160:	20 e0       	ldi	r18, 0x00	; 0
    2162:	30 e0       	ldi	r19, 0x00	; 0
    2164:	40 e2       	ldi	r20, 0x20	; 32
    2166:	51 e4       	ldi	r21, 0x41	; 65
    2168:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    216c:	dc 01       	movw	r26, r24
    216e:	cb 01       	movw	r24, r22
    2170:	bc 01       	movw	r22, r24
    2172:	cd 01       	movw	r24, r26
    2174:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2178:	dc 01       	movw	r26, r24
    217a:	cb 01       	movw	r24, r22
    217c:	9e 83       	std	Y+6, r25	; 0x06
    217e:	8d 83       	std	Y+5, r24	; 0x05
    2180:	0f c0       	rjmp	.+30     	; 0x21a0 <receivePasswordViaUART+0xea>
    2182:	89 e1       	ldi	r24, 0x19	; 25
    2184:	90 e0       	ldi	r25, 0x00	; 0
    2186:	9c 83       	std	Y+4, r25	; 0x04
    2188:	8b 83       	std	Y+3, r24	; 0x03
    218a:	8b 81       	ldd	r24, Y+3	; 0x03
    218c:	9c 81       	ldd	r25, Y+4	; 0x04
    218e:	01 97       	sbiw	r24, 0x01	; 1
    2190:	f1 f7       	brne	.-4      	; 0x218e <receivePasswordViaUART+0xd8>
    2192:	9c 83       	std	Y+4, r25	; 0x04
    2194:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2196:	8d 81       	ldd	r24, Y+5	; 0x05
    2198:	9e 81       	ldd	r25, Y+6	; 0x06
    219a:	01 97       	sbiw	r24, 0x01	; 1
    219c:	9e 83       	std	Y+6, r25	; 0x06
    219e:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    21a0:	8d 81       	ldd	r24, Y+5	; 0x05
    21a2:	9e 81       	ldd	r25, Y+6	; 0x06
    21a4:	00 97       	sbiw	r24, 0x00	; 0
    21a6:	69 f7       	brne	.-38     	; 0x2182 <receivePasswordViaUART+0xcc>
    21a8:	14 c0       	rjmp	.+40     	; 0x21d2 <receivePasswordViaUART+0x11c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    21aa:	6f 81       	ldd	r22, Y+7	; 0x07
    21ac:	78 85       	ldd	r23, Y+8	; 0x08
    21ae:	89 85       	ldd	r24, Y+9	; 0x09
    21b0:	9a 85       	ldd	r25, Y+10	; 0x0a
    21b2:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    21b6:	dc 01       	movw	r26, r24
    21b8:	cb 01       	movw	r24, r22
    21ba:	9e 83       	std	Y+6, r25	; 0x06
    21bc:	8d 83       	std	Y+5, r24	; 0x05
    21be:	8d 81       	ldd	r24, Y+5	; 0x05
    21c0:	9e 81       	ldd	r25, Y+6	; 0x06
    21c2:	9a 83       	std	Y+2, r25	; 0x02
    21c4:	89 83       	std	Y+1, r24	; 0x01
    21c6:	89 81       	ldd	r24, Y+1	; 0x01
    21c8:	9a 81       	ldd	r25, Y+2	; 0x02
    21ca:	01 97       	sbiw	r24, 0x01	; 1
    21cc:	f1 f7       	brne	.-4      	; 0x21ca <receivePasswordViaUART+0x114>
    21ce:	9a 83       	std	Y+2, r25	; 0x02
    21d0:	89 83       	std	Y+1, r24	; 0x01
}

void receivePasswordViaUART(uint8 * passwordArray)
{
	uint8 count;
	for (count = 0; count < PASSWORD_LENGTH; count++)
    21d2:	8f 85       	ldd	r24, Y+15	; 0x0f
    21d4:	8f 5f       	subi	r24, 0xFF	; 255
    21d6:	8f 87       	std	Y+15, r24	; 0x0f
    21d8:	8f 85       	ldd	r24, Y+15	; 0x0f
    21da:	85 30       	cpi	r24, 0x05	; 5
    21dc:	08 f4       	brcc	.+2      	; 0x21e0 <receivePasswordViaUART+0x12a>
    21de:	7b cf       	rjmp	.-266    	; 0x20d6 <receivePasswordViaUART+0x20>
	{
		*(passwordArray+count) = UART_recieveByte();
		_delay_ms(100);
	}
}
    21e0:	61 96       	adiw	r28, 0x11	; 17
    21e2:	0f b6       	in	r0, 0x3f	; 63
    21e4:	f8 94       	cli
    21e6:	de bf       	out	0x3e, r29	; 62
    21e8:	0f be       	out	0x3f, r0	; 63
    21ea:	cd bf       	out	0x3d, r28	; 61
    21ec:	cf 91       	pop	r28
    21ee:	df 91       	pop	r29
    21f0:	1f 91       	pop	r17
    21f2:	0f 91       	pop	r16
    21f4:	08 95       	ret

000021f6 <updateStoredPassword>:

void updateStoredPassword(void)
{
    21f6:	df 93       	push	r29
    21f8:	cf 93       	push	r28
    21fa:	0f 92       	push	r0
    21fc:	cd b7       	in	r28, 0x3d	; 61
    21fe:	de b7       	in	r29, 0x3e	; 62
	uint8 i;
	for (i = 0; i < PASSWORD_LENGTH; i++)
    2200:	19 82       	std	Y+1, r1	; 0x01
    2202:	10 c0       	rjmp	.+32     	; 0x2224 <updateStoredPassword+0x2e>
	{
		EEPROM_readByte(EEPROM_STORE_ADDREESS+i, g_storedPassword+i);
    2204:	89 81       	ldd	r24, Y+1	; 0x01
    2206:	48 2f       	mov	r20, r24
    2208:	50 e0       	ldi	r21, 0x00	; 0
    220a:	89 81       	ldd	r24, Y+1	; 0x01
    220c:	88 2f       	mov	r24, r24
    220e:	90 e0       	ldi	r25, 0x00	; 0
    2210:	9c 01       	movw	r18, r24
    2212:	22 57       	subi	r18, 0x72	; 114
    2214:	3f 4f       	sbci	r19, 0xFF	; 255
    2216:	ca 01       	movw	r24, r20
    2218:	b9 01       	movw	r22, r18
    221a:	0e 94 65 06 	call	0xcca	; 0xcca <EEPROM_readByte>
}

void updateStoredPassword(void)
{
	uint8 i;
	for (i = 0; i < PASSWORD_LENGTH; i++)
    221e:	89 81       	ldd	r24, Y+1	; 0x01
    2220:	8f 5f       	subi	r24, 0xFF	; 255
    2222:	89 83       	std	Y+1, r24	; 0x01
    2224:	89 81       	ldd	r24, Y+1	; 0x01
    2226:	85 30       	cpi	r24, 0x05	; 5
    2228:	68 f3       	brcs	.-38     	; 0x2204 <updateStoredPassword+0xe>
	{
		EEPROM_readByte(EEPROM_STORE_ADDREESS+i, g_storedPassword+i);
	}
}
    222a:	0f 90       	pop	r0
    222c:	cf 91       	pop	r28
    222e:	df 91       	pop	r29
    2230:	08 95       	ret

00002232 <storePassword>:

void storePassword(void)
{
    2232:	df 93       	push	r29
    2234:	cf 93       	push	r28
    2236:	cd b7       	in	r28, 0x3d	; 61
    2238:	de b7       	in	r29, 0x3e	; 62
    223a:	2f 97       	sbiw	r28, 0x0f	; 15
    223c:	0f b6       	in	r0, 0x3f	; 63
    223e:	f8 94       	cli
    2240:	de bf       	out	0x3e, r29	; 62
    2242:	0f be       	out	0x3f, r0	; 63
    2244:	cd bf       	out	0x3d, r28	; 61
	uint8 i;
	for (i = 0; i < PASSWORD_LENGTH; i++)
    2246:	1f 86       	std	Y+15, r1	; 0x0f
    2248:	83 c0       	rjmp	.+262    	; 0x2350 <storePassword+0x11e>
	{
		EEPROM_writeByte(EEPROM_STORE_ADDREESS + i, g_receivedPassword[i]);
    224a:	8f 85       	ldd	r24, Y+15	; 0x0f
    224c:	48 2f       	mov	r20, r24
    224e:	50 e0       	ldi	r21, 0x00	; 0
    2250:	8f 85       	ldd	r24, Y+15	; 0x0f
    2252:	88 2f       	mov	r24, r24
    2254:	90 e0       	ldi	r25, 0x00	; 0
    2256:	fc 01       	movw	r30, r24
    2258:	e7 57       	subi	r30, 0x77	; 119
    225a:	ff 4f       	sbci	r31, 0xFF	; 255
    225c:	20 81       	ld	r18, Z
    225e:	ca 01       	movw	r24, r20
    2260:	62 2f       	mov	r22, r18
    2262:	0e 94 24 06 	call	0xc48	; 0xc48 <EEPROM_writeByte>
    2266:	80 e0       	ldi	r24, 0x00	; 0
    2268:	90 e0       	ldi	r25, 0x00	; 0
    226a:	a8 ec       	ldi	r26, 0xC8	; 200
    226c:	b2 e4       	ldi	r27, 0x42	; 66
    226e:	8b 87       	std	Y+11, r24	; 0x0b
    2270:	9c 87       	std	Y+12, r25	; 0x0c
    2272:	ad 87       	std	Y+13, r26	; 0x0d
    2274:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2276:	6b 85       	ldd	r22, Y+11	; 0x0b
    2278:	7c 85       	ldd	r23, Y+12	; 0x0c
    227a:	8d 85       	ldd	r24, Y+13	; 0x0d
    227c:	9e 85       	ldd	r25, Y+14	; 0x0e
    227e:	20 e0       	ldi	r18, 0x00	; 0
    2280:	30 e0       	ldi	r19, 0x00	; 0
    2282:	4a e7       	ldi	r20, 0x7A	; 122
    2284:	53 e4       	ldi	r21, 0x43	; 67
    2286:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    228a:	dc 01       	movw	r26, r24
    228c:	cb 01       	movw	r24, r22
    228e:	8f 83       	std	Y+7, r24	; 0x07
    2290:	98 87       	std	Y+8, r25	; 0x08
    2292:	a9 87       	std	Y+9, r26	; 0x09
    2294:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    2296:	6f 81       	ldd	r22, Y+7	; 0x07
    2298:	78 85       	ldd	r23, Y+8	; 0x08
    229a:	89 85       	ldd	r24, Y+9	; 0x09
    229c:	9a 85       	ldd	r25, Y+10	; 0x0a
    229e:	20 e0       	ldi	r18, 0x00	; 0
    22a0:	30 e0       	ldi	r19, 0x00	; 0
    22a2:	40 e8       	ldi	r20, 0x80	; 128
    22a4:	5f e3       	ldi	r21, 0x3F	; 63
    22a6:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    22aa:	88 23       	and	r24, r24
    22ac:	2c f4       	brge	.+10     	; 0x22b8 <storePassword+0x86>
		__ticks = 1;
    22ae:	81 e0       	ldi	r24, 0x01	; 1
    22b0:	90 e0       	ldi	r25, 0x00	; 0
    22b2:	9e 83       	std	Y+6, r25	; 0x06
    22b4:	8d 83       	std	Y+5, r24	; 0x05
    22b6:	3f c0       	rjmp	.+126    	; 0x2336 <storePassword+0x104>
	else if (__tmp > 65535)
    22b8:	6f 81       	ldd	r22, Y+7	; 0x07
    22ba:	78 85       	ldd	r23, Y+8	; 0x08
    22bc:	89 85       	ldd	r24, Y+9	; 0x09
    22be:	9a 85       	ldd	r25, Y+10	; 0x0a
    22c0:	20 e0       	ldi	r18, 0x00	; 0
    22c2:	3f ef       	ldi	r19, 0xFF	; 255
    22c4:	4f e7       	ldi	r20, 0x7F	; 127
    22c6:	57 e4       	ldi	r21, 0x47	; 71
    22c8:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    22cc:	18 16       	cp	r1, r24
    22ce:	4c f5       	brge	.+82     	; 0x2322 <storePassword+0xf0>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    22d0:	6b 85       	ldd	r22, Y+11	; 0x0b
    22d2:	7c 85       	ldd	r23, Y+12	; 0x0c
    22d4:	8d 85       	ldd	r24, Y+13	; 0x0d
    22d6:	9e 85       	ldd	r25, Y+14	; 0x0e
    22d8:	20 e0       	ldi	r18, 0x00	; 0
    22da:	30 e0       	ldi	r19, 0x00	; 0
    22dc:	40 e2       	ldi	r20, 0x20	; 32
    22de:	51 e4       	ldi	r21, 0x41	; 65
    22e0:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    22e4:	dc 01       	movw	r26, r24
    22e6:	cb 01       	movw	r24, r22
    22e8:	bc 01       	movw	r22, r24
    22ea:	cd 01       	movw	r24, r26
    22ec:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    22f0:	dc 01       	movw	r26, r24
    22f2:	cb 01       	movw	r24, r22
    22f4:	9e 83       	std	Y+6, r25	; 0x06
    22f6:	8d 83       	std	Y+5, r24	; 0x05
    22f8:	0f c0       	rjmp	.+30     	; 0x2318 <storePassword+0xe6>
    22fa:	89 e1       	ldi	r24, 0x19	; 25
    22fc:	90 e0       	ldi	r25, 0x00	; 0
    22fe:	9c 83       	std	Y+4, r25	; 0x04
    2300:	8b 83       	std	Y+3, r24	; 0x03
    2302:	8b 81       	ldd	r24, Y+3	; 0x03
    2304:	9c 81       	ldd	r25, Y+4	; 0x04
    2306:	01 97       	sbiw	r24, 0x01	; 1
    2308:	f1 f7       	brne	.-4      	; 0x2306 <storePassword+0xd4>
    230a:	9c 83       	std	Y+4, r25	; 0x04
    230c:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    230e:	8d 81       	ldd	r24, Y+5	; 0x05
    2310:	9e 81       	ldd	r25, Y+6	; 0x06
    2312:	01 97       	sbiw	r24, 0x01	; 1
    2314:	9e 83       	std	Y+6, r25	; 0x06
    2316:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2318:	8d 81       	ldd	r24, Y+5	; 0x05
    231a:	9e 81       	ldd	r25, Y+6	; 0x06
    231c:	00 97       	sbiw	r24, 0x00	; 0
    231e:	69 f7       	brne	.-38     	; 0x22fa <storePassword+0xc8>
    2320:	14 c0       	rjmp	.+40     	; 0x234a <storePassword+0x118>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2322:	6f 81       	ldd	r22, Y+7	; 0x07
    2324:	78 85       	ldd	r23, Y+8	; 0x08
    2326:	89 85       	ldd	r24, Y+9	; 0x09
    2328:	9a 85       	ldd	r25, Y+10	; 0x0a
    232a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    232e:	dc 01       	movw	r26, r24
    2330:	cb 01       	movw	r24, r22
    2332:	9e 83       	std	Y+6, r25	; 0x06
    2334:	8d 83       	std	Y+5, r24	; 0x05
    2336:	8d 81       	ldd	r24, Y+5	; 0x05
    2338:	9e 81       	ldd	r25, Y+6	; 0x06
    233a:	9a 83       	std	Y+2, r25	; 0x02
    233c:	89 83       	std	Y+1, r24	; 0x01
    233e:	89 81       	ldd	r24, Y+1	; 0x01
    2340:	9a 81       	ldd	r25, Y+2	; 0x02
    2342:	01 97       	sbiw	r24, 0x01	; 1
    2344:	f1 f7       	brne	.-4      	; 0x2342 <storePassword+0x110>
    2346:	9a 83       	std	Y+2, r25	; 0x02
    2348:	89 83       	std	Y+1, r24	; 0x01
}

void storePassword(void)
{
	uint8 i;
	for (i = 0; i < PASSWORD_LENGTH; i++)
    234a:	8f 85       	ldd	r24, Y+15	; 0x0f
    234c:	8f 5f       	subi	r24, 0xFF	; 255
    234e:	8f 87       	std	Y+15, r24	; 0x0f
    2350:	8f 85       	ldd	r24, Y+15	; 0x0f
    2352:	85 30       	cpi	r24, 0x05	; 5
    2354:	08 f4       	brcc	.+2      	; 0x2358 <storePassword+0x126>
    2356:	79 cf       	rjmp	.-270    	; 0x224a <storePassword+0x18>





}
    2358:	2f 96       	adiw	r28, 0x0f	; 15
    235a:	0f b6       	in	r0, 0x3f	; 63
    235c:	f8 94       	cli
    235e:	de bf       	out	0x3e, r29	; 62
    2360:	0f be       	out	0x3f, r0	; 63
    2362:	cd bf       	out	0x3d, r28	; 61
    2364:	cf 91       	pop	r28
    2366:	df 91       	pop	r29
    2368:	08 95       	ret

0000236a <__vector_9>:
/*******************************************************************************
 *                      Functions Definitions                                  *
 *******************************************************************************/

ISR(TIMER0_OVF_vect)
{
    236a:	1f 92       	push	r1
    236c:	0f 92       	push	r0
    236e:	0f b6       	in	r0, 0x3f	; 63
    2370:	0f 92       	push	r0
    2372:	11 24       	eor	r1, r1
    2374:	2f 93       	push	r18
    2376:	3f 93       	push	r19
    2378:	4f 93       	push	r20
    237a:	5f 93       	push	r21
    237c:	6f 93       	push	r22
    237e:	7f 93       	push	r23
    2380:	8f 93       	push	r24
    2382:	9f 93       	push	r25
    2384:	af 93       	push	r26
    2386:	bf 93       	push	r27
    2388:	ef 93       	push	r30
    238a:	ff 93       	push	r31
    238c:	df 93       	push	r29
    238e:	cf 93       	push	r28
    2390:	cd b7       	in	r28, 0x3d	; 61
    2392:	de b7       	in	r29, 0x3e	; 62
	if (g_Timer0CallBackPtr != NULL_PTR)
    2394:	80 91 83 00 	lds	r24, 0x0083
    2398:	90 91 84 00 	lds	r25, 0x0084
    239c:	00 97       	sbiw	r24, 0x00	; 0
    239e:	29 f0       	breq	.+10     	; 0x23aa <__vector_9+0x40>
	{
		(*g_Timer0CallBackPtr)();
    23a0:	e0 91 83 00 	lds	r30, 0x0083
    23a4:	f0 91 84 00 	lds	r31, 0x0084
    23a8:	09 95       	icall
	}
}
    23aa:	cf 91       	pop	r28
    23ac:	df 91       	pop	r29
    23ae:	ff 91       	pop	r31
    23b0:	ef 91       	pop	r30
    23b2:	bf 91       	pop	r27
    23b4:	af 91       	pop	r26
    23b6:	9f 91       	pop	r25
    23b8:	8f 91       	pop	r24
    23ba:	7f 91       	pop	r23
    23bc:	6f 91       	pop	r22
    23be:	5f 91       	pop	r21
    23c0:	4f 91       	pop	r20
    23c2:	3f 91       	pop	r19
    23c4:	2f 91       	pop	r18
    23c6:	0f 90       	pop	r0
    23c8:	0f be       	out	0x3f, r0	; 63
    23ca:	0f 90       	pop	r0
    23cc:	1f 90       	pop	r1
    23ce:	18 95       	reti

000023d0 <__vector_19>:

/* Timer0 compare */
ISR(TIMER0_COMP_vect)
{
    23d0:	1f 92       	push	r1
    23d2:	0f 92       	push	r0
    23d4:	0f b6       	in	r0, 0x3f	; 63
    23d6:	0f 92       	push	r0
    23d8:	11 24       	eor	r1, r1
    23da:	2f 93       	push	r18
    23dc:	3f 93       	push	r19
    23de:	4f 93       	push	r20
    23e0:	5f 93       	push	r21
    23e2:	6f 93       	push	r22
    23e4:	7f 93       	push	r23
    23e6:	8f 93       	push	r24
    23e8:	9f 93       	push	r25
    23ea:	af 93       	push	r26
    23ec:	bf 93       	push	r27
    23ee:	ef 93       	push	r30
    23f0:	ff 93       	push	r31
    23f2:	df 93       	push	r29
    23f4:	cf 93       	push	r28
    23f6:	cd b7       	in	r28, 0x3d	; 61
    23f8:	de b7       	in	r29, 0x3e	; 62
	if (g_Timer0CallBackPtr != NULL_PTR)
    23fa:	80 91 83 00 	lds	r24, 0x0083
    23fe:	90 91 84 00 	lds	r25, 0x0084
    2402:	00 97       	sbiw	r24, 0x00	; 0
    2404:	29 f0       	breq	.+10     	; 0x2410 <__vector_19+0x40>
	{
		(*g_Timer0CallBackPtr)();
    2406:	e0 91 83 00 	lds	r30, 0x0083
    240a:	f0 91 84 00 	lds	r31, 0x0084
    240e:	09 95       	icall
	}
}
    2410:	cf 91       	pop	r28
    2412:	df 91       	pop	r29
    2414:	ff 91       	pop	r31
    2416:	ef 91       	pop	r30
    2418:	bf 91       	pop	r27
    241a:	af 91       	pop	r26
    241c:	9f 91       	pop	r25
    241e:	8f 91       	pop	r24
    2420:	7f 91       	pop	r23
    2422:	6f 91       	pop	r22
    2424:	5f 91       	pop	r21
    2426:	4f 91       	pop	r20
    2428:	3f 91       	pop	r19
    242a:	2f 91       	pop	r18
    242c:	0f 90       	pop	r0
    242e:	0f be       	out	0x3f, r0	; 63
    2430:	0f 90       	pop	r0
    2432:	1f 90       	pop	r1
    2434:	18 95       	reti

00002436 <__vector_8>:

/* Timer1 overflow*/
ISR(TIMER1_OVF_vect)
{
    2436:	1f 92       	push	r1
    2438:	0f 92       	push	r0
    243a:	0f b6       	in	r0, 0x3f	; 63
    243c:	0f 92       	push	r0
    243e:	11 24       	eor	r1, r1
    2440:	2f 93       	push	r18
    2442:	3f 93       	push	r19
    2444:	4f 93       	push	r20
    2446:	5f 93       	push	r21
    2448:	6f 93       	push	r22
    244a:	7f 93       	push	r23
    244c:	8f 93       	push	r24
    244e:	9f 93       	push	r25
    2450:	af 93       	push	r26
    2452:	bf 93       	push	r27
    2454:	ef 93       	push	r30
    2456:	ff 93       	push	r31
    2458:	df 93       	push	r29
    245a:	cf 93       	push	r28
    245c:	cd b7       	in	r28, 0x3d	; 61
    245e:	de b7       	in	r29, 0x3e	; 62
	if (g_Timer1CallBackPtr != NULL_PTR)
    2460:	80 91 85 00 	lds	r24, 0x0085
    2464:	90 91 86 00 	lds	r25, 0x0086
    2468:	00 97       	sbiw	r24, 0x00	; 0
    246a:	29 f0       	breq	.+10     	; 0x2476 <__vector_8+0x40>
	{
		(*g_Timer1CallBackPtr)();
    246c:	e0 91 85 00 	lds	r30, 0x0085
    2470:	f0 91 86 00 	lds	r31, 0x0086
    2474:	09 95       	icall
	}
}
    2476:	cf 91       	pop	r28
    2478:	df 91       	pop	r29
    247a:	ff 91       	pop	r31
    247c:	ef 91       	pop	r30
    247e:	bf 91       	pop	r27
    2480:	af 91       	pop	r26
    2482:	9f 91       	pop	r25
    2484:	8f 91       	pop	r24
    2486:	7f 91       	pop	r23
    2488:	6f 91       	pop	r22
    248a:	5f 91       	pop	r21
    248c:	4f 91       	pop	r20
    248e:	3f 91       	pop	r19
    2490:	2f 91       	pop	r18
    2492:	0f 90       	pop	r0
    2494:	0f be       	out	0x3f, r0	; 63
    2496:	0f 90       	pop	r0
    2498:	1f 90       	pop	r1
    249a:	18 95       	reti

0000249c <__vector_6>:

/* Timer1 compare */
ISR(TIMER1_COMPA_vect)
{
    249c:	1f 92       	push	r1
    249e:	0f 92       	push	r0
    24a0:	0f b6       	in	r0, 0x3f	; 63
    24a2:	0f 92       	push	r0
    24a4:	11 24       	eor	r1, r1
    24a6:	2f 93       	push	r18
    24a8:	3f 93       	push	r19
    24aa:	4f 93       	push	r20
    24ac:	5f 93       	push	r21
    24ae:	6f 93       	push	r22
    24b0:	7f 93       	push	r23
    24b2:	8f 93       	push	r24
    24b4:	9f 93       	push	r25
    24b6:	af 93       	push	r26
    24b8:	bf 93       	push	r27
    24ba:	ef 93       	push	r30
    24bc:	ff 93       	push	r31
    24be:	df 93       	push	r29
    24c0:	cf 93       	push	r28
    24c2:	cd b7       	in	r28, 0x3d	; 61
    24c4:	de b7       	in	r29, 0x3e	; 62
	if (g_Timer1CallBackPtr != NULL_PTR)
    24c6:	80 91 85 00 	lds	r24, 0x0085
    24ca:	90 91 86 00 	lds	r25, 0x0086
    24ce:	00 97       	sbiw	r24, 0x00	; 0
    24d0:	29 f0       	breq	.+10     	; 0x24dc <__vector_6+0x40>
	{
		(*g_Timer1CallBackPtr)();
    24d2:	e0 91 85 00 	lds	r30, 0x0085
    24d6:	f0 91 86 00 	lds	r31, 0x0086
    24da:	09 95       	icall
	}
}
    24dc:	cf 91       	pop	r28
    24de:	df 91       	pop	r29
    24e0:	ff 91       	pop	r31
    24e2:	ef 91       	pop	r30
    24e4:	bf 91       	pop	r27
    24e6:	af 91       	pop	r26
    24e8:	9f 91       	pop	r25
    24ea:	8f 91       	pop	r24
    24ec:	7f 91       	pop	r23
    24ee:	6f 91       	pop	r22
    24f0:	5f 91       	pop	r21
    24f2:	4f 91       	pop	r20
    24f4:	3f 91       	pop	r19
    24f6:	2f 91       	pop	r18
    24f8:	0f 90       	pop	r0
    24fa:	0f be       	out	0x3f, r0	; 63
    24fc:	0f 90       	pop	r0
    24fe:	1f 90       	pop	r1
    2500:	18 95       	reti

00002502 <__vector_4>:

/* Timer2 overflow*/
ISR(TIMER2_OVF_vect)
{
    2502:	1f 92       	push	r1
    2504:	0f 92       	push	r0
    2506:	0f b6       	in	r0, 0x3f	; 63
    2508:	0f 92       	push	r0
    250a:	11 24       	eor	r1, r1
    250c:	2f 93       	push	r18
    250e:	3f 93       	push	r19
    2510:	4f 93       	push	r20
    2512:	5f 93       	push	r21
    2514:	6f 93       	push	r22
    2516:	7f 93       	push	r23
    2518:	8f 93       	push	r24
    251a:	9f 93       	push	r25
    251c:	af 93       	push	r26
    251e:	bf 93       	push	r27
    2520:	ef 93       	push	r30
    2522:	ff 93       	push	r31
    2524:	df 93       	push	r29
    2526:	cf 93       	push	r28
    2528:	cd b7       	in	r28, 0x3d	; 61
    252a:	de b7       	in	r29, 0x3e	; 62
	if (g_Timer2CallBackPtr != NULL_PTR)
    252c:	80 91 87 00 	lds	r24, 0x0087
    2530:	90 91 88 00 	lds	r25, 0x0088
    2534:	00 97       	sbiw	r24, 0x00	; 0
    2536:	29 f0       	breq	.+10     	; 0x2542 <__vector_4+0x40>
	{
		(*g_Timer2CallBackPtr)();
    2538:	e0 91 87 00 	lds	r30, 0x0087
    253c:	f0 91 88 00 	lds	r31, 0x0088
    2540:	09 95       	icall
	}
}
    2542:	cf 91       	pop	r28
    2544:	df 91       	pop	r29
    2546:	ff 91       	pop	r31
    2548:	ef 91       	pop	r30
    254a:	bf 91       	pop	r27
    254c:	af 91       	pop	r26
    254e:	9f 91       	pop	r25
    2550:	8f 91       	pop	r24
    2552:	7f 91       	pop	r23
    2554:	6f 91       	pop	r22
    2556:	5f 91       	pop	r21
    2558:	4f 91       	pop	r20
    255a:	3f 91       	pop	r19
    255c:	2f 91       	pop	r18
    255e:	0f 90       	pop	r0
    2560:	0f be       	out	0x3f, r0	; 63
    2562:	0f 90       	pop	r0
    2564:	1f 90       	pop	r1
    2566:	18 95       	reti

00002568 <__vector_3>:

/* Timer2 compare */
ISR(TIMER2_COMP_vect)
{
    2568:	1f 92       	push	r1
    256a:	0f 92       	push	r0
    256c:	0f b6       	in	r0, 0x3f	; 63
    256e:	0f 92       	push	r0
    2570:	11 24       	eor	r1, r1
    2572:	2f 93       	push	r18
    2574:	3f 93       	push	r19
    2576:	4f 93       	push	r20
    2578:	5f 93       	push	r21
    257a:	6f 93       	push	r22
    257c:	7f 93       	push	r23
    257e:	8f 93       	push	r24
    2580:	9f 93       	push	r25
    2582:	af 93       	push	r26
    2584:	bf 93       	push	r27
    2586:	ef 93       	push	r30
    2588:	ff 93       	push	r31
    258a:	df 93       	push	r29
    258c:	cf 93       	push	r28
    258e:	cd b7       	in	r28, 0x3d	; 61
    2590:	de b7       	in	r29, 0x3e	; 62
	if (g_Timer2CallBackPtr != NULL_PTR)
    2592:	80 91 87 00 	lds	r24, 0x0087
    2596:	90 91 88 00 	lds	r25, 0x0088
    259a:	00 97       	sbiw	r24, 0x00	; 0
    259c:	29 f0       	breq	.+10     	; 0x25a8 <__vector_3+0x40>
	{
		(*g_Timer2CallBackPtr)();
    259e:	e0 91 87 00 	lds	r30, 0x0087
    25a2:	f0 91 88 00 	lds	r31, 0x0088
    25a6:	09 95       	icall
	}
}
    25a8:	cf 91       	pop	r28
    25aa:	df 91       	pop	r29
    25ac:	ff 91       	pop	r31
    25ae:	ef 91       	pop	r30
    25b0:	bf 91       	pop	r27
    25b2:	af 91       	pop	r26
    25b4:	9f 91       	pop	r25
    25b6:	8f 91       	pop	r24
    25b8:	7f 91       	pop	r23
    25ba:	6f 91       	pop	r22
    25bc:	5f 91       	pop	r21
    25be:	4f 91       	pop	r20
    25c0:	3f 91       	pop	r19
    25c2:	2f 91       	pop	r18
    25c4:	0f 90       	pop	r0
    25c6:	0f be       	out	0x3f, r0	; 63
    25c8:	0f 90       	pop	r0
    25ca:	1f 90       	pop	r1
    25cc:	18 95       	reti

000025ce <Timer2_setCallBack>:
void Timer2_setCallBack(void(*a_ptr)(void))
{
    25ce:	df 93       	push	r29
    25d0:	cf 93       	push	r28
    25d2:	00 d0       	rcall	.+0      	; 0x25d4 <Timer2_setCallBack+0x6>
    25d4:	cd b7       	in	r28, 0x3d	; 61
    25d6:	de b7       	in	r29, 0x3e	; 62
    25d8:	9a 83       	std	Y+2, r25	; 0x02
    25da:	89 83       	std	Y+1, r24	; 0x01
	g_Timer2CallBackPtr = a_ptr;
    25dc:	89 81       	ldd	r24, Y+1	; 0x01
    25de:	9a 81       	ldd	r25, Y+2	; 0x02
    25e0:	90 93 88 00 	sts	0x0088, r25
    25e4:	80 93 87 00 	sts	0x0087, r24
}
    25e8:	0f 90       	pop	r0
    25ea:	0f 90       	pop	r0
    25ec:	cf 91       	pop	r28
    25ee:	df 91       	pop	r29
    25f0:	08 95       	ret

000025f2 <Timer1_setCallBack>:

void Timer1_setCallBack(void(*a_ptr)(void))
{
    25f2:	df 93       	push	r29
    25f4:	cf 93       	push	r28
    25f6:	00 d0       	rcall	.+0      	; 0x25f8 <Timer1_setCallBack+0x6>
    25f8:	cd b7       	in	r28, 0x3d	; 61
    25fa:	de b7       	in	r29, 0x3e	; 62
    25fc:	9a 83       	std	Y+2, r25	; 0x02
    25fe:	89 83       	std	Y+1, r24	; 0x01
	g_Timer1CallBackPtr = a_ptr;
    2600:	89 81       	ldd	r24, Y+1	; 0x01
    2602:	9a 81       	ldd	r25, Y+2	; 0x02
    2604:	90 93 86 00 	sts	0x0086, r25
    2608:	80 93 85 00 	sts	0x0085, r24
}
    260c:	0f 90       	pop	r0
    260e:	0f 90       	pop	r0
    2610:	cf 91       	pop	r28
    2612:	df 91       	pop	r29
    2614:	08 95       	ret

00002616 <Timer0_setCallBack>:

void Timer0_setCallBack(void(*a_ptr)(void))
{
    2616:	df 93       	push	r29
    2618:	cf 93       	push	r28
    261a:	00 d0       	rcall	.+0      	; 0x261c <Timer0_setCallBack+0x6>
    261c:	cd b7       	in	r28, 0x3d	; 61
    261e:	de b7       	in	r29, 0x3e	; 62
    2620:	9a 83       	std	Y+2, r25	; 0x02
    2622:	89 83       	std	Y+1, r24	; 0x01
	g_Timer2CallBackPtr = a_ptr;
    2624:	89 81       	ldd	r24, Y+1	; 0x01
    2626:	9a 81       	ldd	r25, Y+2	; 0x02
    2628:	90 93 88 00 	sts	0x0088, r25
    262c:	80 93 87 00 	sts	0x0087, r24
}
    2630:	0f 90       	pop	r0
    2632:	0f 90       	pop	r0
    2634:	cf 91       	pop	r28
    2636:	df 91       	pop	r29
    2638:	08 95       	ret

0000263a <Timer_init>:
void Timer_init(const TIMER_Config *Config_ptr)
{
    263a:	df 93       	push	r29
    263c:	cf 93       	push	r28
    263e:	00 d0       	rcall	.+0      	; 0x2640 <Timer_init+0x6>
    2640:	cd b7       	in	r28, 0x3d	; 61
    2642:	de b7       	in	r29, 0x3e	; 62
    2644:	9a 83       	std	Y+2, r25	; 0x02
    2646:	89 83       	std	Y+1, r24	; 0x01
if (Config_ptr -> Timer_ID == Timer0)
    2648:	e9 81       	ldd	r30, Y+1	; 0x01
    264a:	fa 81       	ldd	r31, Y+2	; 0x02
    264c:	80 81       	ld	r24, Z
    264e:	88 23       	and	r24, r24
    2650:	09 f0       	breq	.+2      	; 0x2654 <Timer_init+0x1a>
    2652:	52 c0       	rjmp	.+164    	; 0x26f8 <Timer_init+0xbe>
{
		/* starting with adjusting common bits for the timer, then mode-specific bits */

		SET_BIT(TCCR0,FOC0); /* for non-PWM */
    2654:	a3 e5       	ldi	r26, 0x53	; 83
    2656:	b0 e0       	ldi	r27, 0x00	; 0
    2658:	e3 e5       	ldi	r30, 0x53	; 83
    265a:	f0 e0       	ldi	r31, 0x00	; 0
    265c:	80 81       	ld	r24, Z
    265e:	80 68       	ori	r24, 0x80	; 128
    2660:	8c 93       	st	X, r24
		TCNT0 =Config_ptr -> Initial_Value;
    2662:	a2 e5       	ldi	r26, 0x52	; 82
    2664:	b0 e0       	ldi	r27, 0x00	; 0
    2666:	e9 81       	ldd	r30, Y+1	; 0x01
    2668:	fa 81       	ldd	r31, Y+2	; 0x02
    266a:	85 81       	ldd	r24, Z+5	; 0x05
    266c:	96 81       	ldd	r25, Z+6	; 0x06
    266e:	8c 93       	st	X, r24
		TCCR0 = 0;
    2670:	e3 e5       	ldi	r30, 0x53	; 83
    2672:	f0 e0       	ldi	r31, 0x00	; 0
    2674:	10 82       	st	Z, r1
		TCCR0 |= (Config_ptr -> clk_selection);
    2676:	a3 e5       	ldi	r26, 0x53	; 83
    2678:	b0 e0       	ldi	r27, 0x00	; 0
    267a:	e3 e5       	ldi	r30, 0x53	; 83
    267c:	f0 e0       	ldi	r31, 0x00	; 0
    267e:	90 81       	ld	r25, Z
    2680:	e9 81       	ldd	r30, Y+1	; 0x01
    2682:	fa 81       	ldd	r31, Y+2	; 0x02
    2684:	82 81       	ldd	r24, Z+2	; 0x02
    2686:	89 2b       	or	r24, r25
    2688:	8c 93       	st	X, r24

		if (Config_ptr -> mode == NORMAL)
    268a:	e9 81       	ldd	r30, Y+1	; 0x01
    268c:	fa 81       	ldd	r31, Y+2	; 0x02
    268e:	81 81       	ldd	r24, Z+1	; 0x01
    2690:	88 23       	and	r24, r24
    2692:	79 f4       	brne	.+30     	; 0x26b2 <Timer_init+0x78>
		{
			SET_BIT(TIMSK,TOIE0); /* enable interrupts for overflow mode */
    2694:	a9 e5       	ldi	r26, 0x59	; 89
    2696:	b0 e0       	ldi	r27, 0x00	; 0
    2698:	e9 e5       	ldi	r30, 0x59	; 89
    269a:	f0 e0       	ldi	r31, 0x00	; 0
    269c:	80 81       	ld	r24, Z
    269e:	81 60       	ori	r24, 0x01	; 1
    26a0:	8c 93       	st	X, r24
			SET_BIT(TIFR,TOV0); /* enable overflow flag */
    26a2:	a8 e5       	ldi	r26, 0x58	; 88
    26a4:	b0 e0       	ldi	r27, 0x00	; 0
    26a6:	e8 e5       	ldi	r30, 0x58	; 88
    26a8:	f0 e0       	ldi	r31, 0x00	; 0
    26aa:	80 81       	ld	r24, Z
    26ac:	81 60       	ori	r24, 0x01	; 1
    26ae:	8c 93       	st	X, r24
    26b0:	d8 c0       	rjmp	.+432    	; 0x2862 <Timer_init+0x228>

		}
		else if (Config_ptr -> mode == CTC)
    26b2:	e9 81       	ldd	r30, Y+1	; 0x01
    26b4:	fa 81       	ldd	r31, Y+2	; 0x02
    26b6:	81 81       	ldd	r24, Z+1	; 0x01
    26b8:	82 30       	cpi	r24, 0x02	; 2
    26ba:	09 f0       	breq	.+2      	; 0x26be <Timer_init+0x84>
    26bc:	d2 c0       	rjmp	.+420    	; 0x2862 <Timer_init+0x228>
		{
			SET_BIT(TCCR0,WGM01);
    26be:	a3 e5       	ldi	r26, 0x53	; 83
    26c0:	b0 e0       	ldi	r27, 0x00	; 0
    26c2:	e3 e5       	ldi	r30, 0x53	; 83
    26c4:	f0 e0       	ldi	r31, 0x00	; 0
    26c6:	80 81       	ld	r24, Z
    26c8:	88 60       	ori	r24, 0x08	; 8
    26ca:	8c 93       	st	X, r24
			OCR0 = Config_ptr -> CompareValue;
    26cc:	ac e5       	ldi	r26, 0x5C	; 92
    26ce:	b0 e0       	ldi	r27, 0x00	; 0
    26d0:	e9 81       	ldd	r30, Y+1	; 0x01
    26d2:	fa 81       	ldd	r31, Y+2	; 0x02
    26d4:	83 81       	ldd	r24, Z+3	; 0x03
    26d6:	94 81       	ldd	r25, Z+4	; 0x04
    26d8:	8c 93       	st	X, r24
			SET_BIT(TIMSK,OCIE0); /* enable interrupts for CTC mode */
    26da:	a9 e5       	ldi	r26, 0x59	; 89
    26dc:	b0 e0       	ldi	r27, 0x00	; 0
    26de:	e9 e5       	ldi	r30, 0x59	; 89
    26e0:	f0 e0       	ldi	r31, 0x00	; 0
    26e2:	80 81       	ld	r24, Z
    26e4:	82 60       	ori	r24, 0x02	; 2
    26e6:	8c 93       	st	X, r24
			SET_BIT(TIFR,OCF0); /* enable CTC flag */
    26e8:	a8 e5       	ldi	r26, 0x58	; 88
    26ea:	b0 e0       	ldi	r27, 0x00	; 0
    26ec:	e8 e5       	ldi	r30, 0x58	; 88
    26ee:	f0 e0       	ldi	r31, 0x00	; 0
    26f0:	80 81       	ld	r24, Z
    26f2:	82 60       	ori	r24, 0x02	; 2
    26f4:	8c 93       	st	X, r24
    26f6:	b5 c0       	rjmp	.+362    	; 0x2862 <Timer_init+0x228>
		}



	}
else if (Config_ptr -> Timer_ID == Timer1)
    26f8:	e9 81       	ldd	r30, Y+1	; 0x01
    26fa:	fa 81       	ldd	r31, Y+2	; 0x02
    26fc:	80 81       	ld	r24, Z
    26fe:	81 30       	cpi	r24, 0x01	; 1
    2700:	09 f0       	breq	.+2      	; 0x2704 <Timer_init+0xca>
    2702:	59 c0       	rjmp	.+178    	; 0x27b6 <Timer_init+0x17c>
	{
		TCCR1A =0;
    2704:	ef e4       	ldi	r30, 0x4F	; 79
    2706:	f0 e0       	ldi	r31, 0x00	; 0
    2708:	10 82       	st	Z, r1
		SET_BIT(TCCR1A,FOC1A); /* for non-PWM mode */
    270a:	af e4       	ldi	r26, 0x4F	; 79
    270c:	b0 e0       	ldi	r27, 0x00	; 0
    270e:	ef e4       	ldi	r30, 0x4F	; 79
    2710:	f0 e0       	ldi	r31, 0x00	; 0
    2712:	80 81       	ld	r24, Z
    2714:	88 60       	ori	r24, 0x08	; 8
    2716:	8c 93       	st	X, r24
		SET_BIT(TCCR1A,FOC1B);
    2718:	af e4       	ldi	r26, 0x4F	; 79
    271a:	b0 e0       	ldi	r27, 0x00	; 0
    271c:	ef e4       	ldi	r30, 0x4F	; 79
    271e:	f0 e0       	ldi	r31, 0x00	; 0
    2720:	80 81       	ld	r24, Z
    2722:	84 60       	ori	r24, 0x04	; 4
    2724:	8c 93       	st	X, r24
		TCCR1B = Config_ptr -> clk_selection;
    2726:	ae e4       	ldi	r26, 0x4E	; 78
    2728:	b0 e0       	ldi	r27, 0x00	; 0
    272a:	e9 81       	ldd	r30, Y+1	; 0x01
    272c:	fa 81       	ldd	r31, Y+2	; 0x02
    272e:	82 81       	ldd	r24, Z+2	; 0x02
    2730:	8c 93       	st	X, r24
		TCNT1 = Config_ptr -> Initial_Value;
    2732:	ac e4       	ldi	r26, 0x4C	; 76
    2734:	b0 e0       	ldi	r27, 0x00	; 0
    2736:	e9 81       	ldd	r30, Y+1	; 0x01
    2738:	fa 81       	ldd	r31, Y+2	; 0x02
    273a:	85 81       	ldd	r24, Z+5	; 0x05
    273c:	96 81       	ldd	r25, Z+6	; 0x06
    273e:	11 96       	adiw	r26, 0x01	; 1
    2740:	9c 93       	st	X, r25
    2742:	8e 93       	st	-X, r24

		if (Config_ptr -> mode == NORMAL)
    2744:	e9 81       	ldd	r30, Y+1	; 0x01
    2746:	fa 81       	ldd	r31, Y+2	; 0x02
    2748:	81 81       	ldd	r24, Z+1	; 0x01
    274a:	88 23       	and	r24, r24
    274c:	79 f4       	brne	.+30     	; 0x276c <Timer_init+0x132>
		{
			SET_BIT(TIMSK, TOIE1); /* enable interrupts for overflow mode */
    274e:	a9 e5       	ldi	r26, 0x59	; 89
    2750:	b0 e0       	ldi	r27, 0x00	; 0
    2752:	e9 e5       	ldi	r30, 0x59	; 89
    2754:	f0 e0       	ldi	r31, 0x00	; 0
    2756:	80 81       	ld	r24, Z
    2758:	84 60       	ori	r24, 0x04	; 4
    275a:	8c 93       	st	X, r24
			SET_BIT(TIFR,TOV1);
    275c:	a8 e5       	ldi	r26, 0x58	; 88
    275e:	b0 e0       	ldi	r27, 0x00	; 0
    2760:	e8 e5       	ldi	r30, 0x58	; 88
    2762:	f0 e0       	ldi	r31, 0x00	; 0
    2764:	80 81       	ld	r24, Z
    2766:	84 60       	ori	r24, 0x04	; 4
    2768:	8c 93       	st	X, r24
    276a:	7b c0       	rjmp	.+246    	; 0x2862 <Timer_init+0x228>

		}
		else if (Config_ptr -> mode == CTC)
    276c:	e9 81       	ldd	r30, Y+1	; 0x01
    276e:	fa 81       	ldd	r31, Y+2	; 0x02
    2770:	81 81       	ldd	r24, Z+1	; 0x01
    2772:	82 30       	cpi	r24, 0x02	; 2
    2774:	09 f0       	breq	.+2      	; 0x2778 <Timer_init+0x13e>
    2776:	75 c0       	rjmp	.+234    	; 0x2862 <Timer_init+0x228>
		{
			SET_BIT(TCCR1B, WGM12);
    2778:	ae e4       	ldi	r26, 0x4E	; 78
    277a:	b0 e0       	ldi	r27, 0x00	; 0
    277c:	ee e4       	ldi	r30, 0x4E	; 78
    277e:	f0 e0       	ldi	r31, 0x00	; 0
    2780:	80 81       	ld	r24, Z
    2782:	88 60       	ori	r24, 0x08	; 8
    2784:	8c 93       	st	X, r24
			OCR1A = Config_ptr -> CompareValue;
    2786:	aa e4       	ldi	r26, 0x4A	; 74
    2788:	b0 e0       	ldi	r27, 0x00	; 0
    278a:	e9 81       	ldd	r30, Y+1	; 0x01
    278c:	fa 81       	ldd	r31, Y+2	; 0x02
    278e:	83 81       	ldd	r24, Z+3	; 0x03
    2790:	94 81       	ldd	r25, Z+4	; 0x04
    2792:	11 96       	adiw	r26, 0x01	; 1
    2794:	9c 93       	st	X, r25
    2796:	8e 93       	st	-X, r24
			SET_BIT(TIMSK, OCIE1A); /* enable interrupts for CTC mode */
    2798:	a9 e5       	ldi	r26, 0x59	; 89
    279a:	b0 e0       	ldi	r27, 0x00	; 0
    279c:	e9 e5       	ldi	r30, 0x59	; 89
    279e:	f0 e0       	ldi	r31, 0x00	; 0
    27a0:	80 81       	ld	r24, Z
    27a2:	80 61       	ori	r24, 0x10	; 16
    27a4:	8c 93       	st	X, r24
			SET_BIT(TIFR,OCF1A); /* enable CTC flag */
    27a6:	a8 e5       	ldi	r26, 0x58	; 88
    27a8:	b0 e0       	ldi	r27, 0x00	; 0
    27aa:	e8 e5       	ldi	r30, 0x58	; 88
    27ac:	f0 e0       	ldi	r31, 0x00	; 0
    27ae:	80 81       	ld	r24, Z
    27b0:	80 61       	ori	r24, 0x10	; 16
    27b2:	8c 93       	st	X, r24
    27b4:	56 c0       	rjmp	.+172    	; 0x2862 <Timer_init+0x228>
		}



	}
else if (Config_ptr -> Timer_ID == Timer2)
    27b6:	e9 81       	ldd	r30, Y+1	; 0x01
    27b8:	fa 81       	ldd	r31, Y+2	; 0x02
    27ba:	80 81       	ld	r24, Z
    27bc:	82 30       	cpi	r24, 0x02	; 2
    27be:	09 f0       	breq	.+2      	; 0x27c2 <Timer_init+0x188>
    27c0:	50 c0       	rjmp	.+160    	; 0x2862 <Timer_init+0x228>
{
		SET_BIT(TCCR2, FOC2); /* for non-PWM */
    27c2:	a5 e4       	ldi	r26, 0x45	; 69
    27c4:	b0 e0       	ldi	r27, 0x00	; 0
    27c6:	e5 e4       	ldi	r30, 0x45	; 69
    27c8:	f0 e0       	ldi	r31, 0x00	; 0
    27ca:	80 81       	ld	r24, Z
    27cc:	80 68       	ori	r24, 0x80	; 128
    27ce:	8c 93       	st	X, r24
		TCNT2 = Config_ptr -> Initial_Value;
    27d0:	a4 e4       	ldi	r26, 0x44	; 68
    27d2:	b0 e0       	ldi	r27, 0x00	; 0
    27d4:	e9 81       	ldd	r30, Y+1	; 0x01
    27d6:	fa 81       	ldd	r31, Y+2	; 0x02
    27d8:	85 81       	ldd	r24, Z+5	; 0x05
    27da:	96 81       	ldd	r25, Z+6	; 0x06
    27dc:	8c 93       	st	X, r24
		TCCR2 = 0;
    27de:	e5 e4       	ldi	r30, 0x45	; 69
    27e0:	f0 e0       	ldi	r31, 0x00	; 0
    27e2:	10 82       	st	Z, r1
		TCCR2 |= (Config_ptr -> clk_selection);
    27e4:	a5 e4       	ldi	r26, 0x45	; 69
    27e6:	b0 e0       	ldi	r27, 0x00	; 0
    27e8:	e5 e4       	ldi	r30, 0x45	; 69
    27ea:	f0 e0       	ldi	r31, 0x00	; 0
    27ec:	90 81       	ld	r25, Z
    27ee:	e9 81       	ldd	r30, Y+1	; 0x01
    27f0:	fa 81       	ldd	r31, Y+2	; 0x02
    27f2:	82 81       	ldd	r24, Z+2	; 0x02
    27f4:	89 2b       	or	r24, r25
    27f6:	8c 93       	st	X, r24

		if (Config_ptr -> mode == NORMAL)
    27f8:	e9 81       	ldd	r30, Y+1	; 0x01
    27fa:	fa 81       	ldd	r31, Y+2	; 0x02
    27fc:	81 81       	ldd	r24, Z+1	; 0x01
    27fe:	88 23       	and	r24, r24
    2800:	79 f4       	brne	.+30     	; 0x2820 <Timer_init+0x1e6>
		{
			SET_BIT(TIMSK, TOIE2); /* enable interrupts for overflow mode */
    2802:	a9 e5       	ldi	r26, 0x59	; 89
    2804:	b0 e0       	ldi	r27, 0x00	; 0
    2806:	e9 e5       	ldi	r30, 0x59	; 89
    2808:	f0 e0       	ldi	r31, 0x00	; 0
    280a:	80 81       	ld	r24, Z
    280c:	80 64       	ori	r24, 0x40	; 64
    280e:	8c 93       	st	X, r24
			SET_BIT(TIFR,TOV2); /* enable overflow flag */
    2810:	a8 e5       	ldi	r26, 0x58	; 88
    2812:	b0 e0       	ldi	r27, 0x00	; 0
    2814:	e8 e5       	ldi	r30, 0x58	; 88
    2816:	f0 e0       	ldi	r31, 0x00	; 0
    2818:	80 81       	ld	r24, Z
    281a:	80 64       	ori	r24, 0x40	; 64
    281c:	8c 93       	st	X, r24
    281e:	21 c0       	rjmp	.+66     	; 0x2862 <Timer_init+0x228>

		}
		else if (Config_ptr -> mode == CTC)
    2820:	e9 81       	ldd	r30, Y+1	; 0x01
    2822:	fa 81       	ldd	r31, Y+2	; 0x02
    2824:	81 81       	ldd	r24, Z+1	; 0x01
    2826:	82 30       	cpi	r24, 0x02	; 2
    2828:	e1 f4       	brne	.+56     	; 0x2862 <Timer_init+0x228>
		{
			SET_BIT(TCCR0, WGM21);
    282a:	a3 e5       	ldi	r26, 0x53	; 83
    282c:	b0 e0       	ldi	r27, 0x00	; 0
    282e:	e3 e5       	ldi	r30, 0x53	; 83
    2830:	f0 e0       	ldi	r31, 0x00	; 0
    2832:	80 81       	ld	r24, Z
    2834:	88 60       	ori	r24, 0x08	; 8
    2836:	8c 93       	st	X, r24
			OCR2 = Config_ptr -> CompareValue;
    2838:	a3 e4       	ldi	r26, 0x43	; 67
    283a:	b0 e0       	ldi	r27, 0x00	; 0
    283c:	e9 81       	ldd	r30, Y+1	; 0x01
    283e:	fa 81       	ldd	r31, Y+2	; 0x02
    2840:	83 81       	ldd	r24, Z+3	; 0x03
    2842:	94 81       	ldd	r25, Z+4	; 0x04
    2844:	8c 93       	st	X, r24
			SET_BIT(TIMSK, OCIE2); /* enable interrupts for CTC mode */
    2846:	a9 e5       	ldi	r26, 0x59	; 89
    2848:	b0 e0       	ldi	r27, 0x00	; 0
    284a:	e9 e5       	ldi	r30, 0x59	; 89
    284c:	f0 e0       	ldi	r31, 0x00	; 0
    284e:	80 81       	ld	r24, Z
    2850:	80 68       	ori	r24, 0x80	; 128
    2852:	8c 93       	st	X, r24
			SET_BIT(TIFR,OCF2); /* enable CTC flag */
    2854:	a8 e5       	ldi	r26, 0x58	; 88
    2856:	b0 e0       	ldi	r27, 0x00	; 0
    2858:	e8 e5       	ldi	r30, 0x58	; 88
    285a:	f0 e0       	ldi	r31, 0x00	; 0
    285c:	80 81       	ld	r24, Z
    285e:	80 68       	ori	r24, 0x80	; 128
    2860:	8c 93       	st	X, r24
		}
	}
}
    2862:	0f 90       	pop	r0
    2864:	0f 90       	pop	r0
    2866:	cf 91       	pop	r28
    2868:	df 91       	pop	r29
    286a:	08 95       	ret

0000286c <Timer_DeInit>:


void Timer_DeInit(TIMER_ID timer_ID)
{
    286c:	df 93       	push	r29
    286e:	cf 93       	push	r28
    2870:	0f 92       	push	r0
    2872:	cd b7       	in	r28, 0x3d	; 61
    2874:	de b7       	in	r29, 0x3e	; 62
    2876:	89 83       	std	Y+1, r24	; 0x01
	if (timer_ID == Timer0)
    2878:	89 81       	ldd	r24, Y+1	; 0x01
    287a:	88 23       	and	r24, r24
    287c:	e1 f4       	brne	.+56     	; 0x28b6 <Timer_DeInit+0x4a>
	{
		TCCR0 = 0;
    287e:	e3 e5       	ldi	r30, 0x53	; 83
    2880:	f0 e0       	ldi	r31, 0x00	; 0
    2882:	10 82       	st	Z, r1
		TCNT0= 0; /* clear initial value */
    2884:	e2 e5       	ldi	r30, 0x52	; 82
    2886:	f0 e0       	ldi	r31, 0x00	; 0
    2888:	10 82       	st	Z, r1
		OCR0 = 0; /* clear compare value for CTC mode*/
    288a:	ec e5       	ldi	r30, 0x5C	; 92
    288c:	f0 e0       	ldi	r31, 0x00	; 0
    288e:	10 82       	st	Z, r1
		CLEAR_BIT(TIMSK,OCIE0); /* disable interrupts for CTC mode */
    2890:	a9 e5       	ldi	r26, 0x59	; 89
    2892:	b0 e0       	ldi	r27, 0x00	; 0
    2894:	e9 e5       	ldi	r30, 0x59	; 89
    2896:	f0 e0       	ldi	r31, 0x00	; 0
    2898:	80 81       	ld	r24, Z
    289a:	8d 7f       	andi	r24, 0xFD	; 253
    289c:	8c 93       	st	X, r24
		CLEAR_BIT(TIMSK,TOIE0); /* disable interrupts for overflow mode */
    289e:	a9 e5       	ldi	r26, 0x59	; 89
    28a0:	b0 e0       	ldi	r27, 0x00	; 0
    28a2:	e9 e5       	ldi	r30, 0x59	; 89
    28a4:	f0 e0       	ldi	r31, 0x00	; 0
    28a6:	80 81       	ld	r24, Z
    28a8:	8e 7f       	andi	r24, 0xFE	; 254
    28aa:	8c 93       	st	X, r24
		g_Timer0CallBackPtr = NULL_PTR; /* clear the call-back function */
    28ac:	10 92 84 00 	sts	0x0084, r1
    28b0:	10 92 83 00 	sts	0x0083, r1
    28b4:	42 c0       	rjmp	.+132    	; 0x293a <Timer_DeInit+0xce>

	}
	else if (timer_ID == Timer1)
    28b6:	89 81       	ldd	r24, Y+1	; 0x01
    28b8:	81 30       	cpi	r24, 0x01	; 1
    28ba:	09 f5       	brne	.+66     	; 0x28fe <Timer_DeInit+0x92>
	{
		TCCR1A =0;
    28bc:	ef e4       	ldi	r30, 0x4F	; 79
    28be:	f0 e0       	ldi	r31, 0x00	; 0
    28c0:	10 82       	st	Z, r1
		TCCR1B = 0; /* disable clock */
    28c2:	ee e4       	ldi	r30, 0x4E	; 78
    28c4:	f0 e0       	ldi	r31, 0x00	; 0
    28c6:	10 82       	st	Z, r1
		TCNT1 = 0;
    28c8:	ec e4       	ldi	r30, 0x4C	; 76
    28ca:	f0 e0       	ldi	r31, 0x00	; 0
    28cc:	11 82       	std	Z+1, r1	; 0x01
    28ce:	10 82       	st	Z, r1
		CLEAR_BIT(TIMSK, TOIE1); /* disable interrupts for overflow mode */
    28d0:	a9 e5       	ldi	r26, 0x59	; 89
    28d2:	b0 e0       	ldi	r27, 0x00	; 0
    28d4:	e9 e5       	ldi	r30, 0x59	; 89
    28d6:	f0 e0       	ldi	r31, 0x00	; 0
    28d8:	80 81       	ld	r24, Z
    28da:	8b 7f       	andi	r24, 0xFB	; 251
    28dc:	8c 93       	st	X, r24
		OCR1A = 0;  /* clear compare value for CTC mode */
    28de:	ea e4       	ldi	r30, 0x4A	; 74
    28e0:	f0 e0       	ldi	r31, 0x00	; 0
    28e2:	11 82       	std	Z+1, r1	; 0x01
    28e4:	10 82       	st	Z, r1
		CLEAR_BIT(TIMSK, OCIE1A); /* disable interrupts for CTC mode */
    28e6:	a9 e5       	ldi	r26, 0x59	; 89
    28e8:	b0 e0       	ldi	r27, 0x00	; 0
    28ea:	e9 e5       	ldi	r30, 0x59	; 89
    28ec:	f0 e0       	ldi	r31, 0x00	; 0
    28ee:	80 81       	ld	r24, Z
    28f0:	8f 7e       	andi	r24, 0xEF	; 239
    28f2:	8c 93       	st	X, r24
		g_Timer1CallBackPtr = NULL_PTR;
    28f4:	10 92 86 00 	sts	0x0086, r1
    28f8:	10 92 85 00 	sts	0x0085, r1
    28fc:	1e c0       	rjmp	.+60     	; 0x293a <Timer_DeInit+0xce>

	}
	else if (timer_ID == Timer2)
    28fe:	89 81       	ldd	r24, Y+1	; 0x01
    2900:	82 30       	cpi	r24, 0x02	; 2
    2902:	d9 f4       	brne	.+54     	; 0x293a <Timer_DeInit+0xce>
	{
		TCCR2 = 0;
    2904:	e5 e4       	ldi	r30, 0x45	; 69
    2906:	f0 e0       	ldi	r31, 0x00	; 0
    2908:	10 82       	st	Z, r1
		TCNT2 = 0; /* clear initial value */
    290a:	e4 e4       	ldi	r30, 0x44	; 68
    290c:	f0 e0       	ldi	r31, 0x00	; 0
    290e:	10 82       	st	Z, r1
		OCR2 = 0; /* clear compare value for CTC mode*/
    2910:	e3 e4       	ldi	r30, 0x43	; 67
    2912:	f0 e0       	ldi	r31, 0x00	; 0
    2914:	10 82       	st	Z, r1
		CLEAR_BIT(TIMSK, OCIE2); /* disable interrupts for CTC mode */
    2916:	a9 e5       	ldi	r26, 0x59	; 89
    2918:	b0 e0       	ldi	r27, 0x00	; 0
    291a:	e9 e5       	ldi	r30, 0x59	; 89
    291c:	f0 e0       	ldi	r31, 0x00	; 0
    291e:	80 81       	ld	r24, Z
    2920:	8f 77       	andi	r24, 0x7F	; 127
    2922:	8c 93       	st	X, r24
		CLEAR_BIT(TIMSK, TOIE2); /* disable interrupts for overflow mode */
    2924:	a9 e5       	ldi	r26, 0x59	; 89
    2926:	b0 e0       	ldi	r27, 0x00	; 0
    2928:	e9 e5       	ldi	r30, 0x59	; 89
    292a:	f0 e0       	ldi	r31, 0x00	; 0
    292c:	80 81       	ld	r24, Z
    292e:	8f 7b       	andi	r24, 0xBF	; 191
    2930:	8c 93       	st	X, r24
		g_Timer2CallBackPtr = NULL_PTR;
    2932:	10 92 88 00 	sts	0x0088, r1
    2936:	10 92 87 00 	sts	0x0087, r1
	}
}
    293a:	0f 90       	pop	r0
    293c:	cf 91       	pop	r28
    293e:	df 91       	pop	r29
    2940:	08 95       	ret

00002942 <TWI_init>:

#include "common_macros.h"
#include <avr/io.h>

void TWI_init(TWIconfig * TWIconfig)
{
    2942:	df 93       	push	r29
    2944:	cf 93       	push	r28
    2946:	00 d0       	rcall	.+0      	; 0x2948 <TWI_init+0x6>
    2948:	cd b7       	in	r28, 0x3d	; 61
    294a:	de b7       	in	r29, 0x3e	; 62
    294c:	9a 83       	std	Y+2, r25	; 0x02
    294e:	89 83       	std	Y+1, r24	; 0x01
	TWBR = TWIconfig -> BitRate ;
    2950:	a0 e2       	ldi	r26, 0x20	; 32
    2952:	b0 e0       	ldi	r27, 0x00	; 0
    2954:	e9 81       	ldd	r30, Y+1	; 0x01
    2956:	fa 81       	ldd	r31, Y+2	; 0x02
    2958:	80 81       	ld	r24, Z
    295a:	8c 93       	st	X, r24

	TWCR = (1<<TWINT) | (1<<TWEN);    /*Clear the interrupt flag & enable the TWI module*/
    295c:	e6 e5       	ldi	r30, 0x56	; 86
    295e:	f0 e0       	ldi	r31, 0x00	; 0
    2960:	84 e8       	ldi	r24, 0x84	; 132
    2962:	80 83       	st	Z, r24
	TWSR = (TWSR & 0xF8) | (TWIconfig -> preScaler & 0x03); /*Set the prescaler */
    2964:	a1 e2       	ldi	r26, 0x21	; 33
    2966:	b0 e0       	ldi	r27, 0x00	; 0
    2968:	e1 e2       	ldi	r30, 0x21	; 33
    296a:	f0 e0       	ldi	r31, 0x00	; 0
    296c:	80 81       	ld	r24, Z
    296e:	98 2f       	mov	r25, r24
    2970:	98 7f       	andi	r25, 0xF8	; 248
    2972:	e9 81       	ldd	r30, Y+1	; 0x01
    2974:	fa 81       	ldd	r31, Y+2	; 0x02
    2976:	81 81       	ldd	r24, Z+1	; 0x01
    2978:	83 70       	andi	r24, 0x03	; 3
    297a:	89 2b       	or	r24, r25
    297c:	8c 93       	st	X, r24
	TWAR = (TWIconfig -> SlaveAddress) << 1;	/*Set the slave address (shift is used because the 7 bit address 7-1)*/
    297e:	a2 e2       	ldi	r26, 0x22	; 34
    2980:	b0 e0       	ldi	r27, 0x00	; 0
    2982:	e9 81       	ldd	r30, Y+1	; 0x01
    2984:	fa 81       	ldd	r31, Y+2	; 0x02
    2986:	82 81       	ldd	r24, Z+2	; 0x02
    2988:	88 0f       	add	r24, r24
    298a:	8c 93       	st	X, r24
}
    298c:	0f 90       	pop	r0
    298e:	0f 90       	pop	r0
    2990:	cf 91       	pop	r28
    2992:	df 91       	pop	r29
    2994:	08 95       	ret

00002996 <TWI_start>:

void TWI_start(void)
{
    2996:	df 93       	push	r29
    2998:	cf 93       	push	r28
    299a:	cd b7       	in	r28, 0x3d	; 61
    299c:	de b7       	in	r29, 0x3e	; 62
	/*
	 * Clear the TWINT flag before sending the start bit TWINT=1
	 * send the start bit by TWSTA=1
	 * Enable TWI Module TWEN=1 
	 */
	TWCR = (1 << TWINT) | (1 << TWSTA) | (1 << TWEN);
    299e:	e6 e5       	ldi	r30, 0x56	; 86
    29a0:	f0 e0       	ldi	r31, 0x00	; 0
    29a2:	84 ea       	ldi	r24, 0xA4	; 164
    29a4:	80 83       	st	Z, r24

	/* Wait for TWINT flag set in TWCR Register (start bit is send successfully) */
	while(BIT_IS_CLEAR(TWCR,TWINT));
    29a6:	e6 e5       	ldi	r30, 0x56	; 86
    29a8:	f0 e0       	ldi	r31, 0x00	; 0
    29aa:	80 81       	ld	r24, Z
    29ac:	88 23       	and	r24, r24
    29ae:	dc f7       	brge	.-10     	; 0x29a6 <TWI_start+0x10>
}
    29b0:	cf 91       	pop	r28
    29b2:	df 91       	pop	r29
    29b4:	08 95       	ret

000029b6 <TWI_stop>:

void TWI_stop(void)
{
    29b6:	df 93       	push	r29
    29b8:	cf 93       	push	r28
    29ba:	cd b7       	in	r28, 0x3d	; 61
    29bc:	de b7       	in	r29, 0x3e	; 62
	/*
	 * Clear the TWINT flag before sending the stop bit TWINT=1
	 * send the stop bit by TWSTO=1
	 * Enable TWI Module TWEN=1 
	 */
	TWCR = (1 << TWINT) | (1 << TWSTO) | (1 << TWEN);
    29be:	e6 e5       	ldi	r30, 0x56	; 86
    29c0:	f0 e0       	ldi	r31, 0x00	; 0
    29c2:	84 e9       	ldi	r24, 0x94	; 148
    29c4:	80 83       	st	Z, r24
}
    29c6:	cf 91       	pop	r28
    29c8:	df 91       	pop	r29
    29ca:	08 95       	ret

000029cc <TWI_writeByte>:

void TWI_writeByte(uint8 data)
{
    29cc:	df 93       	push	r29
    29ce:	cf 93       	push	r28
    29d0:	0f 92       	push	r0
    29d2:	cd b7       	in	r28, 0x3d	; 61
    29d4:	de b7       	in	r29, 0x3e	; 62
    29d6:	89 83       	std	Y+1, r24	; 0x01
	/* Put data On TWI data Register */
	TWDR = data;
    29d8:	e3 e2       	ldi	r30, 0x23	; 35
    29da:	f0 e0       	ldi	r31, 0x00	; 0
    29dc:	89 81       	ldd	r24, Y+1	; 0x01
    29de:	80 83       	st	Z, r24
	/*
	 * Clear the TWINT flag before sending the data TWINT=1
	 * Enable TWI Module TWEN=1 
	 */ 
	TWCR = (1 << TWINT) | (1 << TWEN);
    29e0:	e6 e5       	ldi	r30, 0x56	; 86
    29e2:	f0 e0       	ldi	r31, 0x00	; 0
    29e4:	84 e8       	ldi	r24, 0x84	; 132
    29e6:	80 83       	st	Z, r24
	/* Wait for TWINT flag set in TWCR Register(data is send successfully) */
	while(BIT_IS_CLEAR(TWCR,TWINT));
    29e8:	e6 e5       	ldi	r30, 0x56	; 86
    29ea:	f0 e0       	ldi	r31, 0x00	; 0
    29ec:	80 81       	ld	r24, Z
    29ee:	88 23       	and	r24, r24
    29f0:	dc f7       	brge	.-10     	; 0x29e8 <TWI_writeByte+0x1c>
}
    29f2:	0f 90       	pop	r0
    29f4:	cf 91       	pop	r28
    29f6:	df 91       	pop	r29
    29f8:	08 95       	ret

000029fa <TWI_readByteWithACK>:

uint8 TWI_readByteWithACK(void)
{
    29fa:	df 93       	push	r29
    29fc:	cf 93       	push	r28
    29fe:	cd b7       	in	r28, 0x3d	; 61
    2a00:	de b7       	in	r29, 0x3e	; 62
	/* 
	 * Clear the TWINT flag before reading the data TWINT=1
	 * Enable sending ACK after reading or receiving data TWEA=1
	 * Enable TWI Module TWEN=1 
	 */ 
	TWCR = (1 << TWINT) | (1 << TWEN) | (1 << TWEA);
    2a02:	e6 e5       	ldi	r30, 0x56	; 86
    2a04:	f0 e0       	ldi	r31, 0x00	; 0
    2a06:	84 ec       	ldi	r24, 0xC4	; 196
    2a08:	80 83       	st	Z, r24
	/* Wait for TWINT flag set in TWCR Register (data received successfully) */
	while(BIT_IS_CLEAR(TWCR,TWINT));
    2a0a:	e6 e5       	ldi	r30, 0x56	; 86
    2a0c:	f0 e0       	ldi	r31, 0x00	; 0
    2a0e:	80 81       	ld	r24, Z
    2a10:	88 23       	and	r24, r24
    2a12:	dc f7       	brge	.-10     	; 0x2a0a <TWI_readByteWithACK+0x10>
	/* Read Data */
	return TWDR;
    2a14:	e3 e2       	ldi	r30, 0x23	; 35
    2a16:	f0 e0       	ldi	r31, 0x00	; 0
    2a18:	80 81       	ld	r24, Z
}
    2a1a:	cf 91       	pop	r28
    2a1c:	df 91       	pop	r29
    2a1e:	08 95       	ret

00002a20 <TWI_readByteWithNACK>:

uint8 TWI_readByteWithNACK(void)
{
    2a20:	df 93       	push	r29
    2a22:	cf 93       	push	r28
    2a24:	cd b7       	in	r28, 0x3d	; 61
    2a26:	de b7       	in	r29, 0x3e	; 62
	/* 
	 * Clear the TWINT flag before reading the data TWINT=1
	 * Enable TWI Module TWEN=1 
	 */
	TWCR = (1 << TWINT) | (1 << TWEN);
    2a28:	e6 e5       	ldi	r30, 0x56	; 86
    2a2a:	f0 e0       	ldi	r31, 0x00	; 0
    2a2c:	84 e8       	ldi	r24, 0x84	; 132
    2a2e:	80 83       	st	Z, r24
	/* Wait for TWINT flag set in TWCR Register (data received successfully) */
	while(BIT_IS_CLEAR(TWCR,TWINT));
    2a30:	e6 e5       	ldi	r30, 0x56	; 86
    2a32:	f0 e0       	ldi	r31, 0x00	; 0
    2a34:	80 81       	ld	r24, Z
    2a36:	88 23       	and	r24, r24
    2a38:	dc f7       	brge	.-10     	; 0x2a30 <TWI_readByteWithNACK+0x10>
	/* Read Data */
	return TWDR;
    2a3a:	e3 e2       	ldi	r30, 0x23	; 35
    2a3c:	f0 e0       	ldi	r31, 0x00	; 0
    2a3e:	80 81       	ld	r24, Z
}
    2a40:	cf 91       	pop	r28
    2a42:	df 91       	pop	r29
    2a44:	08 95       	ret

00002a46 <TWI_getStatus>:

uint8 TWI_getStatus(void)
{
    2a46:	df 93       	push	r29
    2a48:	cf 93       	push	r28
    2a4a:	0f 92       	push	r0
    2a4c:	cd b7       	in	r28, 0x3d	; 61
    2a4e:	de b7       	in	r29, 0x3e	; 62
	uint8 status;
	/* masking to eliminate first 3 bits and get the last 5 bits (status bits) */
	status = TWSR & 0xF8;
    2a50:	e1 e2       	ldi	r30, 0x21	; 33
    2a52:	f0 e0       	ldi	r31, 0x00	; 0
    2a54:	80 81       	ld	r24, Z
    2a56:	88 7f       	andi	r24, 0xF8	; 248
    2a58:	89 83       	std	Y+1, r24	; 0x01
	return status;
    2a5a:	89 81       	ldd	r24, Y+1	; 0x01
}
    2a5c:	0f 90       	pop	r0
    2a5e:	cf 91       	pop	r28
    2a60:	df 91       	pop	r29
    2a62:	08 95       	ret

00002a64 <UART_init>:
 * 1. Setup the Frame format like number of data bits, parity bit type and number of stop bits.
 * 2. Enable the UART.
 * 3. Setup the UART baud rate.
 */
void UART_init(uint32 baud_rate, const UART_Config *config_ptr)
{
    2a64:	df 93       	push	r29
    2a66:	cf 93       	push	r28
    2a68:	cd b7       	in	r28, 0x3d	; 61
    2a6a:	de b7       	in	r29, 0x3e	; 62
    2a6c:	28 97       	sbiw	r28, 0x08	; 8
    2a6e:	0f b6       	in	r0, 0x3f	; 63
    2a70:	f8 94       	cli
    2a72:	de bf       	out	0x3e, r29	; 62
    2a74:	0f be       	out	0x3f, r0	; 63
    2a76:	cd bf       	out	0x3d, r28	; 61
    2a78:	6b 83       	std	Y+3, r22	; 0x03
    2a7a:	7c 83       	std	Y+4, r23	; 0x04
    2a7c:	8d 83       	std	Y+5, r24	; 0x05
    2a7e:	9e 83       	std	Y+6, r25	; 0x06
    2a80:	58 87       	std	Y+8, r21	; 0x08
    2a82:	4f 83       	std	Y+7, r20	; 0x07
	uint16 ubrr_value = 0;
    2a84:	1a 82       	std	Y+2, r1	; 0x02
    2a86:	19 82       	std	Y+1, r1	; 0x01
	/*Write this bit one to double the transfer rate for asynchronous communication */
	UCSRA = (1<<U2X);
    2a88:	eb e2       	ldi	r30, 0x2B	; 43
    2a8a:	f0 e0       	ldi	r31, 0x00	; 0
    2a8c:	82 e0       	ldi	r24, 0x02	; 2
    2a8e:	80 83       	st	Z, r24
	 * RXEN  = 1 Receiver Enable
	 * RXEN  = 1 Transmitter Enable
	 * UCSZ2 = 0 For 8-bit data mode
	 * RXB8 & TXB8 not used for 8-bit data mode
	 ***********************************************************************/
	UCSRB = (1<<RXEN) | (1<<TXEN);
    2a90:	ea e2       	ldi	r30, 0x2A	; 42
    2a92:	f0 e0       	ldi	r31, 0x00	; 0
    2a94:	88 e1       	ldi	r24, 0x18	; 24
    2a96:	80 83       	st	Z, r24
	 * UPM1:0  = 00 Disable parity bit
	 * USBS    = 0 One stop bit
	 * UCSZ1:0 = 11 For 8-bit data mode
	 * UCPOL   = 0 Used with the Synchronous operation only
	 ***********************************************************************/
	UCSRC = (1<<URSEL);
    2a98:	e0 e4       	ldi	r30, 0x40	; 64
    2a9a:	f0 e0       	ldi	r31, 0x00	; 0
    2a9c:	80 e8       	ldi	r24, 0x80	; 128
    2a9e:	80 83       	st	Z, r24
	UCSRC = ( UCSRC & 0xCF ) | ((config_ptr -> parity_mode ) <<UPM0);
    2aa0:	a0 e4       	ldi	r26, 0x40	; 64
    2aa2:	b0 e0       	ldi	r27, 0x00	; 0
    2aa4:	e0 e4       	ldi	r30, 0x40	; 64
    2aa6:	f0 e0       	ldi	r31, 0x00	; 0
    2aa8:	80 81       	ld	r24, Z
    2aaa:	28 2f       	mov	r18, r24
    2aac:	2f 7c       	andi	r18, 0xCF	; 207
    2aae:	ef 81       	ldd	r30, Y+7	; 0x07
    2ab0:	f8 85       	ldd	r31, Y+8	; 0x08
    2ab2:	82 81       	ldd	r24, Z+2	; 0x02
    2ab4:	88 2f       	mov	r24, r24
    2ab6:	90 e0       	ldi	r25, 0x00	; 0
    2ab8:	82 95       	swap	r24
    2aba:	92 95       	swap	r25
    2abc:	90 7f       	andi	r25, 0xF0	; 240
    2abe:	98 27       	eor	r25, r24
    2ac0:	80 7f       	andi	r24, 0xF0	; 240
    2ac2:	98 27       	eor	r25, r24
    2ac4:	82 2b       	or	r24, r18
    2ac6:	8c 93       	st	X, r24
	UCSRC = ( UCSRC & 0xF7 ) | ((config_ptr -> stop_bit ) <<USBS);
    2ac8:	a0 e4       	ldi	r26, 0x40	; 64
    2aca:	b0 e0       	ldi	r27, 0x00	; 0
    2acc:	e0 e4       	ldi	r30, 0x40	; 64
    2ace:	f0 e0       	ldi	r31, 0x00	; 0
    2ad0:	80 81       	ld	r24, Z
    2ad2:	28 2f       	mov	r18, r24
    2ad4:	27 7f       	andi	r18, 0xF7	; 247
    2ad6:	ef 81       	ldd	r30, Y+7	; 0x07
    2ad8:	f8 85       	ldd	r31, Y+8	; 0x08
    2ada:	80 81       	ld	r24, Z
    2adc:	88 2f       	mov	r24, r24
    2ade:	90 e0       	ldi	r25, 0x00	; 0
    2ae0:	88 0f       	add	r24, r24
    2ae2:	99 1f       	adc	r25, r25
    2ae4:	88 0f       	add	r24, r24
    2ae6:	99 1f       	adc	r25, r25
    2ae8:	88 0f       	add	r24, r24
    2aea:	99 1f       	adc	r25, r25
    2aec:	82 2b       	or	r24, r18
    2aee:	8c 93       	st	X, r24
	UCSRC = ( UCSRC & 0xF9 ) | ((config_ptr -> size ) <<UCSZ0);
    2af0:	a0 e4       	ldi	r26, 0x40	; 64
    2af2:	b0 e0       	ldi	r27, 0x00	; 0
    2af4:	e0 e4       	ldi	r30, 0x40	; 64
    2af6:	f0 e0       	ldi	r31, 0x00	; 0
    2af8:	80 81       	ld	r24, Z
    2afa:	28 2f       	mov	r18, r24
    2afc:	29 7f       	andi	r18, 0xF9	; 249
    2afe:	ef 81       	ldd	r30, Y+7	; 0x07
    2b00:	f8 85       	ldd	r31, Y+8	; 0x08
    2b02:	81 81       	ldd	r24, Z+1	; 0x01
    2b04:	88 2f       	mov	r24, r24
    2b06:	90 e0       	ldi	r25, 0x00	; 0
    2b08:	88 0f       	add	r24, r24
    2b0a:	99 1f       	adc	r25, r25
    2b0c:	82 2b       	or	r24, r18
    2b0e:	8c 93       	st	X, r24


		/* Calculate the UBRR register value */
	ubrr_value = (uint16)(((F_CPU / (baud_rate * 8UL))) - 1);
    2b10:	8b 81       	ldd	r24, Y+3	; 0x03
    2b12:	9c 81       	ldd	r25, Y+4	; 0x04
    2b14:	ad 81       	ldd	r26, Y+5	; 0x05
    2b16:	be 81       	ldd	r27, Y+6	; 0x06
    2b18:	88 0f       	add	r24, r24
    2b1a:	99 1f       	adc	r25, r25
    2b1c:	aa 1f       	adc	r26, r26
    2b1e:	bb 1f       	adc	r27, r27
    2b20:	88 0f       	add	r24, r24
    2b22:	99 1f       	adc	r25, r25
    2b24:	aa 1f       	adc	r26, r26
    2b26:	bb 1f       	adc	r27, r27
    2b28:	88 0f       	add	r24, r24
    2b2a:	99 1f       	adc	r25, r25
    2b2c:	aa 1f       	adc	r26, r26
    2b2e:	bb 1f       	adc	r27, r27
    2b30:	9c 01       	movw	r18, r24
    2b32:	ad 01       	movw	r20, r26
    2b34:	80 e4       	ldi	r24, 0x40	; 64
    2b36:	92 e4       	ldi	r25, 0x42	; 66
    2b38:	af e0       	ldi	r26, 0x0F	; 15
    2b3a:	b0 e0       	ldi	r27, 0x00	; 0
    2b3c:	bc 01       	movw	r22, r24
    2b3e:	cd 01       	movw	r24, r26
    2b40:	0e 94 5f 16 	call	0x2cbe	; 0x2cbe <__udivmodsi4>
    2b44:	da 01       	movw	r26, r20
    2b46:	c9 01       	movw	r24, r18
    2b48:	01 97       	sbiw	r24, 0x01	; 1
    2b4a:	9a 83       	std	Y+2, r25	; 0x02
    2b4c:	89 83       	std	Y+1, r24	; 0x01

	/* First 8 bits from the BAUD_PRESCALE inside UBRRL and last 4 bits in UBRRH*/
	UBRRH = ubrr_value>>8;
    2b4e:	e0 e4       	ldi	r30, 0x40	; 64
    2b50:	f0 e0       	ldi	r31, 0x00	; 0
    2b52:	89 81       	ldd	r24, Y+1	; 0x01
    2b54:	9a 81       	ldd	r25, Y+2	; 0x02
    2b56:	89 2f       	mov	r24, r25
    2b58:	99 27       	eor	r25, r25
    2b5a:	80 83       	st	Z, r24
	UBRRL = ubrr_value;
    2b5c:	e9 e2       	ldi	r30, 0x29	; 41
    2b5e:	f0 e0       	ldi	r31, 0x00	; 0
    2b60:	89 81       	ldd	r24, Y+1	; 0x01
    2b62:	80 83       	st	Z, r24
}
    2b64:	28 96       	adiw	r28, 0x08	; 8
    2b66:	0f b6       	in	r0, 0x3f	; 63
    2b68:	f8 94       	cli
    2b6a:	de bf       	out	0x3e, r29	; 62
    2b6c:	0f be       	out	0x3f, r0	; 63
    2b6e:	cd bf       	out	0x3d, r28	; 61
    2b70:	cf 91       	pop	r28
    2b72:	df 91       	pop	r29
    2b74:	08 95       	ret

00002b76 <UART_sendByte>:
/*
 * Description :
 * Functional responsible for send byte to another UART device.
 */
void UART_sendByte(const uint8 data)
{
    2b76:	df 93       	push	r29
    2b78:	cf 93       	push	r28
    2b7a:	0f 92       	push	r0
    2b7c:	cd b7       	in	r28, 0x3d	; 61
    2b7e:	de b7       	in	r29, 0x3e	; 62
    2b80:	89 83       	std	Y+1, r24	; 0x01
	UDR = data;
    2b82:	ec e2       	ldi	r30, 0x2C	; 44
    2b84:	f0 e0       	ldi	r31, 0x00	; 0
    2b86:	89 81       	ldd	r24, Y+1	; 0x01
    2b88:	80 83       	st	Z, r24
	while(BIT_IS_CLEAR(UCSRA,TXC)){} // Wait until the transmission is complete TXC = 1
    2b8a:	eb e2       	ldi	r30, 0x2B	; 43
    2b8c:	f0 e0       	ldi	r31, 0x00	; 0
    2b8e:	80 81       	ld	r24, Z
    2b90:	88 2f       	mov	r24, r24
    2b92:	90 e0       	ldi	r25, 0x00	; 0
    2b94:	80 74       	andi	r24, 0x40	; 64
    2b96:	90 70       	andi	r25, 0x00	; 0
    2b98:	00 97       	sbiw	r24, 0x00	; 0
    2b9a:	b9 f3       	breq	.-18     	; 0x2b8a <UART_sendByte+0x14>
	SET_BIT(UCSRA,TXC); // Clear the TXC flag
    2b9c:	ab e2       	ldi	r26, 0x2B	; 43
    2b9e:	b0 e0       	ldi	r27, 0x00	; 0
    2ba0:	eb e2       	ldi	r30, 0x2B	; 43
    2ba2:	f0 e0       	ldi	r31, 0x00	; 0
    2ba4:	80 81       	ld	r24, Z
    2ba6:	80 64       	ori	r24, 0x40	; 64
    2ba8:	8c 93       	st	X, r24
}
    2baa:	0f 90       	pop	r0
    2bac:	cf 91       	pop	r28
    2bae:	df 91       	pop	r29
    2bb0:	08 95       	ret

00002bb2 <UART_recieveByte>:
/*
 * Description :
 * Functional responsible for receive byte from another UART device.
 */
uint8 UART_recieveByte()
{
    2bb2:	df 93       	push	r29
    2bb4:	cf 93       	push	r28
    2bb6:	cd b7       	in	r28, 0x3d	; 61
    2bb8:	de b7       	in	r29, 0x3e	; 62
	while(BIT_IS_CLEAR(UCSRA,RXC)); /* RXC flag is set when the UART receive data so wait until this flag is set to one */
    2bba:	eb e2       	ldi	r30, 0x2B	; 43
    2bbc:	f0 e0       	ldi	r31, 0x00	; 0
    2bbe:	80 81       	ld	r24, Z
    2bc0:	88 23       	and	r24, r24
    2bc2:	dc f7       	brge	.-10     	; 0x2bba <UART_recieveByte+0x8>
	SET_BIT(UCSRA,RXC); /* Clear the TXC flag*/
    2bc4:	ab e2       	ldi	r26, 0x2B	; 43
    2bc6:	b0 e0       	ldi	r27, 0x00	; 0
    2bc8:	eb e2       	ldi	r30, 0x2B	; 43
    2bca:	f0 e0       	ldi	r31, 0x00	; 0
    2bcc:	80 81       	ld	r24, Z
    2bce:	80 68       	ori	r24, 0x80	; 128
    2bd0:	8c 93       	st	X, r24
	return UDR;   /*Read the received data from the Rx buffer (UDR)*/
    2bd2:	ec e2       	ldi	r30, 0x2C	; 44
    2bd4:	f0 e0       	ldi	r31, 0x00	; 0
    2bd6:	80 81       	ld	r24, Z


}
    2bd8:	cf 91       	pop	r28
    2bda:	df 91       	pop	r29
    2bdc:	08 95       	ret

00002bde <UART_sendString>:
/*
 * Description :
 * Send the required string through UART to the other UART device.
 */
void UART_sendString(const char *str)
{
    2bde:	df 93       	push	r29
    2be0:	cf 93       	push	r28
    2be2:	00 d0       	rcall	.+0      	; 0x2be4 <UART_sendString+0x6>
    2be4:	0f 92       	push	r0
    2be6:	cd b7       	in	r28, 0x3d	; 61
    2be8:	de b7       	in	r29, 0x3e	; 62
    2bea:	9b 83       	std	Y+3, r25	; 0x03
    2bec:	8a 83       	std	Y+2, r24	; 0x02
	uint8 i = 0;
    2bee:	19 82       	std	Y+1, r1	; 0x01
    2bf0:	0e c0       	rjmp	.+28     	; 0x2c0e <UART_sendString+0x30>
	while(str[i] !="\0")
	{
		UART_sendByte(str[i]);
    2bf2:	89 81       	ldd	r24, Y+1	; 0x01
    2bf4:	28 2f       	mov	r18, r24
    2bf6:	30 e0       	ldi	r19, 0x00	; 0
    2bf8:	8a 81       	ldd	r24, Y+2	; 0x02
    2bfa:	9b 81       	ldd	r25, Y+3	; 0x03
    2bfc:	fc 01       	movw	r30, r24
    2bfe:	e2 0f       	add	r30, r18
    2c00:	f3 1f       	adc	r31, r19
    2c02:	80 81       	ld	r24, Z
    2c04:	0e 94 bb 15 	call	0x2b76	; 0x2b76 <UART_sendByte>
		i++;
    2c08:	89 81       	ldd	r24, Y+1	; 0x01
    2c0a:	8f 5f       	subi	r24, 0xFF	; 255
    2c0c:	89 83       	std	Y+1, r24	; 0x01
 * Send the required string through UART to the other UART device.
 */
void UART_sendString(const char *str)
{
	uint8 i = 0;
	while(str[i] !="\0")
    2c0e:	89 81       	ldd	r24, Y+1	; 0x01
    2c10:	28 2f       	mov	r18, r24
    2c12:	30 e0       	ldi	r19, 0x00	; 0
    2c14:	8a 81       	ldd	r24, Y+2	; 0x02
    2c16:	9b 81       	ldd	r25, Y+3	; 0x03
    2c18:	fc 01       	movw	r30, r24
    2c1a:	e2 0f       	add	r30, r18
    2c1c:	f3 1f       	adc	r31, r19
    2c1e:	80 81       	ld	r24, Z
    2c20:	88 2f       	mov	r24, r24
    2c22:	90 e0       	ldi	r25, 0x00	; 0
    2c24:	20 e0       	ldi	r18, 0x00	; 0
    2c26:	8c 36       	cpi	r24, 0x6C	; 108
    2c28:	92 07       	cpc	r25, r18
    2c2a:	19 f7       	brne	.-58     	; 0x2bf2 <UART_sendString+0x14>
	{
		UART_sendByte(str[i]);
		i++;
	}

}
    2c2c:	0f 90       	pop	r0
    2c2e:	0f 90       	pop	r0
    2c30:	0f 90       	pop	r0
    2c32:	cf 91       	pop	r28
    2c34:	df 91       	pop	r29
    2c36:	08 95       	ret

00002c38 <UART_receiveString>:
/*
 * Description :
 * Receive the required string until the '#' symbol through UART from the other UART device.
 */
void UART_receiveString(uint8 *str)
{
    2c38:	0f 93       	push	r16
    2c3a:	1f 93       	push	r17
    2c3c:	df 93       	push	r29
    2c3e:	cf 93       	push	r28
    2c40:	00 d0       	rcall	.+0      	; 0x2c42 <UART_receiveString+0xa>
    2c42:	0f 92       	push	r0
    2c44:	cd b7       	in	r28, 0x3d	; 61
    2c46:	de b7       	in	r29, 0x3e	; 62
    2c48:	9b 83       	std	Y+3, r25	; 0x03
    2c4a:	8a 83       	std	Y+2, r24	; 0x02
	uint8 i = 0;
    2c4c:	19 82       	std	Y+1, r1	; 0x01

	/* Receive the first byte */
	str[i] = UART_recieveByte();
    2c4e:	89 81       	ldd	r24, Y+1	; 0x01
    2c50:	28 2f       	mov	r18, r24
    2c52:	30 e0       	ldi	r19, 0x00	; 0
    2c54:	8a 81       	ldd	r24, Y+2	; 0x02
    2c56:	9b 81       	ldd	r25, Y+3	; 0x03
    2c58:	8c 01       	movw	r16, r24
    2c5a:	02 0f       	add	r16, r18
    2c5c:	13 1f       	adc	r17, r19
    2c5e:	0e 94 d9 15 	call	0x2bb2	; 0x2bb2 <UART_recieveByte>
    2c62:	f8 01       	movw	r30, r16
    2c64:	80 83       	st	Z, r24
    2c66:	0f c0       	rjmp	.+30     	; 0x2c86 <UART_receiveString+0x4e>

	/* Receive the whole string until the '#' */
	while(str[i] != '#')
	{
		i++;
    2c68:	89 81       	ldd	r24, Y+1	; 0x01
    2c6a:	8f 5f       	subi	r24, 0xFF	; 255
    2c6c:	89 83       	std	Y+1, r24	; 0x01
		str[i] = UART_recieveByte();
    2c6e:	89 81       	ldd	r24, Y+1	; 0x01
    2c70:	28 2f       	mov	r18, r24
    2c72:	30 e0       	ldi	r19, 0x00	; 0
    2c74:	8a 81       	ldd	r24, Y+2	; 0x02
    2c76:	9b 81       	ldd	r25, Y+3	; 0x03
    2c78:	8c 01       	movw	r16, r24
    2c7a:	02 0f       	add	r16, r18
    2c7c:	13 1f       	adc	r17, r19
    2c7e:	0e 94 d9 15 	call	0x2bb2	; 0x2bb2 <UART_recieveByte>
    2c82:	f8 01       	movw	r30, r16
    2c84:	80 83       	st	Z, r24

	/* Receive the first byte */
	str[i] = UART_recieveByte();

	/* Receive the whole string until the '#' */
	while(str[i] != '#')
    2c86:	89 81       	ldd	r24, Y+1	; 0x01
    2c88:	28 2f       	mov	r18, r24
    2c8a:	30 e0       	ldi	r19, 0x00	; 0
    2c8c:	8a 81       	ldd	r24, Y+2	; 0x02
    2c8e:	9b 81       	ldd	r25, Y+3	; 0x03
    2c90:	fc 01       	movw	r30, r24
    2c92:	e2 0f       	add	r30, r18
    2c94:	f3 1f       	adc	r31, r19
    2c96:	80 81       	ld	r24, Z
    2c98:	83 32       	cpi	r24, 0x23	; 35
    2c9a:	31 f7       	brne	.-52     	; 0x2c68 <UART_receiveString+0x30>
		i++;
		str[i] = UART_recieveByte();
	}

	/* After receiving the whole string plus the '#', replace the '#' with '\0' */
	str[i] = '\0';
    2c9c:	89 81       	ldd	r24, Y+1	; 0x01
    2c9e:	28 2f       	mov	r18, r24
    2ca0:	30 e0       	ldi	r19, 0x00	; 0
    2ca2:	8a 81       	ldd	r24, Y+2	; 0x02
    2ca4:	9b 81       	ldd	r25, Y+3	; 0x03
    2ca6:	fc 01       	movw	r30, r24
    2ca8:	e2 0f       	add	r30, r18
    2caa:	f3 1f       	adc	r31, r19
    2cac:	10 82       	st	Z, r1
}
    2cae:	0f 90       	pop	r0
    2cb0:	0f 90       	pop	r0
    2cb2:	0f 90       	pop	r0
    2cb4:	cf 91       	pop	r28
    2cb6:	df 91       	pop	r29
    2cb8:	1f 91       	pop	r17
    2cba:	0f 91       	pop	r16
    2cbc:	08 95       	ret

00002cbe <__udivmodsi4>:
    2cbe:	a1 e2       	ldi	r26, 0x21	; 33
    2cc0:	1a 2e       	mov	r1, r26
    2cc2:	aa 1b       	sub	r26, r26
    2cc4:	bb 1b       	sub	r27, r27
    2cc6:	fd 01       	movw	r30, r26
    2cc8:	0d c0       	rjmp	.+26     	; 0x2ce4 <__udivmodsi4_ep>

00002cca <__udivmodsi4_loop>:
    2cca:	aa 1f       	adc	r26, r26
    2ccc:	bb 1f       	adc	r27, r27
    2cce:	ee 1f       	adc	r30, r30
    2cd0:	ff 1f       	adc	r31, r31
    2cd2:	a2 17       	cp	r26, r18
    2cd4:	b3 07       	cpc	r27, r19
    2cd6:	e4 07       	cpc	r30, r20
    2cd8:	f5 07       	cpc	r31, r21
    2cda:	20 f0       	brcs	.+8      	; 0x2ce4 <__udivmodsi4_ep>
    2cdc:	a2 1b       	sub	r26, r18
    2cde:	b3 0b       	sbc	r27, r19
    2ce0:	e4 0b       	sbc	r30, r20
    2ce2:	f5 0b       	sbc	r31, r21

00002ce4 <__udivmodsi4_ep>:
    2ce4:	66 1f       	adc	r22, r22
    2ce6:	77 1f       	adc	r23, r23
    2ce8:	88 1f       	adc	r24, r24
    2cea:	99 1f       	adc	r25, r25
    2cec:	1a 94       	dec	r1
    2cee:	69 f7       	brne	.-38     	; 0x2cca <__udivmodsi4_loop>
    2cf0:	60 95       	com	r22
    2cf2:	70 95       	com	r23
    2cf4:	80 95       	com	r24
    2cf6:	90 95       	com	r25
    2cf8:	9b 01       	movw	r18, r22
    2cfa:	ac 01       	movw	r20, r24
    2cfc:	bd 01       	movw	r22, r26
    2cfe:	cf 01       	movw	r24, r30
    2d00:	08 95       	ret

00002d02 <__prologue_saves__>:
    2d02:	2f 92       	push	r2
    2d04:	3f 92       	push	r3
    2d06:	4f 92       	push	r4
    2d08:	5f 92       	push	r5
    2d0a:	6f 92       	push	r6
    2d0c:	7f 92       	push	r7
    2d0e:	8f 92       	push	r8
    2d10:	9f 92       	push	r9
    2d12:	af 92       	push	r10
    2d14:	bf 92       	push	r11
    2d16:	cf 92       	push	r12
    2d18:	df 92       	push	r13
    2d1a:	ef 92       	push	r14
    2d1c:	ff 92       	push	r15
    2d1e:	0f 93       	push	r16
    2d20:	1f 93       	push	r17
    2d22:	cf 93       	push	r28
    2d24:	df 93       	push	r29
    2d26:	cd b7       	in	r28, 0x3d	; 61
    2d28:	de b7       	in	r29, 0x3e	; 62
    2d2a:	ca 1b       	sub	r28, r26
    2d2c:	db 0b       	sbc	r29, r27
    2d2e:	0f b6       	in	r0, 0x3f	; 63
    2d30:	f8 94       	cli
    2d32:	de bf       	out	0x3e, r29	; 62
    2d34:	0f be       	out	0x3f, r0	; 63
    2d36:	cd bf       	out	0x3d, r28	; 61
    2d38:	09 94       	ijmp

00002d3a <__epilogue_restores__>:
    2d3a:	2a 88       	ldd	r2, Y+18	; 0x12
    2d3c:	39 88       	ldd	r3, Y+17	; 0x11
    2d3e:	48 88       	ldd	r4, Y+16	; 0x10
    2d40:	5f 84       	ldd	r5, Y+15	; 0x0f
    2d42:	6e 84       	ldd	r6, Y+14	; 0x0e
    2d44:	7d 84       	ldd	r7, Y+13	; 0x0d
    2d46:	8c 84       	ldd	r8, Y+12	; 0x0c
    2d48:	9b 84       	ldd	r9, Y+11	; 0x0b
    2d4a:	aa 84       	ldd	r10, Y+10	; 0x0a
    2d4c:	b9 84       	ldd	r11, Y+9	; 0x09
    2d4e:	c8 84       	ldd	r12, Y+8	; 0x08
    2d50:	df 80       	ldd	r13, Y+7	; 0x07
    2d52:	ee 80       	ldd	r14, Y+6	; 0x06
    2d54:	fd 80       	ldd	r15, Y+5	; 0x05
    2d56:	0c 81       	ldd	r16, Y+4	; 0x04
    2d58:	1b 81       	ldd	r17, Y+3	; 0x03
    2d5a:	aa 81       	ldd	r26, Y+2	; 0x02
    2d5c:	b9 81       	ldd	r27, Y+1	; 0x01
    2d5e:	ce 0f       	add	r28, r30
    2d60:	d1 1d       	adc	r29, r1
    2d62:	0f b6       	in	r0, 0x3f	; 63
    2d64:	f8 94       	cli
    2d66:	de bf       	out	0x3e, r29	; 62
    2d68:	0f be       	out	0x3f, r0	; 63
    2d6a:	cd bf       	out	0x3d, r28	; 61
    2d6c:	ed 01       	movw	r28, r26
    2d6e:	08 95       	ret

00002d70 <itoa>:
    2d70:	fb 01       	movw	r30, r22
    2d72:	9f 01       	movw	r18, r30
    2d74:	e8 94       	clt
    2d76:	42 30       	cpi	r20, 0x02	; 2
    2d78:	c4 f0       	brlt	.+48     	; 0x2daa <itoa+0x3a>
    2d7a:	45 32       	cpi	r20, 0x25	; 37
    2d7c:	b4 f4       	brge	.+44     	; 0x2daa <itoa+0x3a>
    2d7e:	4a 30       	cpi	r20, 0x0A	; 10
    2d80:	29 f4       	brne	.+10     	; 0x2d8c <itoa+0x1c>
    2d82:	97 fb       	bst	r25, 7
    2d84:	1e f4       	brtc	.+6      	; 0x2d8c <itoa+0x1c>
    2d86:	90 95       	com	r25
    2d88:	81 95       	neg	r24
    2d8a:	9f 4f       	sbci	r25, 0xFF	; 255
    2d8c:	64 2f       	mov	r22, r20
    2d8e:	77 27       	eor	r23, r23
    2d90:	0e 94 e9 16 	call	0x2dd2	; 0x2dd2 <__udivmodhi4>
    2d94:	80 5d       	subi	r24, 0xD0	; 208
    2d96:	8a 33       	cpi	r24, 0x3A	; 58
    2d98:	0c f0       	brlt	.+2      	; 0x2d9c <itoa+0x2c>
    2d9a:	89 5d       	subi	r24, 0xD9	; 217
    2d9c:	81 93       	st	Z+, r24
    2d9e:	cb 01       	movw	r24, r22
    2da0:	00 97       	sbiw	r24, 0x00	; 0
    2da2:	a1 f7       	brne	.-24     	; 0x2d8c <itoa+0x1c>
    2da4:	16 f4       	brtc	.+4      	; 0x2daa <itoa+0x3a>
    2da6:	5d e2       	ldi	r21, 0x2D	; 45
    2da8:	51 93       	st	Z+, r21
    2daa:	10 82       	st	Z, r1
    2dac:	c9 01       	movw	r24, r18
    2dae:	0c 94 d9 16 	jmp	0x2db2	; 0x2db2 <strrev>

00002db2 <strrev>:
    2db2:	dc 01       	movw	r26, r24
    2db4:	fc 01       	movw	r30, r24
    2db6:	67 2f       	mov	r22, r23
    2db8:	71 91       	ld	r23, Z+
    2dba:	77 23       	and	r23, r23
    2dbc:	e1 f7       	brne	.-8      	; 0x2db6 <strrev+0x4>
    2dbe:	32 97       	sbiw	r30, 0x02	; 2
    2dc0:	04 c0       	rjmp	.+8      	; 0x2dca <strrev+0x18>
    2dc2:	7c 91       	ld	r23, X
    2dc4:	6d 93       	st	X+, r22
    2dc6:	70 83       	st	Z, r23
    2dc8:	62 91       	ld	r22, -Z
    2dca:	ae 17       	cp	r26, r30
    2dcc:	bf 07       	cpc	r27, r31
    2dce:	c8 f3       	brcs	.-14     	; 0x2dc2 <strrev+0x10>
    2dd0:	08 95       	ret

00002dd2 <__udivmodhi4>:
    2dd2:	aa 1b       	sub	r26, r26
    2dd4:	bb 1b       	sub	r27, r27
    2dd6:	51 e1       	ldi	r21, 0x11	; 17
    2dd8:	07 c0       	rjmp	.+14     	; 0x2de8 <__udivmodhi4_ep>

00002dda <__udivmodhi4_loop>:
    2dda:	aa 1f       	adc	r26, r26
    2ddc:	bb 1f       	adc	r27, r27
    2dde:	a6 17       	cp	r26, r22
    2de0:	b7 07       	cpc	r27, r23
    2de2:	10 f0       	brcs	.+4      	; 0x2de8 <__udivmodhi4_ep>
    2de4:	a6 1b       	sub	r26, r22
    2de6:	b7 0b       	sbc	r27, r23

00002de8 <__udivmodhi4_ep>:
    2de8:	88 1f       	adc	r24, r24
    2dea:	99 1f       	adc	r25, r25
    2dec:	5a 95       	dec	r21
    2dee:	a9 f7       	brne	.-22     	; 0x2dda <__udivmodhi4_loop>
    2df0:	80 95       	com	r24
    2df2:	90 95       	com	r25
    2df4:	bc 01       	movw	r22, r24
    2df6:	cd 01       	movw	r24, r26
    2df8:	08 95       	ret

00002dfa <_exit>:
    2dfa:	f8 94       	cli

00002dfc <__stop_program>:
    2dfc:	ff cf       	rjmp	.-2      	; 0x2dfc <__stop_program>
